
FreeRTOS_Projects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d44  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000244  08006f14  08006f14  00007f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007158  08007158  00009068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007158  08007158  00008158  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007160  08007160  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007160  08007160  00008160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007164  08007164  00008164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007168  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000d1dc  20000068  080071d0  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000d244  080071d0  00009244  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d3f  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003157  00000000  00000000  0001cdd7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001440  00000000  00000000  0001ff30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f83  00000000  00000000  00021370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a09  00000000  00000000  000222f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018588  00000000  00000000  0004bcfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb843  00000000  00000000  00064284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015fac7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a74  00000000  00000000  0015fb0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009f  00000000  00000000  00165580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006efc 	.word	0x08006efc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08006efc 	.word	0x08006efc

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	2000bb20 	.word	0x2000bb20

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b988 	b.w	80005cc <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	468e      	mov	lr, r1
 80002dc:	4604      	mov	r4, r0
 80002de:	4688      	mov	r8, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14a      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d962      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	b14e      	cbz	r6, 8000304 <__udivmoddi4+0x30>
 80002f0:	f1c6 0320 	rsb	r3, r6, #32
 80002f4:	fa01 f806 	lsl.w	r8, r1, r6
 80002f8:	fa20 f303 	lsr.w	r3, r0, r3
 80002fc:	40b7      	lsls	r7, r6
 80002fe:	ea43 0808 	orr.w	r8, r3, r8
 8000302:	40b4      	lsls	r4, r6
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000310:	0c23      	lsrs	r3, r4, #16
 8000312:	fb0e 8811 	mls	r8, lr, r1, r8
 8000316:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800031a:	fb01 f20c 	mul.w	r2, r1, ip
 800031e:	429a      	cmp	r2, r3
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x62>
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	f101 30ff 	add.w	r0, r1, #4294967295
 8000328:	f080 80ea 	bcs.w	8000500 <__udivmoddi4+0x22c>
 800032c:	429a      	cmp	r2, r3
 800032e:	f240 80e7 	bls.w	8000500 <__udivmoddi4+0x22c>
 8000332:	3902      	subs	r1, #2
 8000334:	443b      	add	r3, r7
 8000336:	1a9a      	subs	r2, r3, r2
 8000338:	b2a3      	uxth	r3, r4
 800033a:	fbb2 f0fe 	udiv	r0, r2, lr
 800033e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb00 fc0c 	mul.w	ip, r0, ip
 800034a:	459c      	cmp	ip, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x8e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	f080 80d6 	bcs.w	8000504 <__udivmoddi4+0x230>
 8000358:	459c      	cmp	ip, r3
 800035a:	f240 80d3 	bls.w	8000504 <__udivmoddi4+0x230>
 800035e:	443b      	add	r3, r7
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000366:	eba3 030c 	sub.w	r3, r3, ip
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa2>
 800036e:	40f3      	lsrs	r3, r6
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xb6>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb0>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa2>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x14c>
 8000392:	4573      	cmp	r3, lr
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xc8>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 8105 	bhi.w	80005a6 <__udivmoddi4+0x2d2>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb6e 0203 	sbc.w	r2, lr, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	4690      	mov	r8, r2
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	d0e5      	beq.n	8000376 <__udivmoddi4+0xa2>
 80003aa:	e9c5 4800 	strd	r4, r8, [r5]
 80003ae:	e7e2      	b.n	8000376 <__udivmoddi4+0xa2>
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f000 8090 	beq.w	80004d6 <__udivmoddi4+0x202>
 80003b6:	fab2 f682 	clz	r6, r2
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f040 80a4 	bne.w	8000508 <__udivmoddi4+0x234>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	0c03      	lsrs	r3, r0, #16
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	b280      	uxth	r0, r0
 80003ca:	b2bc      	uxth	r4, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb2 fcfe 	udiv	ip, r2, lr
 80003d2:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003da:	fb04 f20c 	mul.w	r2, r4, ip
 80003de:	429a      	cmp	r2, r3
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x11e>
 80003e2:	18fb      	adds	r3, r7, r3
 80003e4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e8:	d202      	bcs.n	80003f0 <__udivmoddi4+0x11c>
 80003ea:	429a      	cmp	r2, r3
 80003ec:	f200 80e0 	bhi.w	80005b0 <__udivmoddi4+0x2dc>
 80003f0:	46c4      	mov	ip, r8
 80003f2:	1a9b      	subs	r3, r3, r2
 80003f4:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f8:	fb0e 3312 	mls	r3, lr, r2, r3
 80003fc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000400:	fb02 f404 	mul.w	r4, r2, r4
 8000404:	429c      	cmp	r4, r3
 8000406:	d907      	bls.n	8000418 <__udivmoddi4+0x144>
 8000408:	18fb      	adds	r3, r7, r3
 800040a:	f102 30ff 	add.w	r0, r2, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x142>
 8000410:	429c      	cmp	r4, r3
 8000412:	f200 80ca 	bhi.w	80005aa <__udivmoddi4+0x2d6>
 8000416:	4602      	mov	r2, r0
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x98>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa0e f401 	lsl.w	r4, lr, r1
 8000430:	fa20 f306 	lsr.w	r3, r0, r6
 8000434:	fa2e fe06 	lsr.w	lr, lr, r6
 8000438:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800043c:	4323      	orrs	r3, r4
 800043e:	fa00 f801 	lsl.w	r8, r0, r1
 8000442:	fa1f fc87 	uxth.w	ip, r7
 8000446:	fbbe f0f9 	udiv	r0, lr, r9
 800044a:	0c1c      	lsrs	r4, r3, #16
 800044c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000450:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000454:	fb00 fe0c 	mul.w	lr, r0, ip
 8000458:	45a6      	cmp	lr, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d909      	bls.n	8000474 <__udivmoddi4+0x1a0>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f100 3aff 	add.w	sl, r0, #4294967295
 8000466:	f080 809c 	bcs.w	80005a2 <__udivmoddi4+0x2ce>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f240 8099 	bls.w	80005a2 <__udivmoddi4+0x2ce>
 8000470:	3802      	subs	r0, #2
 8000472:	443c      	add	r4, r7
 8000474:	eba4 040e 	sub.w	r4, r4, lr
 8000478:	fa1f fe83 	uxth.w	lr, r3
 800047c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000480:	fb09 4413 	mls	r4, r9, r3, r4
 8000484:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000488:	fb03 fc0c 	mul.w	ip, r3, ip
 800048c:	45a4      	cmp	ip, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1ce>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f103 3eff 	add.w	lr, r3, #4294967295
 8000496:	f080 8082 	bcs.w	800059e <__udivmoddi4+0x2ca>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d97f      	bls.n	800059e <__udivmoddi4+0x2ca>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a6:	eba4 040c 	sub.w	r4, r4, ip
 80004aa:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ae:	4564      	cmp	r4, ip
 80004b0:	4673      	mov	r3, lr
 80004b2:	46e1      	mov	r9, ip
 80004b4:	d362      	bcc.n	800057c <__udivmoddi4+0x2a8>
 80004b6:	d05f      	beq.n	8000578 <__udivmoddi4+0x2a4>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x1fe>
 80004ba:	ebb8 0203 	subs.w	r2, r8, r3
 80004be:	eb64 0409 	sbc.w	r4, r4, r9
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ca:	431e      	orrs	r6, r3
 80004cc:	40cc      	lsrs	r4, r1
 80004ce:	e9c5 6400 	strd	r6, r4, [r5]
 80004d2:	2100      	movs	r1, #0
 80004d4:	e74f      	b.n	8000376 <__udivmoddi4+0xa2>
 80004d6:	fbb1 fcf2 	udiv	ip, r1, r2
 80004da:	0c01      	lsrs	r1, r0, #16
 80004dc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004e0:	b280      	uxth	r0, r0
 80004e2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e6:	463b      	mov	r3, r7
 80004e8:	4638      	mov	r0, r7
 80004ea:	463c      	mov	r4, r7
 80004ec:	46b8      	mov	r8, r7
 80004ee:	46be      	mov	lr, r7
 80004f0:	2620      	movs	r6, #32
 80004f2:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f6:	eba2 0208 	sub.w	r2, r2, r8
 80004fa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fe:	e766      	b.n	80003ce <__udivmoddi4+0xfa>
 8000500:	4601      	mov	r1, r0
 8000502:	e718      	b.n	8000336 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e72c      	b.n	8000362 <__udivmoddi4+0x8e>
 8000508:	f1c6 0220 	rsb	r2, r6, #32
 800050c:	fa2e f302 	lsr.w	r3, lr, r2
 8000510:	40b7      	lsls	r7, r6
 8000512:	40b1      	lsls	r1, r6
 8000514:	fa20 f202 	lsr.w	r2, r0, r2
 8000518:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800051c:	430a      	orrs	r2, r1
 800051e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000522:	b2bc      	uxth	r4, r7
 8000524:	fb0e 3318 	mls	r3, lr, r8, r3
 8000528:	0c11      	lsrs	r1, r2, #16
 800052a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052e:	fb08 f904 	mul.w	r9, r8, r4
 8000532:	40b0      	lsls	r0, r6
 8000534:	4589      	cmp	r9, r1
 8000536:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800053a:	b280      	uxth	r0, r0
 800053c:	d93e      	bls.n	80005bc <__udivmoddi4+0x2e8>
 800053e:	1879      	adds	r1, r7, r1
 8000540:	f108 3cff 	add.w	ip, r8, #4294967295
 8000544:	d201      	bcs.n	800054a <__udivmoddi4+0x276>
 8000546:	4589      	cmp	r9, r1
 8000548:	d81f      	bhi.n	800058a <__udivmoddi4+0x2b6>
 800054a:	eba1 0109 	sub.w	r1, r1, r9
 800054e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000552:	fb09 f804 	mul.w	r8, r9, r4
 8000556:	fb0e 1119 	mls	r1, lr, r9, r1
 800055a:	b292      	uxth	r2, r2
 800055c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000560:	4542      	cmp	r2, r8
 8000562:	d229      	bcs.n	80005b8 <__udivmoddi4+0x2e4>
 8000564:	18ba      	adds	r2, r7, r2
 8000566:	f109 31ff 	add.w	r1, r9, #4294967295
 800056a:	d2c4      	bcs.n	80004f6 <__udivmoddi4+0x222>
 800056c:	4542      	cmp	r2, r8
 800056e:	d2c2      	bcs.n	80004f6 <__udivmoddi4+0x222>
 8000570:	f1a9 0102 	sub.w	r1, r9, #2
 8000574:	443a      	add	r2, r7
 8000576:	e7be      	b.n	80004f6 <__udivmoddi4+0x222>
 8000578:	45f0      	cmp	r8, lr
 800057a:	d29d      	bcs.n	80004b8 <__udivmoddi4+0x1e4>
 800057c:	ebbe 0302 	subs.w	r3, lr, r2
 8000580:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000584:	3801      	subs	r0, #1
 8000586:	46e1      	mov	r9, ip
 8000588:	e796      	b.n	80004b8 <__udivmoddi4+0x1e4>
 800058a:	eba7 0909 	sub.w	r9, r7, r9
 800058e:	4449      	add	r1, r9
 8000590:	f1a8 0c02 	sub.w	ip, r8, #2
 8000594:	fbb1 f9fe 	udiv	r9, r1, lr
 8000598:	fb09 f804 	mul.w	r8, r9, r4
 800059c:	e7db      	b.n	8000556 <__udivmoddi4+0x282>
 800059e:	4673      	mov	r3, lr
 80005a0:	e77f      	b.n	80004a2 <__udivmoddi4+0x1ce>
 80005a2:	4650      	mov	r0, sl
 80005a4:	e766      	b.n	8000474 <__udivmoddi4+0x1a0>
 80005a6:	4608      	mov	r0, r1
 80005a8:	e6fd      	b.n	80003a6 <__udivmoddi4+0xd2>
 80005aa:	443b      	add	r3, r7
 80005ac:	3a02      	subs	r2, #2
 80005ae:	e733      	b.n	8000418 <__udivmoddi4+0x144>
 80005b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b4:	443b      	add	r3, r7
 80005b6:	e71c      	b.n	80003f2 <__udivmoddi4+0x11e>
 80005b8:	4649      	mov	r1, r9
 80005ba:	e79c      	b.n	80004f6 <__udivmoddi4+0x222>
 80005bc:	eba1 0109 	sub.w	r1, r1, r9
 80005c0:	46c4      	mov	ip, r8
 80005c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c6:	fb09 f804 	mul.w	r8, r9, r4
 80005ca:	e7c4      	b.n	8000556 <__udivmoddi4+0x282>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fb3a 	bl	8000c4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f845 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f000 f89f 	bl	8000720 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
	// Enable the DWT CYCCNT counter
  DWT_CTRL |= ( 1 <<0 ); // Set the CYCCNTENA bit in DWT_CTRL register to enable the cycle counter
 80005e2:	4b19      	ldr	r3, [pc, #100]	@ (8000648 <main+0x78>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a18      	ldr	r2, [pc, #96]	@ (8000648 <main+0x78>)
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf(); // Configure SEGGER SystemView
 80005ee:	f004 f9f3 	bl	80049d8 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start(); // Start recording
 80005f2:	f005 fa5f 	bl	8005ab4 <SEGGER_SYSVIEW_Start>
	// Create two tasks
  status = xTaskCreate(task1_handler, "Task1", 200, "Hello world from Task 1", 2, &task1_handle);
 80005f6:	f107 0308 	add.w	r3, r7, #8
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2302      	movs	r3, #2
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	4b12      	ldr	r3, [pc, #72]	@ (800064c <main+0x7c>)
 8000602:	22c8      	movs	r2, #200	@ 0xc8
 8000604:	4912      	ldr	r1, [pc, #72]	@ (8000650 <main+0x80>)
 8000606:	4813      	ldr	r0, [pc, #76]	@ (8000654 <main+0x84>)
 8000608:	f002 fc08 	bl	8002e1c <xTaskCreate>
 800060c:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS); // Ensure task creation was successful
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d003      	beq.n	800061c <main+0x4c>
 8000614:	4910      	ldr	r1, [pc, #64]	@ (8000658 <main+0x88>)
 8000616:	206b      	movs	r0, #107	@ 0x6b
 8000618:	f000 f9ba 	bl	8000990 <vAssertCalled>


  status = xTaskCreate(task2_handler, "Task2", 200, "Hello world from Task 2", 2, &task2_handle);
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	9301      	str	r3, [sp, #4]
 8000620:	2302      	movs	r3, #2
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	4b0d      	ldr	r3, [pc, #52]	@ (800065c <main+0x8c>)
 8000626:	22c8      	movs	r2, #200	@ 0xc8
 8000628:	490d      	ldr	r1, [pc, #52]	@ (8000660 <main+0x90>)
 800062a:	480e      	ldr	r0, [pc, #56]	@ (8000664 <main+0x94>)
 800062c:	f002 fbf6 	bl	8002e1c <xTaskCreate>
 8000630:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS); // Ensure task creation was successful
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	2b01      	cmp	r3, #1
 8000636:	d003      	beq.n	8000640 <main+0x70>
 8000638:	4907      	ldr	r1, [pc, #28]	@ (8000658 <main+0x88>)
 800063a:	206f      	movs	r0, #111	@ 0x6f
 800063c:	f000 f9a8 	bl	8000990 <vAssertCalled>
    
    // Start the
  //  printf("Starting the scheduler\n");
   vTaskStartScheduler();
 8000640:	f002 fd4c 	bl	80030dc <vTaskStartScheduler>
     
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000644:	bf00      	nop
 8000646:	e7fd      	b.n	8000644 <main+0x74>
 8000648:	e0001000 	.word	0xe0001000
 800064c:	08006f14 	.word	0x08006f14
 8000650:	08006f2c 	.word	0x08006f2c
 8000654:	08000971 	.word	0x08000971
 8000658:	08006f34 	.word	0x08006f34
 800065c:	08006f48 	.word	0x08006f48
 8000660:	08006f60 	.word	0x08006f60
 8000664:	08000981 	.word	0x08000981

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	@ 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2230      	movs	r2, #48	@ 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f006 f988 	bl	800698c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	4b22      	ldr	r3, [pc, #136]	@ (8000718 <SystemClock_Config+0xb0>)
 800068e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000690:	4a21      	ldr	r2, [pc, #132]	@ (8000718 <SystemClock_Config+0xb0>)
 8000692:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000696:	6413      	str	r3, [r2, #64]	@ 0x40
 8000698:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <SystemClock_Config+0xb0>)
 800069a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800069c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a0:	60bb      	str	r3, [r7, #8]
 80006a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a4:	4b1d      	ldr	r3, [pc, #116]	@ (800071c <SystemClock_Config+0xb4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006ac:	4a1b      	ldr	r2, [pc, #108]	@ (800071c <SystemClock_Config+0xb4>)
 80006ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b19      	ldr	r3, [pc, #100]	@ (800071c <SystemClock_Config+0xb4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c0:	2302      	movs	r3, #2
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c8:	2310      	movs	r3, #16
 80006ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fd7b 	bl	80011d0 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80006e0:	f000 f95d 	bl	800099e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	2100      	movs	r1, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f001 f809 	bl	8001718 <HAL_RCC_ClockConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 800070c:	f000 f947 	bl	800099e <Error_Handler>
  }
}
 8000710:	bf00      	nop
 8000712:	3750      	adds	r7, #80	@ 0x50
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40023800 	.word	0x40023800
 800071c:	40007000 	.word	0x40007000

08000720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08c      	sub	sp, #48	@ 0x30
 8000724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b88      	ldr	r3, [pc, #544]	@ (8000958 <MX_GPIO_Init+0x238>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a87      	ldr	r2, [pc, #540]	@ (8000958 <MX_GPIO_Init+0x238>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b85      	ldr	r3, [pc, #532]	@ (8000958 <MX_GPIO_Init+0x238>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	61bb      	str	r3, [r7, #24]
 800074c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	4b82      	ldr	r3, [pc, #520]	@ (8000958 <MX_GPIO_Init+0x238>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a81      	ldr	r2, [pc, #516]	@ (8000958 <MX_GPIO_Init+0x238>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b7f      	ldr	r3, [pc, #508]	@ (8000958 <MX_GPIO_Init+0x238>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b7c      	ldr	r3, [pc, #496]	@ (8000958 <MX_GPIO_Init+0x238>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	4a7b      	ldr	r2, [pc, #492]	@ (8000958 <MX_GPIO_Init+0x238>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	@ 0x30
 8000772:	4b79      	ldr	r3, [pc, #484]	@ (8000958 <MX_GPIO_Init+0x238>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b76      	ldr	r3, [pc, #472]	@ (8000958 <MX_GPIO_Init+0x238>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a75      	ldr	r2, [pc, #468]	@ (8000958 <MX_GPIO_Init+0x238>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b73      	ldr	r3, [pc, #460]	@ (8000958 <MX_GPIO_Init+0x238>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000796:	4b70      	ldr	r3, [pc, #448]	@ (8000958 <MX_GPIO_Init+0x238>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a6f      	ldr	r2, [pc, #444]	@ (8000958 <MX_GPIO_Init+0x238>)
 800079c:	f043 0308 	orr.w	r3, r3, #8
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b6d      	ldr	r3, [pc, #436]	@ (8000958 <MX_GPIO_Init+0x238>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ae:	4b6a      	ldr	r3, [pc, #424]	@ (8000958 <MX_GPIO_Init+0x238>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a69      	ldr	r2, [pc, #420]	@ (8000958 <MX_GPIO_Init+0x238>)
 80007b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b67      	ldr	r3, [pc, #412]	@ (8000958 <MX_GPIO_Init+0x238>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f244 0181 	movw	r1, #16513	@ 0x4081
 80007cc:	4863      	ldr	r0, [pc, #396]	@ (800095c <MX_GPIO_Init+0x23c>)
 80007ce:	f000 fce5 	bl	800119c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2140      	movs	r1, #64	@ 0x40
 80007d6:	4862      	ldr	r0, [pc, #392]	@ (8000960 <MX_GPIO_Init+0x240>)
 80007d8:	f000 fce0 	bl	800119c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 031c 	add.w	r3, r7, #28
 80007f0:	4619      	mov	r1, r3
 80007f2:	485c      	ldr	r0, [pc, #368]	@ (8000964 <MX_GPIO_Init+0x244>)
 80007f4:	f000 fb26 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007f8:	2332      	movs	r3, #50	@ 0x32
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000804:	2303      	movs	r3, #3
 8000806:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000808:	230b      	movs	r3, #11
 800080a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	4854      	ldr	r0, [pc, #336]	@ (8000964 <MX_GPIO_Init+0x244>)
 8000814:	f000 fb16 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000818:	2386      	movs	r3, #134	@ 0x86
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000828:	230b      	movs	r3, #11
 800082a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	484d      	ldr	r0, [pc, #308]	@ (8000968 <MX_GPIO_Init+0x248>)
 8000834:	f000 fb06 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000838:	f244 0381 	movw	r3, #16513	@ 0x4081
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4842      	ldr	r0, [pc, #264]	@ (800095c <MX_GPIO_Init+0x23c>)
 8000852:	f000 faf7 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000856:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000868:	230b      	movs	r3, #11
 800086a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	483a      	ldr	r0, [pc, #232]	@ (800095c <MX_GPIO_Init+0x23c>)
 8000874:	f000 fae6 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000878:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800088a:	2307      	movs	r3, #7
 800088c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	4619      	mov	r1, r3
 8000894:	4835      	ldr	r0, [pc, #212]	@ (800096c <MX_GPIO_Init+0x24c>)
 8000896:	f000 fad5 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800089a:	2340      	movs	r3, #64	@ 0x40
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	482b      	ldr	r0, [pc, #172]	@ (8000960 <MX_GPIO_Init+0x240>)
 80008b2:	f000 fac7 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008b6:	2380      	movs	r3, #128	@ 0x80
 80008b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4825      	ldr	r0, [pc, #148]	@ (8000960 <MX_GPIO_Init+0x240>)
 80008ca:	f000 fabb 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008ce:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008e0:	230a      	movs	r3, #10
 80008e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 031c 	add.w	r3, r7, #28
 80008e8:	4619      	mov	r1, r3
 80008ea:	481f      	ldr	r0, [pc, #124]	@ (8000968 <MX_GPIO_Init+0x248>)
 80008ec:	f000 faaa 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008fe:	f107 031c 	add.w	r3, r7, #28
 8000902:	4619      	mov	r1, r3
 8000904:	4818      	ldr	r0, [pc, #96]	@ (8000968 <MX_GPIO_Init+0x248>)
 8000906:	f000 fa9d 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800090a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000918:	2303      	movs	r3, #3
 800091a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800091c:	230b      	movs	r3, #11
 800091e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	480e      	ldr	r0, [pc, #56]	@ (8000960 <MX_GPIO_Init+0x240>)
 8000928:	f000 fa8c 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800092c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000930:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000932:	2312      	movs	r3, #18
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800093e:	2304      	movs	r3, #4
 8000940:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4804      	ldr	r0, [pc, #16]	@ (800095c <MX_GPIO_Init+0x23c>)
 800094a:	f000 fa7b 	bl	8000e44 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800094e:	bf00      	nop
 8000950:	3730      	adds	r7, #48	@ 0x30
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	40020400 	.word	0x40020400
 8000960:	40021800 	.word	0x40021800
 8000964:	40020800 	.word	0x40020800
 8000968:	40020000 	.word	0x40020000
 800096c:	40020c00 	.word	0x40020c00

08000970 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void *params)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]

    while(1)
    {
        // Print the parameter passed to the task
        printf("%s\n", (char *)params);
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f005 ff17 	bl	80067ac <puts>
 800097e:	e7fb      	b.n	8000978 <task1_handler+0x8>

08000980 <task2_handler>:
       // vTaskDelay(pdMS_TO_TICKS(1000)); // Delay for 1000 ms
      // taskYIELD(); // Yield to allow other tasks to run
    }
}
static void task2_handler(void *params)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
    while(1)
    {
        // Print the parameter passed to the task
        printf("%s\n", (char *)params);
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f005 ff0f 	bl	80067ac <puts>
 800098e:	e7fb      	b.n	8000988 <task2_handler+0x8>

08000990 <vAssertCalled>:
}
#endif /* USE_FULL_ASSERT */

// Implementation of vAssertCalled for FreeRTOS configASSERT
void vAssertCalled(uint32_t ulLine, const char *pcFile)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
 8000998:	6039      	str	r1, [r7, #0]
    // Optionally, place a breakpoint here or output the file/line info
    (void)ulLine;
    (void)pcFile;
    while(1)
 800099a:	bf00      	nop
 800099c:	e7fd      	b.n	800099a <vAssertCalled+0xa>

0800099e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a2:	b672      	cpsid	i
}
 80009a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a6:	bf00      	nop
 80009a8:	e7fd      	b.n	80009a6 <Error_Handler+0x8>
	...

080009ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80009b2:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <HAL_MspInit+0x44>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	4a0e      	ldr	r2, [pc, #56]	@ (80009f0 <HAL_MspInit+0x44>)
 80009b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009be:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <HAL_MspInit+0x44>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ca:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <HAL_MspInit+0x44>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ce:	4a08      	ldr	r2, [pc, #32]	@ (80009f0 <HAL_MspInit+0x44>)
 80009d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009d6:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <HAL_MspInit+0x44>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009de:	603b      	str	r3, [r7, #0]
 80009e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80009e2:	f003 fe01 	bl	80045e8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800

080009f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b08e      	sub	sp, #56	@ 0x38
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a04:	4b33      	ldr	r3, [pc, #204]	@ (8000ad4 <HAL_InitTick+0xe0>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a08:	4a32      	ldr	r2, [pc, #200]	@ (8000ad4 <HAL_InitTick+0xe0>)
 8000a0a:	f043 0310 	orr.w	r3, r3, #16
 8000a0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a10:	4b30      	ldr	r3, [pc, #192]	@ (8000ad4 <HAL_InitTick+0xe0>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a14:	f003 0310 	and.w	r3, r3, #16
 8000a18:	60fb      	str	r3, [r7, #12]
 8000a1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a1c:	f107 0210 	add.w	r2, r7, #16
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4611      	mov	r1, r2
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 f888 	bl	8001b3c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a2c:	6a3b      	ldr	r3, [r7, #32]
 8000a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d103      	bne.n	8000a3e <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a36:	f001 f86d 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
 8000a3a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a3c:	e004      	b.n	8000a48 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a3e:	f001 f869 	bl	8001b14 <HAL_RCC_GetPCLK1Freq>
 8000a42:	4603      	mov	r3, r0
 8000a44:	005b      	lsls	r3, r3, #1
 8000a46:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a4a:	4a23      	ldr	r2, [pc, #140]	@ (8000ad8 <HAL_InitTick+0xe4>)
 8000a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a50:	0c9b      	lsrs	r3, r3, #18
 8000a52:	3b01      	subs	r3, #1
 8000a54:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a56:	4b21      	ldr	r3, [pc, #132]	@ (8000adc <HAL_InitTick+0xe8>)
 8000a58:	4a21      	ldr	r2, [pc, #132]	@ (8000ae0 <HAL_InitTick+0xec>)
 8000a5a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a5c:	4b1f      	ldr	r3, [pc, #124]	@ (8000adc <HAL_InitTick+0xe8>)
 8000a5e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a62:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a64:	4a1d      	ldr	r2, [pc, #116]	@ (8000adc <HAL_InitTick+0xe8>)
 8000a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a68:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000adc <HAL_InitTick+0xe8>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a70:	4b1a      	ldr	r3, [pc, #104]	@ (8000adc <HAL_InitTick+0xe8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a76:	4b19      	ldr	r3, [pc, #100]	@ (8000adc <HAL_InitTick+0xe8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a7c:	4817      	ldr	r0, [pc, #92]	@ (8000adc <HAL_InitTick+0xe8>)
 8000a7e:	f001 f88f 	bl	8001ba0 <HAL_TIM_Base_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d11b      	bne.n	8000ac8 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a90:	4812      	ldr	r0, [pc, #72]	@ (8000adc <HAL_InitTick+0xe8>)
 8000a92:	f001 f8e7 	bl	8001c64 <HAL_TIM_Base_Start_IT>
 8000a96:	4603      	mov	r3, r0
 8000a98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d111      	bne.n	8000ac8 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000aa4:	2036      	movs	r0, #54	@ 0x36
 8000aa6:	f000 f9bf 	bl	8000e28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	d808      	bhi.n	8000ac2 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	2036      	movs	r0, #54	@ 0x36
 8000ab6:	f000 f99b 	bl	8000df0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000aba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <HAL_InitTick+0xf0>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	e002      	b.n	8000ac8 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ac8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	3738      	adds	r7, #56	@ 0x38
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800
 8000ad8:	431bde83 	.word	0x431bde83
 8000adc:	20000084 	.word	0x20000084
 8000ae0:	40001000 	.word	0x40001000
 8000ae4:	20000004 	.word	0x20000004

08000ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <NMI_Handler+0x4>

08000af0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <HardFault_Handler+0x4>

08000af8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <MemManage_Handler+0x4>

08000b00 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <BusFault_Handler+0x4>

08000b08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <UsageFault_Handler+0x4>

08000b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
	...

08000b20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b24:	4802      	ldr	r0, [pc, #8]	@ (8000b30 <TIM6_DAC_IRQHandler+0x10>)
 8000b26:	f001 f915 	bl	8001d54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000084 	.word	0x20000084

08000b34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	60f8      	str	r0, [r7, #12]
 8000b3c:	60b9      	str	r1, [r7, #8]
 8000b3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
 8000b44:	e00a      	b.n	8000b5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b46:	f3af 8000 	nop.w
 8000b4a:	4601      	mov	r1, r0
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	1c5a      	adds	r2, r3, #1
 8000b50:	60ba      	str	r2, [r7, #8]
 8000b52:	b2ca      	uxtb	r2, r1
 8000b54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dbf0      	blt.n	8000b46 <_read+0x12>
  }

  return len;
 8000b64:	687b      	ldr	r3, [r7, #4]
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b96:	605a      	str	r2, [r3, #4]
  return 0;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr

08000ba6 <_isatty>:

int _isatty(int file)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	b083      	sub	sp, #12
 8000baa:	af00      	add	r7, sp, #0
 8000bac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bae:	2301      	movs	r3, #1
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bba:	4770      	bx	lr

08000bbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <SystemInit+0x20>)
 8000bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000be2:	4a05      	ldr	r2, [pc, #20]	@ (8000bf8 <SystemInit+0x20>)
 8000be4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000ed00 	.word	0xe000ed00

08000bfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bfc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c00:	f7ff ffea 	bl	8000bd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c04:	480c      	ldr	r0, [pc, #48]	@ (8000c38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c06:	490d      	ldr	r1, [pc, #52]	@ (8000c3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c08:	4a0d      	ldr	r2, [pc, #52]	@ (8000c40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c0c:	e002      	b.n	8000c14 <LoopCopyDataInit>

08000c0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c12:	3304      	adds	r3, #4

08000c14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c18:	d3f9      	bcc.n	8000c0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000c48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c20:	e001      	b.n	8000c26 <LoopFillZerobss>

08000c22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c24:	3204      	adds	r2, #4

08000c26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c28:	d3fb      	bcc.n	8000c22 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c2a:	f005 feeb 	bl	8006a04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c2e:	f7ff fccf 	bl	80005d0 <main>
  bx  lr    
 8000c32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c34:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c3c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c40:	08007168 	.word	0x08007168
  ldr r2, =_sbss
 8000c44:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c48:	2000d244 	.word	0x2000d244

08000c4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c4c:	e7fe      	b.n	8000c4c <ADC_IRQHandler>

08000c4e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c4e:	b580      	push	{r7, lr}
 8000c50:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c52:	2003      	movs	r0, #3
 8000c54:	f000 f8c1 	bl	8000dda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c58:	200f      	movs	r0, #15
 8000c5a:	f7ff fecb 	bl	80009f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c5e:	f7ff fea5 	bl	80009ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c6c:	4b03      	ldr	r3, [pc, #12]	@ (8000c7c <HAL_GetTick+0x14>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	200000d0 	.word	0x200000d0

08000c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c90:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ca8:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	4313      	orrs	r3, r2
 8000cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cae:	4a04      	ldr	r2, [pc, #16]	@ (8000cc0 <__NVIC_SetPriorityGrouping+0x40>)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	60d3      	str	r3, [r2, #12]
}
 8000cb4:	bf00      	nop
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	e000ed00 	.word	0xe000ed00
 8000cc4:	05fa0000 	.word	0x05fa0000

08000cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ccc:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	f003 0307 	and.w	r3, r3, #7
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	db0b      	blt.n	8000d0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	f003 021f 	and.w	r2, r3, #31
 8000cfc:	4907      	ldr	r1, [pc, #28]	@ (8000d1c <__NVIC_EnableIRQ+0x38>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	095b      	lsrs	r3, r3, #5
 8000d04:	2001      	movs	r0, #1
 8000d06:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e100 	.word	0xe000e100

08000d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db0a      	blt.n	8000d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	490c      	ldr	r1, [pc, #48]	@ (8000d6c <__NVIC_SetPriority+0x4c>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	0112      	lsls	r2, r2, #4
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	440b      	add	r3, r1
 8000d44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d48:	e00a      	b.n	8000d60 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4908      	ldr	r1, [pc, #32]	@ (8000d70 <__NVIC_SetPriority+0x50>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	3b04      	subs	r3, #4
 8000d58:	0112      	lsls	r2, r2, #4
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	761a      	strb	r2, [r3, #24]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000e100 	.word	0xe000e100
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	@ 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f1c3 0307 	rsb	r3, r3, #7
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	bf28      	it	cs
 8000d92:	2304      	movcs	r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	2b06      	cmp	r3, #6
 8000d9c:	d902      	bls.n	8000da4 <NVIC_EncodePriority+0x30>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3b03      	subs	r3, #3
 8000da2:	e000      	b.n	8000da6 <NVIC_EncodePriority+0x32>
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43da      	mvns	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	401a      	ands	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	43d9      	mvns	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	4313      	orrs	r3, r2
         );
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3724      	adds	r7, #36	@ 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ff4c 	bl	8000c80 <__NVIC_SetPriorityGrouping>
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e02:	f7ff ff61 	bl	8000cc8 <__NVIC_GetPriorityGrouping>
 8000e06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	68b9      	ldr	r1, [r7, #8]
 8000e0c:	6978      	ldr	r0, [r7, #20]
 8000e0e:	f7ff ffb1 	bl	8000d74 <NVIC_EncodePriority>
 8000e12:	4602      	mov	r2, r0
 8000e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff ff80 	bl	8000d20 <__NVIC_SetPriority>
}
 8000e20:	bf00      	nop
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff ff54 	bl	8000ce4 <__NVIC_EnableIRQ>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	@ 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e56:	2300      	movs	r3, #0
 8000e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
 8000e62:	e175      	b.n	8001150 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e64:	2201      	movs	r2, #1
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	4013      	ands	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	f040 8164 	bne.w	800114a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d005      	beq.n	8000e9a <HAL_GPIO_Init+0x56>
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f003 0303 	and.w	r3, r3, #3
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d130      	bne.n	8000efc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	68da      	ldr	r2, [r3, #12]
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	69ba      	ldr	r2, [r7, #24]
 8000edc:	4013      	ands	r3, r2
 8000ede:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	091b      	lsrs	r3, r3, #4
 8000ee6:	f003 0201 	and.w	r2, r3, #1
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b03      	cmp	r3, #3
 8000f06:	d017      	beq.n	8000f38 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	005b      	lsls	r3, r3, #1
 8000f12:	2203      	movs	r2, #3
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	69ba      	ldr	r2, [r7, #24]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	689a      	ldr	r2, [r3, #8]
 8000f24:	69fb      	ldr	r3, [r7, #28]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d123      	bne.n	8000f8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	08da      	lsrs	r2, r3, #3
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3208      	adds	r2, #8
 8000f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	f003 0307 	and.w	r3, r3, #7
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	220f      	movs	r2, #15
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	691a      	ldr	r2, [r3, #16]
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	08da      	lsrs	r2, r3, #3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	3208      	adds	r2, #8
 8000f86:	69b9      	ldr	r1, [r7, #24]
 8000f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f003 0203 	and.w	r2, r3, #3
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 80be 	beq.w	800114a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	4b66      	ldr	r3, [pc, #408]	@ (8001168 <HAL_GPIO_Init+0x324>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd2:	4a65      	ldr	r2, [pc, #404]	@ (8001168 <HAL_GPIO_Init+0x324>)
 8000fd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fda:	4b63      	ldr	r3, [pc, #396]	@ (8001168 <HAL_GPIO_Init+0x324>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fe6:	4a61      	ldr	r2, [pc, #388]	@ (800116c <HAL_GPIO_Init+0x328>)
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	089b      	lsrs	r3, r3, #2
 8000fec:	3302      	adds	r3, #2
 8000fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a58      	ldr	r2, [pc, #352]	@ (8001170 <HAL_GPIO_Init+0x32c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d037      	beq.n	8001082 <HAL_GPIO_Init+0x23e>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a57      	ldr	r2, [pc, #348]	@ (8001174 <HAL_GPIO_Init+0x330>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d031      	beq.n	800107e <HAL_GPIO_Init+0x23a>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a56      	ldr	r2, [pc, #344]	@ (8001178 <HAL_GPIO_Init+0x334>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d02b      	beq.n	800107a <HAL_GPIO_Init+0x236>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a55      	ldr	r2, [pc, #340]	@ (800117c <HAL_GPIO_Init+0x338>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d025      	beq.n	8001076 <HAL_GPIO_Init+0x232>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a54      	ldr	r2, [pc, #336]	@ (8001180 <HAL_GPIO_Init+0x33c>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d01f      	beq.n	8001072 <HAL_GPIO_Init+0x22e>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a53      	ldr	r2, [pc, #332]	@ (8001184 <HAL_GPIO_Init+0x340>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d019      	beq.n	800106e <HAL_GPIO_Init+0x22a>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a52      	ldr	r2, [pc, #328]	@ (8001188 <HAL_GPIO_Init+0x344>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d013      	beq.n	800106a <HAL_GPIO_Init+0x226>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a51      	ldr	r2, [pc, #324]	@ (800118c <HAL_GPIO_Init+0x348>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d00d      	beq.n	8001066 <HAL_GPIO_Init+0x222>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a50      	ldr	r2, [pc, #320]	@ (8001190 <HAL_GPIO_Init+0x34c>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d007      	beq.n	8001062 <HAL_GPIO_Init+0x21e>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a4f      	ldr	r2, [pc, #316]	@ (8001194 <HAL_GPIO_Init+0x350>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d101      	bne.n	800105e <HAL_GPIO_Init+0x21a>
 800105a:	2309      	movs	r3, #9
 800105c:	e012      	b.n	8001084 <HAL_GPIO_Init+0x240>
 800105e:	230a      	movs	r3, #10
 8001060:	e010      	b.n	8001084 <HAL_GPIO_Init+0x240>
 8001062:	2308      	movs	r3, #8
 8001064:	e00e      	b.n	8001084 <HAL_GPIO_Init+0x240>
 8001066:	2307      	movs	r3, #7
 8001068:	e00c      	b.n	8001084 <HAL_GPIO_Init+0x240>
 800106a:	2306      	movs	r3, #6
 800106c:	e00a      	b.n	8001084 <HAL_GPIO_Init+0x240>
 800106e:	2305      	movs	r3, #5
 8001070:	e008      	b.n	8001084 <HAL_GPIO_Init+0x240>
 8001072:	2304      	movs	r3, #4
 8001074:	e006      	b.n	8001084 <HAL_GPIO_Init+0x240>
 8001076:	2303      	movs	r3, #3
 8001078:	e004      	b.n	8001084 <HAL_GPIO_Init+0x240>
 800107a:	2302      	movs	r3, #2
 800107c:	e002      	b.n	8001084 <HAL_GPIO_Init+0x240>
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <HAL_GPIO_Init+0x240>
 8001082:	2300      	movs	r3, #0
 8001084:	69fa      	ldr	r2, [r7, #28]
 8001086:	f002 0203 	and.w	r2, r2, #3
 800108a:	0092      	lsls	r2, r2, #2
 800108c:	4093      	lsls	r3, r2
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001094:	4935      	ldr	r1, [pc, #212]	@ (800116c <HAL_GPIO_Init+0x328>)
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	089b      	lsrs	r3, r3, #2
 800109a:	3302      	adds	r3, #2
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001198 <HAL_GPIO_Init+0x354>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010c6:	4a34      	ldr	r2, [pc, #208]	@ (8001198 <HAL_GPIO_Init+0x354>)
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010cc:	4b32      	ldr	r3, [pc, #200]	@ (8001198 <HAL_GPIO_Init+0x354>)
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010f0:	4a29      	ldr	r2, [pc, #164]	@ (8001198 <HAL_GPIO_Init+0x354>)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010f6:	4b28      	ldr	r3, [pc, #160]	@ (8001198 <HAL_GPIO_Init+0x354>)
 80010f8:	685b      	ldr	r3, [r3, #4]
 80010fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	43db      	mvns	r3, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4013      	ands	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110e:	2b00      	cmp	r3, #0
 8001110:	d003      	beq.n	800111a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001112:	69ba      	ldr	r2, [r7, #24]
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800111a:	4a1f      	ldr	r2, [pc, #124]	@ (8001198 <HAL_GPIO_Init+0x354>)
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001120:	4b1d      	ldr	r3, [pc, #116]	@ (8001198 <HAL_GPIO_Init+0x354>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	43db      	mvns	r3, r3
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4013      	ands	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001138:	2b00      	cmp	r3, #0
 800113a:	d003      	beq.n	8001144 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	4313      	orrs	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001144:	4a14      	ldr	r2, [pc, #80]	@ (8001198 <HAL_GPIO_Init+0x354>)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3301      	adds	r3, #1
 800114e:	61fb      	str	r3, [r7, #28]
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	2b0f      	cmp	r3, #15
 8001154:	f67f ae86 	bls.w	8000e64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001158:	bf00      	nop
 800115a:	bf00      	nop
 800115c:	3724      	adds	r7, #36	@ 0x24
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800
 800116c:	40013800 	.word	0x40013800
 8001170:	40020000 	.word	0x40020000
 8001174:	40020400 	.word	0x40020400
 8001178:	40020800 	.word	0x40020800
 800117c:	40020c00 	.word	0x40020c00
 8001180:	40021000 	.word	0x40021000
 8001184:	40021400 	.word	0x40021400
 8001188:	40021800 	.word	0x40021800
 800118c:	40021c00 	.word	0x40021c00
 8001190:	40022000 	.word	0x40022000
 8001194:	40022400 	.word	0x40022400
 8001198:	40013c00 	.word	0x40013c00

0800119c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	807b      	strh	r3, [r7, #2]
 80011a8:	4613      	mov	r3, r2
 80011aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011ac:	787b      	ldrb	r3, [r7, #1]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b2:	887a      	ldrh	r2, [r7, #2]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80011b8:	e003      	b.n	80011c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	041a      	lsls	r2, r3, #16
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	619a      	str	r2, [r3, #24]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
	...

080011d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d101      	bne.n	80011e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e291      	b.n	800170a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 8087 	beq.w	8001302 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011f4:	4b96      	ldr	r3, [pc, #600]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	f003 030c 	and.w	r3, r3, #12
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d00c      	beq.n	800121a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001200:	4b93      	ldr	r3, [pc, #588]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	f003 030c 	and.w	r3, r3, #12
 8001208:	2b08      	cmp	r3, #8
 800120a:	d112      	bne.n	8001232 <HAL_RCC_OscConfig+0x62>
 800120c:	4b90      	ldr	r3, [pc, #576]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001214:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001218:	d10b      	bne.n	8001232 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800121a:	4b8d      	ldr	r3, [pc, #564]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d06c      	beq.n	8001300 <HAL_RCC_OscConfig+0x130>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d168      	bne.n	8001300 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e26b      	b.n	800170a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800123a:	d106      	bne.n	800124a <HAL_RCC_OscConfig+0x7a>
 800123c:	4b84      	ldr	r3, [pc, #528]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a83      	ldr	r2, [pc, #524]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 8001242:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001246:	6013      	str	r3, [r2, #0]
 8001248:	e02e      	b.n	80012a8 <HAL_RCC_OscConfig+0xd8>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10c      	bne.n	800126c <HAL_RCC_OscConfig+0x9c>
 8001252:	4b7f      	ldr	r3, [pc, #508]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a7e      	ldr	r2, [pc, #504]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 8001258:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	4b7c      	ldr	r3, [pc, #496]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a7b      	ldr	r2, [pc, #492]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 8001264:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	e01d      	b.n	80012a8 <HAL_RCC_OscConfig+0xd8>
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001274:	d10c      	bne.n	8001290 <HAL_RCC_OscConfig+0xc0>
 8001276:	4b76      	ldr	r3, [pc, #472]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a75      	ldr	r2, [pc, #468]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 800127c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001280:	6013      	str	r3, [r2, #0]
 8001282:	4b73      	ldr	r3, [pc, #460]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a72      	ldr	r2, [pc, #456]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 8001288:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	e00b      	b.n	80012a8 <HAL_RCC_OscConfig+0xd8>
 8001290:	4b6f      	ldr	r3, [pc, #444]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a6e      	ldr	r2, [pc, #440]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 8001296:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800129a:	6013      	str	r3, [r2, #0]
 800129c:	4b6c      	ldr	r3, [pc, #432]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a6b      	ldr	r2, [pc, #428]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 80012a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d013      	beq.n	80012d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b0:	f7ff fcda 	bl	8000c68 <HAL_GetTick>
 80012b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b6:	e008      	b.n	80012ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b8:	f7ff fcd6 	bl	8000c68 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	2b64      	cmp	r3, #100	@ 0x64
 80012c4:	d901      	bls.n	80012ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012c6:	2303      	movs	r3, #3
 80012c8:	e21f      	b.n	800170a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ca:	4b61      	ldr	r3, [pc, #388]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0f0      	beq.n	80012b8 <HAL_RCC_OscConfig+0xe8>
 80012d6:	e014      	b.n	8001302 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d8:	f7ff fcc6 	bl	8000c68 <HAL_GetTick>
 80012dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012de:	e008      	b.n	80012f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e0:	f7ff fcc2 	bl	8000c68 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	2b64      	cmp	r3, #100	@ 0x64
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e20b      	b.n	800170a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f2:	4b57      	ldr	r3, [pc, #348]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f0      	bne.n	80012e0 <HAL_RCC_OscConfig+0x110>
 80012fe:	e000      	b.n	8001302 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001300:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d069      	beq.n	80013e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800130e:	4b50      	ldr	r3, [pc, #320]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	2b00      	cmp	r3, #0
 8001318:	d00b      	beq.n	8001332 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800131a:	4b4d      	ldr	r3, [pc, #308]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	2b08      	cmp	r3, #8
 8001324:	d11c      	bne.n	8001360 <HAL_RCC_OscConfig+0x190>
 8001326:	4b4a      	ldr	r3, [pc, #296]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d116      	bne.n	8001360 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001332:	4b47      	ldr	r3, [pc, #284]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d005      	beq.n	800134a <HAL_RCC_OscConfig+0x17a>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d001      	beq.n	800134a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e1df      	b.n	800170a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134a:	4b41      	ldr	r3, [pc, #260]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	493d      	ldr	r1, [pc, #244]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 800135a:	4313      	orrs	r3, r2
 800135c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135e:	e040      	b.n	80013e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d023      	beq.n	80013b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001368:	4b39      	ldr	r3, [pc, #228]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a38      	ldr	r2, [pc, #224]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001374:	f7ff fc78 	bl	8000c68 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800137c:	f7ff fc74 	bl	8000c68 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b02      	cmp	r3, #2
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e1bd      	b.n	800170a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138e:	4b30      	ldr	r3, [pc, #192]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800139a:	4b2d      	ldr	r3, [pc, #180]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	691b      	ldr	r3, [r3, #16]
 80013a6:	00db      	lsls	r3, r3, #3
 80013a8:	4929      	ldr	r1, [pc, #164]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	600b      	str	r3, [r1, #0]
 80013ae:	e018      	b.n	80013e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013b0:	4b27      	ldr	r3, [pc, #156]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a26      	ldr	r2, [pc, #152]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 80013b6:	f023 0301 	bic.w	r3, r3, #1
 80013ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013bc:	f7ff fc54 	bl	8000c68 <HAL_GetTick>
 80013c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013c2:	e008      	b.n	80013d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c4:	f7ff fc50 	bl	8000c68 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d901      	bls.n	80013d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80013d2:	2303      	movs	r3, #3
 80013d4:	e199      	b.n	800170a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0302 	and.w	r3, r3, #2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f0      	bne.n	80013c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0308 	and.w	r3, r3, #8
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d038      	beq.n	8001460 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d019      	beq.n	800142a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f6:	4b16      	ldr	r3, [pc, #88]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 80013f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80013fa:	4a15      	ldr	r2, [pc, #84]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001402:	f7ff fc31 	bl	8000c68 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800140a:	f7ff fc2d 	bl	8000c68 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e176      	b.n	800170a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 800141e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x23a>
 8001428:	e01a      	b.n	8001460 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800142a:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 800142c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800142e:	4a08      	ldr	r2, [pc, #32]	@ (8001450 <HAL_RCC_OscConfig+0x280>)
 8001430:	f023 0301 	bic.w	r3, r3, #1
 8001434:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001436:	f7ff fc17 	bl	8000c68 <HAL_GetTick>
 800143a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800143c:	e00a      	b.n	8001454 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800143e:	f7ff fc13 	bl	8000c68 <HAL_GetTick>
 8001442:	4602      	mov	r2, r0
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d903      	bls.n	8001454 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800144c:	2303      	movs	r3, #3
 800144e:	e15c      	b.n	800170a <HAL_RCC_OscConfig+0x53a>
 8001450:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001454:	4b91      	ldr	r3, [pc, #580]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 8001456:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1ee      	bne.n	800143e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80a4 	beq.w	80015b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800146e:	4b8b      	ldr	r3, [pc, #556]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001472:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10d      	bne.n	8001496 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	4b88      	ldr	r3, [pc, #544]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 800147c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147e:	4a87      	ldr	r2, [pc, #540]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 8001480:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001484:	6413      	str	r3, [r2, #64]	@ 0x40
 8001486:	4b85      	ldr	r3, [pc, #532]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800148e:	60bb      	str	r3, [r7, #8]
 8001490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001492:	2301      	movs	r3, #1
 8001494:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001496:	4b82      	ldr	r3, [pc, #520]	@ (80016a0 <HAL_RCC_OscConfig+0x4d0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d118      	bne.n	80014d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80014a2:	4b7f      	ldr	r3, [pc, #508]	@ (80016a0 <HAL_RCC_OscConfig+0x4d0>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a7e      	ldr	r2, [pc, #504]	@ (80016a0 <HAL_RCC_OscConfig+0x4d0>)
 80014a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fbdb 	bl	8000c68 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014b6:	f7ff fbd7 	bl	8000c68 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b64      	cmp	r3, #100	@ 0x64
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e120      	b.n	800170a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c8:	4b75      	ldr	r3, [pc, #468]	@ (80016a0 <HAL_RCC_OscConfig+0x4d0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d106      	bne.n	80014ea <HAL_RCC_OscConfig+0x31a>
 80014dc:	4b6f      	ldr	r3, [pc, #444]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 80014de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014e0:	4a6e      	ldr	r2, [pc, #440]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80014e8:	e02d      	b.n	8001546 <HAL_RCC_OscConfig+0x376>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d10c      	bne.n	800150c <HAL_RCC_OscConfig+0x33c>
 80014f2:	4b6a      	ldr	r3, [pc, #424]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 80014f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014f6:	4a69      	ldr	r2, [pc, #420]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 80014f8:	f023 0301 	bic.w	r3, r3, #1
 80014fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80014fe:	4b67      	ldr	r3, [pc, #412]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 8001500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001502:	4a66      	ldr	r2, [pc, #408]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 8001504:	f023 0304 	bic.w	r3, r3, #4
 8001508:	6713      	str	r3, [r2, #112]	@ 0x70
 800150a:	e01c      	b.n	8001546 <HAL_RCC_OscConfig+0x376>
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2b05      	cmp	r3, #5
 8001512:	d10c      	bne.n	800152e <HAL_RCC_OscConfig+0x35e>
 8001514:	4b61      	ldr	r3, [pc, #388]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 8001516:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001518:	4a60      	ldr	r2, [pc, #384]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 800151a:	f043 0304 	orr.w	r3, r3, #4
 800151e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001520:	4b5e      	ldr	r3, [pc, #376]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 8001522:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001524:	4a5d      	ldr	r2, [pc, #372]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6713      	str	r3, [r2, #112]	@ 0x70
 800152c:	e00b      	b.n	8001546 <HAL_RCC_OscConfig+0x376>
 800152e:	4b5b      	ldr	r3, [pc, #364]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 8001530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001532:	4a5a      	ldr	r2, [pc, #360]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 8001534:	f023 0301 	bic.w	r3, r3, #1
 8001538:	6713      	str	r3, [r2, #112]	@ 0x70
 800153a:	4b58      	ldr	r3, [pc, #352]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 800153c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800153e:	4a57      	ldr	r2, [pc, #348]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 8001540:	f023 0304 	bic.w	r3, r3, #4
 8001544:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d015      	beq.n	800157a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154e:	f7ff fb8b 	bl	8000c68 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001554:	e00a      	b.n	800156c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001556:	f7ff fb87 	bl	8000c68 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001564:	4293      	cmp	r3, r2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e0ce      	b.n	800170a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800156c:	4b4b      	ldr	r3, [pc, #300]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 800156e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d0ee      	beq.n	8001556 <HAL_RCC_OscConfig+0x386>
 8001578:	e014      	b.n	80015a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157a:	f7ff fb75 	bl	8000c68 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001580:	e00a      	b.n	8001598 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001582:	f7ff fb71 	bl	8000c68 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001590:	4293      	cmp	r3, r2
 8001592:	d901      	bls.n	8001598 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e0b8      	b.n	800170a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001598:	4b40      	ldr	r3, [pc, #256]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 800159a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d1ee      	bne.n	8001582 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015a4:	7dfb      	ldrb	r3, [r7, #23]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d105      	bne.n	80015b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015aa:	4b3c      	ldr	r3, [pc, #240]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	4a3b      	ldr	r2, [pc, #236]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 80015b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015b4:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	699b      	ldr	r3, [r3, #24]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 80a4 	beq.w	8001708 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015c0:	4b36      	ldr	r3, [pc, #216]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 030c 	and.w	r3, r3, #12
 80015c8:	2b08      	cmp	r3, #8
 80015ca:	d06b      	beq.n	80016a4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d149      	bne.n	8001668 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d4:	4b31      	ldr	r3, [pc, #196]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a30      	ldr	r2, [pc, #192]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 80015da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80015de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e0:	f7ff fb42 	bl	8000c68 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e8:	f7ff fb3e 	bl	8000c68 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e087      	b.n	800170a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fa:	4b28      	ldr	r3, [pc, #160]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69da      	ldr	r2, [r3, #28]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	431a      	orrs	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001614:	019b      	lsls	r3, r3, #6
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161c:	085b      	lsrs	r3, r3, #1
 800161e:	3b01      	subs	r3, #1
 8001620:	041b      	lsls	r3, r3, #16
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001628:	061b      	lsls	r3, r3, #24
 800162a:	4313      	orrs	r3, r2
 800162c:	4a1b      	ldr	r2, [pc, #108]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 800162e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001632:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001634:	4b19      	ldr	r3, [pc, #100]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a18      	ldr	r2, [pc, #96]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 800163a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800163e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001640:	f7ff fb12 	bl	8000c68 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff fb0e 	bl	8000c68 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e057      	b.n	800170a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165a:	4b10      	ldr	r3, [pc, #64]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x478>
 8001666:	e04f      	b.n	8001708 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001668:	4b0c      	ldr	r3, [pc, #48]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0b      	ldr	r2, [pc, #44]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 800166e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff faf8 	bl	8000c68 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff faf4 	bl	8000c68 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e03d      	b.n	800170a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	4b03      	ldr	r3, [pc, #12]	@ (800169c <HAL_RCC_OscConfig+0x4cc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x4ac>
 800169a:	e035      	b.n	8001708 <HAL_RCC_OscConfig+0x538>
 800169c:	40023800 	.word	0x40023800
 80016a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80016a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001714 <HAL_RCC_OscConfig+0x544>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d028      	beq.n	8001704 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016bc:	429a      	cmp	r2, r3
 80016be:	d121      	bne.n	8001704 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d11a      	bne.n	8001704 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016d4:	4013      	ands	r3, r2
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016dc:	4293      	cmp	r3, r2
 80016de:	d111      	bne.n	8001704 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ea:	085b      	lsrs	r3, r3, #1
 80016ec:	3b01      	subs	r3, #1
 80016ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d107      	bne.n	8001704 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3718      	adds	r7, #24
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800

08001718 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d101      	bne.n	8001730 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800172c:	2301      	movs	r3, #1
 800172e:	e0d0      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001730:	4b6a      	ldr	r3, [pc, #424]	@ (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 030f 	and.w	r3, r3, #15
 8001738:	683a      	ldr	r2, [r7, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d910      	bls.n	8001760 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800173e:	4b67      	ldr	r3, [pc, #412]	@ (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 020f 	bic.w	r2, r3, #15
 8001746:	4965      	ldr	r1, [pc, #404]	@ (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	4313      	orrs	r3, r2
 800174c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800174e:	4b63      	ldr	r3, [pc, #396]	@ (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e0b8      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d020      	beq.n	80017ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d005      	beq.n	8001784 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001778:	4b59      	ldr	r3, [pc, #356]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	4a58      	ldr	r2, [pc, #352]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 800177e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001782:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f003 0308 	and.w	r3, r3, #8
 800178c:	2b00      	cmp	r3, #0
 800178e:	d005      	beq.n	800179c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001790:	4b53      	ldr	r3, [pc, #332]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4a52      	ldr	r2, [pc, #328]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 8001796:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800179a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800179c:	4b50      	ldr	r3, [pc, #320]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	494d      	ldr	r1, [pc, #308]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d040      	beq.n	800183c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b01      	cmp	r3, #1
 80017c0:	d107      	bne.n	80017d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	4b47      	ldr	r3, [pc, #284]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d115      	bne.n	80017fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e07f      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017da:	4b41      	ldr	r3, [pc, #260]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d109      	bne.n	80017fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e073      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ea:	4b3d      	ldr	r3, [pc, #244]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0302 	and.w	r3, r3, #2
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d101      	bne.n	80017fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e06b      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017fa:	4b39      	ldr	r3, [pc, #228]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f023 0203 	bic.w	r2, r3, #3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	4936      	ldr	r1, [pc, #216]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 8001808:	4313      	orrs	r3, r2
 800180a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800180c:	f7ff fa2c 	bl	8000c68 <HAL_GetTick>
 8001810:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001812:	e00a      	b.n	800182a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001814:	f7ff fa28 	bl	8000c68 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001822:	4293      	cmp	r3, r2
 8001824:	d901      	bls.n	800182a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e053      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182a:	4b2d      	ldr	r3, [pc, #180]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 020c 	and.w	r2, r3, #12
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	429a      	cmp	r2, r3
 800183a:	d1eb      	bne.n	8001814 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800183c:	4b27      	ldr	r3, [pc, #156]	@ (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 030f 	and.w	r3, r3, #15
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d210      	bcs.n	800186c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	4b24      	ldr	r3, [pc, #144]	@ (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 020f 	bic.w	r2, r3, #15
 8001852:	4922      	ldr	r1, [pc, #136]	@ (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	4313      	orrs	r3, r2
 8001858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	4b20      	ldr	r3, [pc, #128]	@ (80018dc <HAL_RCC_ClockConfig+0x1c4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e032      	b.n	80018d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0304 	and.w	r3, r3, #4
 8001874:	2b00      	cmp	r3, #0
 8001876:	d008      	beq.n	800188a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001878:	4b19      	ldr	r3, [pc, #100]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	4916      	ldr	r1, [pc, #88]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 8001886:	4313      	orrs	r3, r2
 8001888:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0308 	and.w	r3, r3, #8
 8001892:	2b00      	cmp	r3, #0
 8001894:	d009      	beq.n	80018aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001896:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	490e      	ldr	r1, [pc, #56]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018aa:	f000 f821 	bl	80018f0 <HAL_RCC_GetSysClockFreq>
 80018ae:	4602      	mov	r2, r0
 80018b0:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <HAL_RCC_ClockConfig+0x1c8>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	091b      	lsrs	r3, r3, #4
 80018b6:	f003 030f 	and.w	r3, r3, #15
 80018ba:	490a      	ldr	r1, [pc, #40]	@ (80018e4 <HAL_RCC_ClockConfig+0x1cc>)
 80018bc:	5ccb      	ldrb	r3, [r1, r3]
 80018be:	fa22 f303 	lsr.w	r3, r2, r3
 80018c2:	4a09      	ldr	r2, [pc, #36]	@ (80018e8 <HAL_RCC_ClockConfig+0x1d0>)
 80018c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018c6:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <HAL_RCC_ClockConfig+0x1d4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f7ff f892 	bl	80009f4 <HAL_InitTick>

  return HAL_OK;
 80018d0:	2300      	movs	r3, #0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40023c00 	.word	0x40023c00
 80018e0:	40023800 	.word	0x40023800
 80018e4:	08007128 	.word	0x08007128
 80018e8:	20000000 	.word	0x20000000
 80018ec:	20000004 	.word	0x20000004

080018f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f4:	b094      	sub	sp, #80	@ 0x50
 80018f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80018fc:	2300      	movs	r3, #0
 80018fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001900:	2300      	movs	r3, #0
 8001902:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001908:	4b79      	ldr	r3, [pc, #484]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x200>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b08      	cmp	r3, #8
 8001912:	d00d      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x40>
 8001914:	2b08      	cmp	r3, #8
 8001916:	f200 80e1 	bhi.w	8001adc <HAL_RCC_GetSysClockFreq+0x1ec>
 800191a:	2b00      	cmp	r3, #0
 800191c:	d002      	beq.n	8001924 <HAL_RCC_GetSysClockFreq+0x34>
 800191e:	2b04      	cmp	r3, #4
 8001920:	d003      	beq.n	800192a <HAL_RCC_GetSysClockFreq+0x3a>
 8001922:	e0db      	b.n	8001adc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001924:	4b73      	ldr	r3, [pc, #460]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001926:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001928:	e0db      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800192a:	4b73      	ldr	r3, [pc, #460]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x208>)
 800192c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800192e:	e0d8      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001930:	4b6f      	ldr	r3, [pc, #444]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001938:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800193a:	4b6d      	ldr	r3, [pc, #436]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x200>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d063      	beq.n	8001a0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001946:	4b6a      	ldr	r3, [pc, #424]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	099b      	lsrs	r3, r3, #6
 800194c:	2200      	movs	r2, #0
 800194e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001950:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001954:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001958:	633b      	str	r3, [r7, #48]	@ 0x30
 800195a:	2300      	movs	r3, #0
 800195c:	637b      	str	r3, [r7, #52]	@ 0x34
 800195e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001962:	4622      	mov	r2, r4
 8001964:	462b      	mov	r3, r5
 8001966:	f04f 0000 	mov.w	r0, #0
 800196a:	f04f 0100 	mov.w	r1, #0
 800196e:	0159      	lsls	r1, r3, #5
 8001970:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001974:	0150      	lsls	r0, r2, #5
 8001976:	4602      	mov	r2, r0
 8001978:	460b      	mov	r3, r1
 800197a:	4621      	mov	r1, r4
 800197c:	1a51      	subs	r1, r2, r1
 800197e:	6139      	str	r1, [r7, #16]
 8001980:	4629      	mov	r1, r5
 8001982:	eb63 0301 	sbc.w	r3, r3, r1
 8001986:	617b      	str	r3, [r7, #20]
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001994:	4659      	mov	r1, fp
 8001996:	018b      	lsls	r3, r1, #6
 8001998:	4651      	mov	r1, sl
 800199a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800199e:	4651      	mov	r1, sl
 80019a0:	018a      	lsls	r2, r1, #6
 80019a2:	4651      	mov	r1, sl
 80019a4:	ebb2 0801 	subs.w	r8, r2, r1
 80019a8:	4659      	mov	r1, fp
 80019aa:	eb63 0901 	sbc.w	r9, r3, r1
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019c2:	4690      	mov	r8, r2
 80019c4:	4699      	mov	r9, r3
 80019c6:	4623      	mov	r3, r4
 80019c8:	eb18 0303 	adds.w	r3, r8, r3
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	462b      	mov	r3, r5
 80019d0:	eb49 0303 	adc.w	r3, r9, r3
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	f04f 0200 	mov.w	r2, #0
 80019da:	f04f 0300 	mov.w	r3, #0
 80019de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019e2:	4629      	mov	r1, r5
 80019e4:	024b      	lsls	r3, r1, #9
 80019e6:	4621      	mov	r1, r4
 80019e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019ec:	4621      	mov	r1, r4
 80019ee:	024a      	lsls	r2, r1, #9
 80019f0:	4610      	mov	r0, r2
 80019f2:	4619      	mov	r1, r3
 80019f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019f6:	2200      	movs	r2, #0
 80019f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a00:	f7fe fc50 	bl	80002a4 <__aeabi_uldivmod>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4613      	mov	r3, r2
 8001a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a0c:	e058      	b.n	8001ac0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a0e:	4b38      	ldr	r3, [pc, #224]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	099b      	lsrs	r3, r3, #6
 8001a14:	2200      	movs	r2, #0
 8001a16:	4618      	mov	r0, r3
 8001a18:	4611      	mov	r1, r2
 8001a1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a1e:	623b      	str	r3, [r7, #32]
 8001a20:	2300      	movs	r3, #0
 8001a22:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a28:	4642      	mov	r2, r8
 8001a2a:	464b      	mov	r3, r9
 8001a2c:	f04f 0000 	mov.w	r0, #0
 8001a30:	f04f 0100 	mov.w	r1, #0
 8001a34:	0159      	lsls	r1, r3, #5
 8001a36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a3a:	0150      	lsls	r0, r2, #5
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	4641      	mov	r1, r8
 8001a42:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a46:	4649      	mov	r1, r9
 8001a48:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	f04f 0300 	mov.w	r3, #0
 8001a54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a60:	ebb2 040a 	subs.w	r4, r2, sl
 8001a64:	eb63 050b 	sbc.w	r5, r3, fp
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 0300 	mov.w	r3, #0
 8001a70:	00eb      	lsls	r3, r5, #3
 8001a72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a76:	00e2      	lsls	r2, r4, #3
 8001a78:	4614      	mov	r4, r2
 8001a7a:	461d      	mov	r5, r3
 8001a7c:	4643      	mov	r3, r8
 8001a7e:	18e3      	adds	r3, r4, r3
 8001a80:	603b      	str	r3, [r7, #0]
 8001a82:	464b      	mov	r3, r9
 8001a84:	eb45 0303 	adc.w	r3, r5, r3
 8001a88:	607b      	str	r3, [r7, #4]
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a96:	4629      	mov	r1, r5
 8001a98:	028b      	lsls	r3, r1, #10
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aa0:	4621      	mov	r1, r4
 8001aa2:	028a      	lsls	r2, r1, #10
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61bb      	str	r3, [r7, #24]
 8001aae:	61fa      	str	r2, [r7, #28]
 8001ab0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ab4:	f7fe fbf6 	bl	80002a4 <__aeabi_uldivmod>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4613      	mov	r3, r2
 8001abe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	@ (8001af0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	0c1b      	lsrs	r3, r3, #16
 8001ac6:	f003 0303 	and.w	r3, r3, #3
 8001aca:	3301      	adds	r3, #1
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001ad0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ad2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ada:	e002      	b.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001adc:	4b05      	ldr	r3, [pc, #20]	@ (8001af4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ade:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ae0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ae2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3750      	adds	r7, #80	@ 0x50
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aee:	bf00      	nop
 8001af0:	40023800 	.word	0x40023800
 8001af4:	00f42400 	.word	0x00f42400
 8001af8:	007a1200 	.word	0x007a1200

08001afc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b00:	4b03      	ldr	r3, [pc, #12]	@ (8001b10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000000 	.word	0x20000000

08001b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b18:	f7ff fff0 	bl	8001afc <HAL_RCC_GetHCLKFreq>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	0a9b      	lsrs	r3, r3, #10
 8001b24:	f003 0307 	and.w	r3, r3, #7
 8001b28:	4903      	ldr	r1, [pc, #12]	@ (8001b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b2a:	5ccb      	ldrb	r3, [r1, r3]
 8001b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40023800 	.word	0x40023800
 8001b38:	08007138 	.word	0x08007138

08001b3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	220f      	movs	r2, #15
 8001b4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b4c:	4b12      	ldr	r3, [pc, #72]	@ (8001b98 <HAL_RCC_GetClockConfig+0x5c>)
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 0203 	and.w	r2, r3, #3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b58:	4b0f      	ldr	r3, [pc, #60]	@ (8001b98 <HAL_RCC_GetClockConfig+0x5c>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b64:	4b0c      	ldr	r3, [pc, #48]	@ (8001b98 <HAL_RCC_GetClockConfig+0x5c>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001b70:	4b09      	ldr	r3, [pc, #36]	@ (8001b98 <HAL_RCC_GetClockConfig+0x5c>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	08db      	lsrs	r3, r3, #3
 8001b76:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b7e:	4b07      	ldr	r3, [pc, #28]	@ (8001b9c <HAL_RCC_GetClockConfig+0x60>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 020f 	and.w	r2, r3, #15
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	601a      	str	r2, [r3, #0]
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40023c00 	.word	0x40023c00

08001ba0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e049      	b.n	8001c46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d106      	bne.n	8001bcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f000 f841 	bl	8001c4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2202      	movs	r2, #2
 8001bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681a      	ldr	r2, [r3, #0]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3304      	adds	r3, #4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4610      	mov	r0, r2
 8001be0:	f000 f9f2 	bl	8001fc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3708      	adds	r7, #8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c56:	bf00      	nop
 8001c58:	370c      	adds	r7, #12
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
	...

08001c64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b085      	sub	sp, #20
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d001      	beq.n	8001c7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e054      	b.n	8001d26 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2202      	movs	r2, #2
 8001c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f042 0201 	orr.w	r2, r2, #1
 8001c92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a26      	ldr	r2, [pc, #152]	@ (8001d34 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d022      	beq.n	8001ce4 <HAL_TIM_Base_Start_IT+0x80>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ca6:	d01d      	beq.n	8001ce4 <HAL_TIM_Base_Start_IT+0x80>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a22      	ldr	r2, [pc, #136]	@ (8001d38 <HAL_TIM_Base_Start_IT+0xd4>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d018      	beq.n	8001ce4 <HAL_TIM_Base_Start_IT+0x80>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a21      	ldr	r2, [pc, #132]	@ (8001d3c <HAL_TIM_Base_Start_IT+0xd8>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d013      	beq.n	8001ce4 <HAL_TIM_Base_Start_IT+0x80>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a1f      	ldr	r2, [pc, #124]	@ (8001d40 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d00e      	beq.n	8001ce4 <HAL_TIM_Base_Start_IT+0x80>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a1e      	ldr	r2, [pc, #120]	@ (8001d44 <HAL_TIM_Base_Start_IT+0xe0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d009      	beq.n	8001ce4 <HAL_TIM_Base_Start_IT+0x80>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8001d48 <HAL_TIM_Base_Start_IT+0xe4>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d004      	beq.n	8001ce4 <HAL_TIM_Base_Start_IT+0x80>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a1b      	ldr	r2, [pc, #108]	@ (8001d4c <HAL_TIM_Base_Start_IT+0xe8>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d115      	bne.n	8001d10 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	689a      	ldr	r2, [r3, #8]
 8001cea:	4b19      	ldr	r3, [pc, #100]	@ (8001d50 <HAL_TIM_Base_Start_IT+0xec>)
 8001cec:	4013      	ands	r3, r2
 8001cee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2b06      	cmp	r3, #6
 8001cf4:	d015      	beq.n	8001d22 <HAL_TIM_Base_Start_IT+0xbe>
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cfc:	d011      	beq.n	8001d22 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f042 0201 	orr.w	r2, r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d0e:	e008      	b.n	8001d22 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	e000      	b.n	8001d24 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	40010000 	.word	0x40010000
 8001d38:	40000400 	.word	0x40000400
 8001d3c:	40000800 	.word	0x40000800
 8001d40:	40000c00 	.word	0x40000c00
 8001d44:	40010400 	.word	0x40010400
 8001d48:	40014000 	.word	0x40014000
 8001d4c:	40001800 	.word	0x40001800
 8001d50:	00010007 	.word	0x00010007

08001d54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d020      	beq.n	8001db8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d01b      	beq.n	8001db8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f06f 0202 	mvn.w	r2, #2
 8001d88:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d003      	beq.n	8001da6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f000 f8f3 	bl	8001f8a <HAL_TIM_IC_CaptureCallback>
 8001da4:	e005      	b.n	8001db2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f8e5 	bl	8001f76 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 f8f6 	bl	8001f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d020      	beq.n	8001e04 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d01b      	beq.n	8001e04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f06f 0204 	mvn.w	r2, #4
 8001dd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	699b      	ldr	r3, [r3, #24]
 8001de2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d003      	beq.n	8001df2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f8cd 	bl	8001f8a <HAL_TIM_IC_CaptureCallback>
 8001df0:	e005      	b.n	8001dfe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f8bf 	bl	8001f76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df8:	6878      	ldr	r0, [r7, #4]
 8001dfa:	f000 f8d0 	bl	8001f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d020      	beq.n	8001e50 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f003 0308 	and.w	r3, r3, #8
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d01b      	beq.n	8001e50 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0208 	mvn.w	r2, #8
 8001e20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2204      	movs	r2, #4
 8001e26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f8a7 	bl	8001f8a <HAL_TIM_IC_CaptureCallback>
 8001e3c:	e005      	b.n	8001e4a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f899 	bl	8001f76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f8aa 	bl	8001f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d020      	beq.n	8001e9c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f003 0310 	and.w	r3, r3, #16
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01b      	beq.n	8001e9c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0210 	mvn.w	r2, #16
 8001e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2208      	movs	r2, #8
 8001e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f881 	bl	8001f8a <HAL_TIM_IC_CaptureCallback>
 8001e88:	e005      	b.n	8001e96 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f873 	bl	8001f76 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f884 	bl	8001f9e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00c      	beq.n	8001ec0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d007      	beq.n	8001ec0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0201 	mvn.w	r2, #1
 8001eb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 f851 	bl	8001f62 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d104      	bne.n	8001ed4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00c      	beq.n	8001eee <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d007      	beq.n	8001eee <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8001ee6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f91d 	bl	8002128 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d00c      	beq.n	8001f12 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d007      	beq.n	8001f12 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8001f0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f000 f915 	bl	800213c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d00c      	beq.n	8001f36 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d007      	beq.n	8001f36 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f000 f83e 	bl	8001fb2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	f003 0320 	and.w	r3, r3, #32
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00c      	beq.n	8001f5a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f003 0320 	and.w	r3, r3, #32
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d007      	beq.n	8001f5a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f06f 0220 	mvn.w	r2, #32
 8001f52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	f000 f8dd 	bl	8002114 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}

08001f62 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f62:	b480      	push	{r7}
 8001f64:	b083      	sub	sp, #12
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr

08001f76 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f7e:	bf00      	nop
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	b083      	sub	sp, #12
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	b083      	sub	sp, #12
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fa6:	bf00      	nop
 8001fa8:	370c      	adds	r7, #12
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr

08001fb2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr
	...

08001fc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a43      	ldr	r2, [pc, #268]	@ (80020e8 <TIM_Base_SetConfig+0x120>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d013      	beq.n	8002008 <TIM_Base_SetConfig+0x40>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fe6:	d00f      	beq.n	8002008 <TIM_Base_SetConfig+0x40>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4a40      	ldr	r2, [pc, #256]	@ (80020ec <TIM_Base_SetConfig+0x124>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d00b      	beq.n	8002008 <TIM_Base_SetConfig+0x40>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a3f      	ldr	r2, [pc, #252]	@ (80020f0 <TIM_Base_SetConfig+0x128>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d007      	beq.n	8002008 <TIM_Base_SetConfig+0x40>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a3e      	ldr	r2, [pc, #248]	@ (80020f4 <TIM_Base_SetConfig+0x12c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d003      	beq.n	8002008 <TIM_Base_SetConfig+0x40>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a3d      	ldr	r2, [pc, #244]	@ (80020f8 <TIM_Base_SetConfig+0x130>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d108      	bne.n	800201a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800200e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	4313      	orrs	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a32      	ldr	r2, [pc, #200]	@ (80020e8 <TIM_Base_SetConfig+0x120>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d02b      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002028:	d027      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a2f      	ldr	r2, [pc, #188]	@ (80020ec <TIM_Base_SetConfig+0x124>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d023      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a2e      	ldr	r2, [pc, #184]	@ (80020f0 <TIM_Base_SetConfig+0x128>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d01f      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a2d      	ldr	r2, [pc, #180]	@ (80020f4 <TIM_Base_SetConfig+0x12c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d01b      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a2c      	ldr	r2, [pc, #176]	@ (80020f8 <TIM_Base_SetConfig+0x130>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d017      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a2b      	ldr	r2, [pc, #172]	@ (80020fc <TIM_Base_SetConfig+0x134>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d013      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a2a      	ldr	r2, [pc, #168]	@ (8002100 <TIM_Base_SetConfig+0x138>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d00f      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a29      	ldr	r2, [pc, #164]	@ (8002104 <TIM_Base_SetConfig+0x13c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d00b      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a28      	ldr	r2, [pc, #160]	@ (8002108 <TIM_Base_SetConfig+0x140>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d007      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a27      	ldr	r2, [pc, #156]	@ (800210c <TIM_Base_SetConfig+0x144>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d003      	beq.n	800207a <TIM_Base_SetConfig+0xb2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a26      	ldr	r2, [pc, #152]	@ (8002110 <TIM_Base_SetConfig+0x148>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d108      	bne.n	800208c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002080:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	4313      	orrs	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	4313      	orrs	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a0e      	ldr	r2, [pc, #56]	@ (80020e8 <TIM_Base_SetConfig+0x120>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d003      	beq.n	80020ba <TIM_Base_SetConfig+0xf2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a10      	ldr	r2, [pc, #64]	@ (80020f8 <TIM_Base_SetConfig+0x130>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d103      	bne.n	80020c2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	691a      	ldr	r2, [r3, #16]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f043 0204 	orr.w	r2, r3, #4
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	601a      	str	r2, [r3, #0]
}
 80020da:	bf00      	nop
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40010000 	.word	0x40010000
 80020ec:	40000400 	.word	0x40000400
 80020f0:	40000800 	.word	0x40000800
 80020f4:	40000c00 	.word	0x40000c00
 80020f8:	40010400 	.word	0x40010400
 80020fc:	40014000 	.word	0x40014000
 8002100:	40014400 	.word	0x40014400
 8002104:	40014800 	.word	0x40014800
 8002108:	40001800 	.word	0x40001800
 800210c:	40001c00 	.word	0x40001c00
 8002110:	40002000 	.word	0x40002000

08002114 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f103 0208 	add.w	r2, r3, #8
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f04f 32ff 	mov.w	r2, #4294967295
 8002168:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f103 0208 	add.w	r2, r3, #8
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f103 0208 	add.w	r2, r3, #8
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr

080021aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80021aa:	b480      	push	{r7}
 80021ac:	b085      	sub	sp, #20
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	6078      	str	r0, [r7, #4]
 80021b2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	689a      	ldr	r2, [r3, #8]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	683a      	ldr	r2, [r7, #0]
 80021d4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	601a      	str	r2, [r3, #0]
}
 80021e6:	bf00      	nop
 80021e8:	3714      	adds	r7, #20
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80021f2:	b480      	push	{r7}
 80021f4:	b085      	sub	sp, #20
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002208:	d103      	bne.n	8002212 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	e00c      	b.n	800222c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3308      	adds	r3, #8
 8002216:	60fb      	str	r3, [r7, #12]
 8002218:	e002      	b.n	8002220 <vListInsert+0x2e>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	429a      	cmp	r2, r3
 800222a:	d2f6      	bcs.n	800221a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	685a      	ldr	r2, [r3, #4]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	601a      	str	r2, [r3, #0]
}
 8002258:	bf00      	nop
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	691b      	ldr	r3, [r3, #16]
 8002270:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	6892      	ldr	r2, [r2, #8]
 800227a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6852      	ldr	r2, [r2, #4]
 8002284:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	429a      	cmp	r2, r3
 800228e:	d103      	bne.n	8002298 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689a      	ldr	r2, [r3, #8]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	1e5a      	subs	r2, r3, #1
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3714      	adds	r7, #20
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d104      	bne.n	80022d6 <xQueueGenericReset+0x1e>
 80022cc:	492a      	ldr	r1, [pc, #168]	@ (8002378 <xQueueGenericReset+0xc0>)
 80022ce:	f240 100d 	movw	r0, #269	@ 0x10d
 80022d2:	f7fe fb5d 	bl	8000990 <vAssertCalled>

    taskENTER_CRITICAL();
 80022d6:	f002 f877 	bl	80043c8 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022e2:	68f9      	ldr	r1, [r7, #12]
 80022e4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80022e6:	fb01 f303 	mul.w	r3, r1, r3
 80022ea:	441a      	add	r2, r3
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2200      	movs	r2, #0
 80022f4:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002306:	3b01      	subs	r3, #1
 8002308:	68f9      	ldr	r1, [r7, #12]
 800230a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800230c:	fb01 f303 	mul.w	r3, r1, r3
 8002310:	441a      	add	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	22ff      	movs	r2, #255	@ 0xff
 800231a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	22ff      	movs	r2, #255	@ 0xff
 8002322:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d114      	bne.n	8002356 <xQueueGenericReset+0x9e>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d01a      	beq.n	800236a <xQueueGenericReset+0xb2>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3310      	adds	r3, #16
 8002338:	4618      	mov	r0, r3
 800233a:	f001 f963 	bl	8003604 <xTaskRemoveFromEventList>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d012      	beq.n	800236a <xQueueGenericReset+0xb2>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002344:	4b0d      	ldr	r3, [pc, #52]	@ (800237c <xQueueGenericReset+0xc4>)
 8002346:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	f3bf 8f4f 	dsb	sy
 8002350:	f3bf 8f6f 	isb	sy
 8002354:	e009      	b.n	800236a <xQueueGenericReset+0xb2>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	3310      	adds	r3, #16
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff fef8 	bl	8002150 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	3324      	adds	r3, #36	@ 0x24
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff fef3 	bl	8002150 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800236a:	f002 f859 	bl	8004420 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800236e:	2301      	movs	r3, #1
}
 8002370:	4618      	mov	r0, r3
 8002372:	3710      	adds	r7, #16
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	08006f68 	.word	0x08006f68
 800237c:	e000ed04 	.word	0xe000ed04

08002380 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002380:	b580      	push	{r7, lr}
 8002382:	b08a      	sub	sp, #40	@ 0x28
 8002384:	af02      	add	r7, sp, #8
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	4613      	mov	r3, r2
 800238c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d104      	bne.n	800239e <xQueueGenericCreate+0x1e>
 8002394:	4921      	ldr	r1, [pc, #132]	@ (800241c <xQueueGenericCreate+0x9c>)
 8002396:	f44f 70c3 	mov.w	r0, #390	@ 0x186
 800239a:	f7fe faf9 	bl	8000990 <vAssertCalled>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	68ba      	ldr	r2, [r7, #8]
 80023a2:	fb02 f303 	mul.w	r3, r2, r3
 80023a6:	61fb      	str	r3, [r7, #28]

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d006      	beq.n	80023bc <xQueueGenericCreate+0x3c>
 80023ae:	69fa      	ldr	r2, [r7, #28]
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d101      	bne.n	80023c0 <xQueueGenericCreate+0x40>
 80023bc:	2301      	movs	r3, #1
 80023be:	e000      	b.n	80023c2 <xQueueGenericCreate+0x42>
 80023c0:	2300      	movs	r3, #0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d104      	bne.n	80023d0 <xQueueGenericCreate+0x50>
 80023c6:	4915      	ldr	r1, [pc, #84]	@ (800241c <xQueueGenericCreate+0x9c>)
 80023c8:	f44f 70c7 	mov.w	r0, #398	@ 0x18e
 80023cc:	f7fe fae0 	bl	8000990 <vAssertCalled>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	f113 0f55 	cmn.w	r3, #85	@ 0x55
 80023d6:	d904      	bls.n	80023e2 <xQueueGenericCreate+0x62>
 80023d8:	4910      	ldr	r1, [pc, #64]	@ (800241c <xQueueGenericCreate+0x9c>)
 80023da:	f240 1091 	movw	r0, #401	@ 0x191
 80023de:	f7fe fad7 	bl	8000990 <vAssertCalled>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	3354      	adds	r3, #84	@ 0x54
 80023e6:	4618      	mov	r0, r3
 80023e8:	f002 f906 	bl	80045f8 <pvPortMalloc>
 80023ec:	61b8      	str	r0, [r7, #24]

        if( pxNewQueue != NULL )
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00d      	beq.n	8002410 <xQueueGenericCreate+0x90>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	617b      	str	r3, [r7, #20]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	3354      	adds	r3, #84	@ 0x54
 80023fc:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023fe:	79fa      	ldrb	r2, [r7, #7]
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	9300      	str	r3, [sp, #0]
 8002404:	4613      	mov	r3, r2
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 f808 	bl	8002420 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002410:	69bb      	ldr	r3, [r7, #24]
    }
 8002412:	4618      	mov	r0, r3
 8002414:	3720      	adds	r7, #32
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	08006f68 	.word	0x08006f68

08002420 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
 800242c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d103      	bne.n	800243c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	69ba      	ldr	r2, [r7, #24]
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	e002      	b.n	8002442 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800244e:	2101      	movs	r1, #1
 8002450:	69b8      	ldr	r0, [r7, #24]
 8002452:	f7ff ff31 	bl	80022b8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	78fa      	ldrb	r2, [r7, #3]
 800245a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        }
    #endif /* configUSE_TRACE_FACILITY */

    #if ( configUSE_QUEUE_SETS == 1 )
        {
            pxNewQueue->pxQueueSetContainer = NULL;
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	2200      	movs	r2, #0
 8002462:	649a      	str	r2, [r3, #72]	@ 0x48
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002464:	78fb      	ldrb	r3, [r7, #3]
 8002466:	68ba      	ldr	r2, [r7, #8]
 8002468:	68f9      	ldr	r1, [r7, #12]
 800246a:	2073      	movs	r0, #115	@ 0x73
 800246c:	f003 fa1a 	bl	80058a4 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002470:	bf00      	nop
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b08c      	sub	sp, #48	@ 0x30
 800247c:	af02      	add	r7, sp, #8
 800247e:	60f8      	str	r0, [r7, #12]
 8002480:	60b9      	str	r1, [r7, #8]
 8002482:	607a      	str	r2, [r7, #4]
 8002484:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002486:	2300      	movs	r3, #0
 8002488:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	623b      	str	r3, [r7, #32]

    configASSERT( pxQueue );
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d104      	bne.n	800249e <xQueueGenericSend+0x26>
 8002494:	498a      	ldr	r1, [pc, #552]	@ (80026c0 <xQueueGenericSend+0x248>)
 8002496:	f44f 7043 	mov.w	r0, #780	@ 0x30c
 800249a:	f7fe fa79 	bl	8000990 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d103      	bne.n	80024ac <xQueueGenericSend+0x34>
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <xQueueGenericSend+0x38>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <xQueueGenericSend+0x3a>
 80024b0:	2300      	movs	r3, #0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d104      	bne.n	80024c0 <xQueueGenericSend+0x48>
 80024b6:	4982      	ldr	r1, [pc, #520]	@ (80026c0 <xQueueGenericSend+0x248>)
 80024b8:	f240 300d 	movw	r0, #781	@ 0x30d
 80024bc:	f7fe fa68 	bl	8000990 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d103      	bne.n	80024ce <xQueueGenericSend+0x56>
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d101      	bne.n	80024d2 <xQueueGenericSend+0x5a>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <xQueueGenericSend+0x5c>
 80024d2:	2300      	movs	r3, #0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d104      	bne.n	80024e2 <xQueueGenericSend+0x6a>
 80024d8:	4979      	ldr	r1, [pc, #484]	@ (80026c0 <xQueueGenericSend+0x248>)
 80024da:	f240 300e 	movw	r0, #782	@ 0x30e
 80024de:	f7fe fa57 	bl	8000990 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024e2:	f001 fa21 	bl	8003928 <xTaskGetSchedulerState>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <xQueueGenericSend+0x7a>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <xQueueGenericSend+0x7e>
 80024f2:	2301      	movs	r3, #1
 80024f4:	e000      	b.n	80024f8 <xQueueGenericSend+0x80>
 80024f6:	2300      	movs	r3, #0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d104      	bne.n	8002506 <xQueueGenericSend+0x8e>
 80024fc:	4970      	ldr	r1, [pc, #448]	@ (80026c0 <xQueueGenericSend+0x248>)
 80024fe:	f240 3011 	movw	r0, #785	@ 0x311
 8002502:	f7fe fa45 	bl	8000990 <vAssertCalled>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002506:	f001 ff5f 	bl	80043c8 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002512:	429a      	cmp	r2, r3
 8002514:	d302      	bcc.n	800251c <xQueueGenericSend+0xa4>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b02      	cmp	r3, #2
 800251a:	d151      	bne.n	80025c0 <xQueueGenericSend+0x148>
            {
                traceQUEUE_SEND( pxQueue );
 800251c:	6a3b      	ldr	r3, [r7, #32]
 800251e:	4618      	mov	r0, r3
 8002520:	f003 fed2 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 8002524:	4601      	mov	r1, r0
 8002526:	2300      	movs	r3, #0
 8002528:	9300      	str	r3, [sp, #0]
 800252a:	2300      	movs	r3, #0
 800252c:	2200      	movs	r2, #0
 800252e:	205a      	movs	r0, #90	@ 0x5a
 8002530:	f003 fa2e 	bl	8005990 <SEGGER_SYSVIEW_RecordU32x4>

                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002538:	61fb      	str	r3, [r7, #28]

                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	6a38      	ldr	r0, [r7, #32]
 8002540:	f000 fa84 	bl	8002a4c <prvCopyDataToQueue>
 8002544:	61b8      	str	r0, [r7, #24]

                        if( pxQueue->pxQueueSetContainer != NULL )
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800254a:	2b00      	cmp	r3, #0
 800254c:	d014      	beq.n	8002578 <xQueueGenericSend+0x100>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	2b02      	cmp	r3, #2
 8002552:	d102      	bne.n	800255a <xQueueGenericSend+0xe2>
 8002554:	69fb      	ldr	r3, [r7, #28]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d12e      	bne.n	80025b8 <xQueueGenericSend+0x140>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 800255a:	6a38      	ldr	r0, [r7, #32]
 800255c:	f000 fbfa 	bl	8002d54 <prvNotifyQueueSetContainer>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d028      	beq.n	80025b8 <xQueueGenericSend+0x140>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock. A context switch is required. */
                                queueYIELD_IF_USING_PREEMPTION();
 8002566:	4b57      	ldr	r3, [pc, #348]	@ (80026c4 <xQueueGenericSend+0x24c>)
 8002568:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	f3bf 8f4f 	dsb	sy
 8002572:	f3bf 8f6f 	isb	sy
 8002576:	e01f      	b.n	80025b8 <xQueueGenericSend+0x140>
                        }
                        else
                        {
                            /* If there was a task waiting for data to arrive on the
                             * queue then unblock it now. */
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002578:	6a3b      	ldr	r3, [r7, #32]
 800257a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257c:	2b00      	cmp	r3, #0
 800257e:	d010      	beq.n	80025a2 <xQueueGenericSend+0x12a>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	3324      	adds	r3, #36	@ 0x24
 8002584:	4618      	mov	r0, r3
 8002586:	f001 f83d 	bl	8003604 <xTaskRemoveFromEventList>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d013      	beq.n	80025b8 <xQueueGenericSend+0x140>
                                {
                                    /* The unblocked task has a priority higher than
                                     * our own so yield immediately.  Yes it is ok to
                                     * do this from within the critical section - the
                                     * kernel takes care of that. */
                                    queueYIELD_IF_USING_PREEMPTION();
 8002590:	4b4c      	ldr	r3, [pc, #304]	@ (80026c4 <xQueueGenericSend+0x24c>)
 8002592:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	f3bf 8f4f 	dsb	sy
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	e00a      	b.n	80025b8 <xQueueGenericSend+0x140>
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }
                            }
                            else if( xYieldRequired != pdFALSE )
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d007      	beq.n	80025b8 <xQueueGenericSend+0x140>
                            {
                                /* This path is a special case that will only get
                                 * executed if the task was holding multiple mutexes
                                 * and the mutexes were given back in an order that is
                                 * different to that in which they were taken. */
                                queueYIELD_IF_USING_PREEMPTION();
 80025a8:	4b46      	ldr	r3, [pc, #280]	@ (80026c4 <xQueueGenericSend+0x24c>)
 80025aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	f3bf 8f4f 	dsb	sy
 80025b4:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80025b8:	f001 ff32 	bl	8004420 <vPortExitCritical>
                return pdPASS;
 80025bc:	2301      	movs	r3, #1
 80025be:	e07b      	b.n	80026b8 <xQueueGenericSend+0x240>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10f      	bne.n	80025e6 <xQueueGenericSend+0x16e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80025c6:	f001 ff2b 	bl	8004420 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	4618      	mov	r0, r3
 80025ce:	f003 fe7b 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 80025d2:	4601      	mov	r1, r0
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2000      	movs	r0, #0
 80025da:	9000      	str	r0, [sp, #0]
 80025dc:	205a      	movs	r0, #90	@ 0x5a
 80025de:	f003 f9d7 	bl	8005990 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 80025e2:	2300      	movs	r3, #0
 80025e4:	e068      	b.n	80026b8 <xQueueGenericSend+0x240>
                }
                else if( xEntryTimeSet == pdFALSE )
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d106      	bne.n	80025fa <xQueueGenericSend+0x182>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80025ec:	f107 0310 	add.w	r3, r7, #16
 80025f0:	4618      	mov	r0, r3
 80025f2:	f001 f869 	bl	80036c8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80025f6:	2301      	movs	r3, #1
 80025f8:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80025fa:	f001 ff11 	bl	8004420 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80025fe:	f000 fdcd 	bl	800319c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002602:	f001 fee1 	bl	80043c8 <vPortEnterCritical>
 8002606:	6a3b      	ldr	r3, [r7, #32]
 8002608:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800260c:	b25b      	sxtb	r3, r3
 800260e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002612:	d103      	bne.n	800261c <xQueueGenericSend+0x1a4>
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800261c:	6a3b      	ldr	r3, [r7, #32]
 800261e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002622:	b25b      	sxtb	r3, r3
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d103      	bne.n	8002632 <xQueueGenericSend+0x1ba>
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002632:	f001 fef5 	bl	8004420 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002636:	1d3a      	adds	r2, r7, #4
 8002638:	f107 0310 	add.w	r3, r7, #16
 800263c:	4611      	mov	r1, r2
 800263e:	4618      	mov	r0, r3
 8002640:	f001 f858 	bl	80036f4 <xTaskCheckForTimeOut>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d124      	bne.n	8002694 <xQueueGenericSend+0x21c>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800264a:	6a38      	ldr	r0, [r7, #32]
 800264c:	f000 fb03 	bl	8002c56 <prvIsQueueFull>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d018      	beq.n	8002688 <xQueueGenericSend+0x210>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	3310      	adds	r3, #16
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	4611      	mov	r1, r2
 800265e:	4618      	mov	r0, r3
 8002660:	f000 ff86 	bl	8003570 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002664:	6a38      	ldr	r0, [r7, #32]
 8002666:	f000 fa81 	bl	8002b6c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800266a:	f000 fda5 	bl	80031b8 <xTaskResumeAll>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	f47f af48 	bne.w	8002506 <xQueueGenericSend+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002676:	4b13      	ldr	r3, [pc, #76]	@ (80026c4 <xQueueGenericSend+0x24c>)
 8002678:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800267c:	601a      	str	r2, [r3, #0]
 800267e:	f3bf 8f4f 	dsb	sy
 8002682:	f3bf 8f6f 	isb	sy
 8002686:	e73e      	b.n	8002506 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002688:	6a38      	ldr	r0, [r7, #32]
 800268a:	f000 fa6f 	bl	8002b6c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800268e:	f000 fd93 	bl	80031b8 <xTaskResumeAll>
 8002692:	e738      	b.n	8002506 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002694:	6a38      	ldr	r0, [r7, #32]
 8002696:	f000 fa69 	bl	8002b6c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800269a:	f000 fd8d 	bl	80031b8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f003 fe11 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 80026a6:	4601      	mov	r1, r0
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2000      	movs	r0, #0
 80026ae:	9000      	str	r0, [sp, #0]
 80026b0:	205a      	movs	r0, #90	@ 0x5a
 80026b2:	f003 f96d 	bl	8005990 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80026b6:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3728      	adds	r7, #40	@ 0x28
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	08006f68 	.word	0x08006f68
 80026c4:	e000ed04 	.word	0xe000ed04

080026c8 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08c      	sub	sp, #48	@ 0x30
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
 80026d4:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	62bb      	str	r3, [r7, #40]	@ 0x28

    configASSERT( pxQueue );
 80026da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d104      	bne.n	80026ea <xQueueGenericSendFromISR+0x22>
 80026e0:	4959      	ldr	r1, [pc, #356]	@ (8002848 <xQueueGenericSendFromISR+0x180>)
 80026e2:	f44f 7078 	mov.w	r0, #992	@ 0x3e0
 80026e6:	f7fe f953 	bl	8000990 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d103      	bne.n	80026f8 <xQueueGenericSendFromISR+0x30>
 80026f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d101      	bne.n	80026fc <xQueueGenericSendFromISR+0x34>
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <xQueueGenericSendFromISR+0x36>
 80026fc:	2300      	movs	r3, #0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d104      	bne.n	800270c <xQueueGenericSendFromISR+0x44>
 8002702:	4951      	ldr	r1, [pc, #324]	@ (8002848 <xQueueGenericSendFromISR+0x180>)
 8002704:	f240 30e1 	movw	r0, #993	@ 0x3e1
 8002708:	f7fe f942 	bl	8000990 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	2b02      	cmp	r3, #2
 8002710:	d103      	bne.n	800271a <xQueueGenericSendFromISR+0x52>
 8002712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <xQueueGenericSendFromISR+0x56>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <xQueueGenericSendFromISR+0x58>
 800271e:	2300      	movs	r3, #0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d104      	bne.n	800272e <xQueueGenericSendFromISR+0x66>
 8002724:	4948      	ldr	r1, [pc, #288]	@ (8002848 <xQueueGenericSendFromISR+0x180>)
 8002726:	f240 30e2 	movw	r0, #994	@ 0x3e2
 800272a:	f7fe f931 	bl	8000990 <vAssertCalled>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800272e:	f001 ff27 	bl	8004580 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002732:	f3ef 8211 	mrs	r2, BASEPRI
 8002736:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800273a:	b672      	cpsid	i
 800273c:	f383 8811 	msr	BASEPRI, r3
 8002740:	f3bf 8f6f 	isb	sy
 8002744:	f3bf 8f4f 	dsb	sy
 8002748:	b662      	cpsie	i
 800274a:	61ba      	str	r2, [r7, #24]
 800274c:	617b      	str	r3, [r7, #20]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 800274e:	69bb      	ldr	r3, [r7, #24]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002750:	627b      	str	r3, [r7, #36]	@ 0x24
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002754:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002758:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800275a:	429a      	cmp	r2, r3
 800275c:	d302      	bcc.n	8002764 <xQueueGenericSendFromISR+0x9c>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	2b02      	cmp	r3, #2
 8002762:	d159      	bne.n	8002818 <xQueueGenericSendFromISR+0x150>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002764:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002766:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800276a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800276e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002772:	61fb      	str	r3, [r7, #28]

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002776:	4618      	mov	r0, r3
 8002778:	f003 fda6 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 800277c:	4601      	mov	r1, r0
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	461a      	mov	r2, r3
 8002782:	2060      	movs	r0, #96	@ 0x60
 8002784:	f003 f834 	bl	80057f0 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002788:	683a      	ldr	r2, [r7, #0]
 800278a:	68b9      	ldr	r1, [r7, #8]
 800278c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800278e:	f000 f95d 	bl	8002a4c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002792:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8002796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800279a:	d129      	bne.n	80027f0 <xQueueGenericSendFromISR+0x128>
            {
                #if ( configUSE_QUEUE_SETS == 1 )
                    {
                        if( pxQueue->pxQueueSetContainer != NULL )
 800279c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800279e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d012      	beq.n	80027ca <xQueueGenericSendFromISR+0x102>
                        {
                            if( ( xCopyPosition == queueOVERWRITE ) && ( uxPreviousMessagesWaiting != ( UBaseType_t ) 0 ) )
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d102      	bne.n	80027b0 <xQueueGenericSendFromISR+0xe8>
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d130      	bne.n	8002812 <xQueueGenericSendFromISR+0x14a>
                                /* Do not notify the queue set as an existing item
                                 * was overwritten in the queue so the number of items
                                 * in the queue has not changed. */
                                mtCOVERAGE_TEST_MARKER();
                            }
                            else if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 80027b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027b2:	f000 facf 	bl	8002d54 <prvNotifyQueueSetContainer>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d02a      	beq.n	8002812 <xQueueGenericSendFromISR+0x14a>
                            {
                                /* The queue is a member of a queue set, and posting
                                 * to the queue set caused a higher priority task to
                                 * unblock.  A context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d027      	beq.n	8002812 <xQueueGenericSendFromISR+0x14a>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	e023      	b.n	8002812 <xQueueGenericSendFromISR+0x14a>
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else
                        {
                            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d01f      	beq.n	8002812 <xQueueGenericSendFromISR+0x14a>
                            {
                                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027d4:	3324      	adds	r3, #36	@ 0x24
 80027d6:	4618      	mov	r0, r3
 80027d8:	f000 ff14 	bl	8003604 <xTaskRemoveFromEventList>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d017      	beq.n	8002812 <xQueueGenericSendFromISR+0x14a>
                                {
                                    /* The task waiting has a higher priority so
                                     *  record that a context switch is required. */
                                    if( pxHigherPriorityTaskWoken != NULL )
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d014      	beq.n	8002812 <xQueueGenericSendFromISR+0x14a>
                                    {
                                        *pxHigherPriorityTaskWoken = pdTRUE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	e010      	b.n	8002812 <xQueueGenericSendFromISR+0x14a>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 80027f0:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 80027f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80027f6:	d104      	bne.n	8002802 <xQueueGenericSendFromISR+0x13a>
 80027f8:	4913      	ldr	r1, [pc, #76]	@ (8002848 <xQueueGenericSendFromISR+0x180>)
 80027fa:	f240 406b 	movw	r0, #1131	@ 0x46b
 80027fe:	f7fe f8c7 	bl	8000990 <vAssertCalled>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002802:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002806:	3301      	adds	r3, #1
 8002808:	b2db      	uxtb	r3, r3
 800280a:	b25a      	sxtb	r2, r3
 800280c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800280e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8002812:	2301      	movs	r3, #1
 8002814:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
 8002816:	e00b      	b.n	8002830 <xQueueGenericSendFromISR+0x168>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800281a:	4618      	mov	r0, r3
 800281c:	f003 fd54 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 8002820:	4601      	mov	r1, r0
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	461a      	mov	r2, r3
 8002826:	2060      	movs	r0, #96	@ 0x60
 8002828:	f002 ffe2 	bl	80057f0 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 800282c:	2300      	movs	r3, #0
 800282e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002832:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 800283a:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800283c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800283e:	4618      	mov	r0, r3
 8002840:	3730      	adds	r7, #48	@ 0x30
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	08006f68 	.word	0x08006f68

0800284c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800284c:	b590      	push	{r4, r7, lr}
 800284e:	b08d      	sub	sp, #52	@ 0x34
 8002850:	af02      	add	r7, sp, #8
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002858:	2300      	movs	r3, #0
 800285a:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	623b      	str	r3, [r7, #32]

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d104      	bne.n	8002870 <xQueueReceive+0x24>
 8002866:	4977      	ldr	r1, [pc, #476]	@ (8002a44 <xQueueReceive+0x1f8>)
 8002868:	f240 502f 	movw	r0, #1327	@ 0x52f
 800286c:	f7fe f890 	bl	8000990 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d103      	bne.n	800287e <xQueueReceive+0x32>
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	2b00      	cmp	r3, #0
 800287c:	d101      	bne.n	8002882 <xQueueReceive+0x36>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <xQueueReceive+0x38>
 8002882:	2300      	movs	r3, #0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d104      	bne.n	8002892 <xQueueReceive+0x46>
 8002888:	496e      	ldr	r1, [pc, #440]	@ (8002a44 <xQueueReceive+0x1f8>)
 800288a:	f240 5033 	movw	r0, #1331	@ 0x533
 800288e:	f7fe f87f 	bl	8000990 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002892:	f001 f849 	bl	8003928 <xTaskGetSchedulerState>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d102      	bne.n	80028a2 <xQueueReceive+0x56>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <xQueueReceive+0x5a>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <xQueueReceive+0x5c>
 80028a6:	2300      	movs	r3, #0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d104      	bne.n	80028b6 <xQueueReceive+0x6a>
 80028ac:	4965      	ldr	r1, [pc, #404]	@ (8002a44 <xQueueReceive+0x1f8>)
 80028ae:	f44f 60a7 	mov.w	r0, #1336	@ 0x538
 80028b2:	f7fe f86d 	bl	8000990 <vAssertCalled>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80028b6:	f001 fd87 	bl	80043c8 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028be:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d02f      	beq.n	8002926 <xQueueReceive+0xda>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80028c6:	68b9      	ldr	r1, [r7, #8]
 80028c8:	6a38      	ldr	r0, [r7, #32]
 80028ca:	f000 f929 	bl	8002b20 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f003 fcf9 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 80028d6:	4604      	mov	r4, r0
 80028d8:	2000      	movs	r0, #0
 80028da:	f003 fcf5 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 80028de:	4602      	mov	r2, r0
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2101      	movs	r1, #1
 80028e4:	9100      	str	r1, [sp, #0]
 80028e6:	4621      	mov	r1, r4
 80028e8:	205c      	movs	r0, #92	@ 0x5c
 80028ea:	f003 f851 	bl	8005990 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	1e5a      	subs	r2, r3, #1
 80028f2:	6a3b      	ldr	r3, [r7, #32]
 80028f4:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00f      	beq.n	800291e <xQueueReceive+0xd2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	3310      	adds	r3, #16
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fe7e 	bl	8003604 <xTaskRemoveFromEventList>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d007      	beq.n	800291e <xQueueReceive+0xd2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800290e:	4b4e      	ldr	r3, [pc, #312]	@ (8002a48 <xQueueReceive+0x1fc>)
 8002910:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	f3bf 8f4f 	dsb	sy
 800291a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800291e:	f001 fd7f 	bl	8004420 <vPortExitCritical>
                return pdPASS;
 8002922:	2301      	movs	r3, #1
 8002924:	e08a      	b.n	8002a3c <xQueueReceive+0x1f0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d113      	bne.n	8002954 <xQueueReceive+0x108>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800292c:	f001 fd78 	bl	8004420 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	4618      	mov	r0, r3
 8002934:	f003 fcc8 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 8002938:	4604      	mov	r4, r0
 800293a:	2000      	movs	r0, #0
 800293c:	f003 fcc4 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 8002940:	4602      	mov	r2, r0
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2101      	movs	r1, #1
 8002946:	9100      	str	r1, [sp, #0]
 8002948:	4621      	mov	r1, r4
 800294a:	205c      	movs	r0, #92	@ 0x5c
 800294c:	f003 f820 	bl	8005990 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002950:	2300      	movs	r3, #0
 8002952:	e073      	b.n	8002a3c <xQueueReceive+0x1f0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002956:	2b00      	cmp	r3, #0
 8002958:	d106      	bne.n	8002968 <xQueueReceive+0x11c>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800295a:	f107 0314 	add.w	r3, r7, #20
 800295e:	4618      	mov	r0, r3
 8002960:	f000 feb2 	bl	80036c8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002964:	2301      	movs	r3, #1
 8002966:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002968:	f001 fd5a 	bl	8004420 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800296c:	f000 fc16 	bl	800319c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002970:	f001 fd2a 	bl	80043c8 <vPortEnterCritical>
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800297a:	b25b      	sxtb	r3, r3
 800297c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002980:	d103      	bne.n	800298a <xQueueReceive+0x13e>
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800298a:	6a3b      	ldr	r3, [r7, #32]
 800298c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002990:	b25b      	sxtb	r3, r3
 8002992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002996:	d103      	bne.n	80029a0 <xQueueReceive+0x154>
 8002998:	6a3b      	ldr	r3, [r7, #32]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029a0:	f001 fd3e 	bl	8004420 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029a4:	1d3a      	adds	r2, r7, #4
 80029a6:	f107 0314 	add.w	r3, r7, #20
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 fea1 	bl	80036f4 <xTaskCheckForTimeOut>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d124      	bne.n	8002a02 <xQueueReceive+0x1b6>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029b8:	6a38      	ldr	r0, [r7, #32]
 80029ba:	f000 f936 	bl	8002c2a <prvIsQueueEmpty>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d018      	beq.n	80029f6 <xQueueReceive+0x1aa>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	3324      	adds	r3, #36	@ 0x24
 80029c8:	687a      	ldr	r2, [r7, #4]
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 fdcf 	bl	8003570 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80029d2:	6a38      	ldr	r0, [r7, #32]
 80029d4:	f000 f8ca 	bl	8002b6c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80029d8:	f000 fbee 	bl	80031b8 <xTaskResumeAll>
 80029dc:	4603      	mov	r3, r0
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f47f af69 	bne.w	80028b6 <xQueueReceive+0x6a>
                {
                    portYIELD_WITHIN_API();
 80029e4:	4b18      	ldr	r3, [pc, #96]	@ (8002a48 <xQueueReceive+0x1fc>)
 80029e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	f3bf 8f4f 	dsb	sy
 80029f0:	f3bf 8f6f 	isb	sy
 80029f4:	e75f      	b.n	80028b6 <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80029f6:	6a38      	ldr	r0, [r7, #32]
 80029f8:	f000 f8b8 	bl	8002b6c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80029fc:	f000 fbdc 	bl	80031b8 <xTaskResumeAll>
 8002a00:	e759      	b.n	80028b6 <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002a02:	6a38      	ldr	r0, [r7, #32]
 8002a04:	f000 f8b2 	bl	8002b6c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a08:	f000 fbd6 	bl	80031b8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a0c:	6a38      	ldr	r0, [r7, #32]
 8002a0e:	f000 f90c 	bl	8002c2a <prvIsQueueEmpty>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f43f af4e 	beq.w	80028b6 <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a1a:	6a3b      	ldr	r3, [r7, #32]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f003 fc53 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 8002a22:	4604      	mov	r4, r0
 8002a24:	2000      	movs	r0, #0
 8002a26:	f003 fc4f 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2101      	movs	r1, #1
 8002a30:	9100      	str	r1, [sp, #0]
 8002a32:	4621      	mov	r1, r4
 8002a34:	205c      	movs	r0, #92	@ 0x5c
 8002a36:	f002 ffab 	bl	8005990 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002a3a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	372c      	adds	r7, #44	@ 0x2c
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd90      	pop	{r4, r7, pc}
 8002a44:	08006f68 	.word	0x08006f68
 8002a48:	e000ed04 	.word	0xe000ed04

08002a4c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b086      	sub	sp, #24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a60:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10d      	bne.n	8002a86 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d14d      	bne.n	8002b0e <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f000 ff74 	bl	8003964 <xTaskPriorityDisinherit>
 8002a7c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	609a      	str	r2, [r3, #8]
 8002a84:	e043      	b.n	8002b0e <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d119      	bne.n	8002ac0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6858      	ldr	r0, [r3, #4]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a94:	461a      	mov	r2, r3
 8002a96:	68b9      	ldr	r1, [r7, #8]
 8002a98:	f003 ffdb 	bl	8006a52 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	685a      	ldr	r2, [r3, #4]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa4:	441a      	add	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d32b      	bcc.n	8002b0e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	605a      	str	r2, [r3, #4]
 8002abe:	e026      	b.n	8002b0e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	68d8      	ldr	r0, [r3, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac8:	461a      	mov	r2, r3
 8002aca:	68b9      	ldr	r1, [r7, #8]
 8002acc:	f003 ffc1 	bl	8006a52 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	68da      	ldr	r2, [r3, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad8:	425b      	negs	r3, r3
 8002ada:	441a      	add	r2, r3
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d207      	bcs.n	8002afc <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	689a      	ldr	r2, [r3, #8]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af4:	425b      	negs	r3, r3
 8002af6:	441a      	add	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d105      	bne.n	8002b0e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d002      	beq.n	8002b0e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002b16:	697b      	ldr	r3, [r7, #20]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d018      	beq.n	8002b64 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68da      	ldr	r2, [r3, #12]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3a:	441a      	add	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d303      	bcc.n	8002b54 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	68d9      	ldr	r1, [r3, #12]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	6838      	ldr	r0, [r7, #0]
 8002b60:	f003 ff77 	bl	8006a52 <memcpy>
    }
}
 8002b64:	bf00      	nop
 8002b66:	3708      	adds	r7, #8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002b74:	f001 fc28 	bl	80043c8 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b7e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b80:	e01e      	b.n	8002bc0 <prvUnlockQueue+0x54>
        {
            /* Data was posted while the queue was locked.  Are any tasks
             * blocked waiting for data to become available? */
            #if ( configUSE_QUEUE_SETS == 1 )
                {
                    if( pxQueue->pxQueueSetContainer != NULL )
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d008      	beq.n	8002b9c <prvUnlockQueue+0x30>
                    {
                        if( prvNotifyQueueSetContainer( pxQueue ) != pdFALSE )
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 f8e2 	bl	8002d54 <prvNotifyQueueSetContainer>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d010      	beq.n	8002bb8 <prvUnlockQueue+0x4c>
                        {
                            /* The queue is a member of a queue set, and posting to
                             * the queue set caused a higher priority task to unblock.
                             * A context switch is required. */
                            vTaskMissedYield();
 8002b96:	f000 fe09 	bl	80037ac <vTaskMissedYield>
 8002b9a:	e00d      	b.n	8002bb8 <prvUnlockQueue+0x4c>
                    else
                    {
                        /* Tasks that are removed from the event list will get
                         * added to the pending ready list as the scheduler is still
                         * suspended. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d012      	beq.n	8002bca <prvUnlockQueue+0x5e>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	3324      	adds	r3, #36	@ 0x24
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f000 fd2b 	bl	8003604 <xTaskRemoveFromEventList>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <prvUnlockQueue+0x4c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                vTaskMissedYield();
 8002bb4:	f000 fdfa 	bl	80037ac <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	dcdc      	bgt.n	8002b82 <prvUnlockQueue+0x16>
 8002bc8:	e000      	b.n	8002bcc <prvUnlockQueue+0x60>
                            break;
 8002bca:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	22ff      	movs	r2, #255	@ 0xff
 8002bd0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002bd4:	f001 fc24 	bl	8004420 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002bd8:	f001 fbf6 	bl	80043c8 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002be2:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002be4:	e011      	b.n	8002c0a <prvUnlockQueue+0x9e>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	691b      	ldr	r3, [r3, #16]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d012      	beq.n	8002c14 <prvUnlockQueue+0xa8>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3310      	adds	r3, #16
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 fd06 	bl	8003604 <xTaskRemoveFromEventList>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d001      	beq.n	8002c02 <prvUnlockQueue+0x96>
                {
                    vTaskMissedYield();
 8002bfe:	f000 fdd5 	bl	80037ac <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002c02:	7bbb      	ldrb	r3, [r7, #14]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	dce9      	bgt.n	8002be6 <prvUnlockQueue+0x7a>
 8002c12:	e000      	b.n	8002c16 <prvUnlockQueue+0xaa>
            }
            else
            {
                break;
 8002c14:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	22ff      	movs	r2, #255	@ 0xff
 8002c1a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002c1e:	f001 fbff 	bl	8004420 <vPortExitCritical>
}
 8002c22:	bf00      	nop
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b084      	sub	sp, #16
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c32:	f001 fbc9 	bl	80043c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d102      	bne.n	8002c44 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	e001      	b.n	8002c48 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c48:	f001 fbea 	bl	8004420 <vPortExitCritical>

    return xReturn;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b084      	sub	sp, #16
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c5e:	f001 fbb3 	bl	80043c8 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d102      	bne.n	8002c74 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	60fb      	str	r3, [r7, #12]
 8002c72:	e001      	b.n	8002c78 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002c74:	2300      	movs	r3, #0
 8002c76:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c78:	f001 fbd2 	bl	8004420 <vPortExitCritical>

    return xReturn;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002c92:	2300      	movs	r3, #0
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	e01e      	b.n	8002cd6 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002c98:	4a13      	ldr	r2, [pc, #76]	@ (8002ce8 <vQueueAddToRegistry+0x60>)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d115      	bne.n	8002cd0 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ca4:	4910      	ldr	r1, [pc, #64]	@ (8002ce8 <vQueueAddToRegistry+0x60>)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	683a      	ldr	r2, [r7, #0]
 8002caa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002cae:	4a0e      	ldr	r2, [pc, #56]	@ (8002ce8 <vQueueAddToRegistry+0x60>)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f003 fb03 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 8002cc2:	4601      	mov	r1, r0
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	2071      	movs	r0, #113	@ 0x71
 8002cca:	f002 fd91 	bl	80057f0 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002cce:	e006      	b.n	8002cde <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	60fb      	str	r3, [r7, #12]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2b07      	cmp	r3, #7
 8002cda:	d9dd      	bls.n	8002c98 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002cdc:	bf00      	nop
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	200000d4 	.word	0x200000d4

08002cec <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002cfc:	f001 fb64 	bl	80043c8 <vPortEnterCritical>
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d06:	b25b      	sxtb	r3, r3
 8002d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0c:	d103      	bne.n	8002d16 <vQueueWaitForMessageRestricted+0x2a>
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d1c:	b25b      	sxtb	r3, r3
 8002d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d22:	d103      	bne.n	8002d2c <vQueueWaitForMessageRestricted+0x40>
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d2c:	f001 fb78 	bl	8004420 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d106      	bne.n	8002d46 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	3324      	adds	r3, #36	@ 0x24
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	68b9      	ldr	r1, [r7, #8]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 fc35 	bl	80035b0 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002d46:	6978      	ldr	r0, [r7, #20]
 8002d48:	f7ff ff10 	bl	8002b6c <prvUnlockQueue>
    }
 8002d4c:	bf00      	nop
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <prvNotifyQueueSetContainer>:
/*-----------------------------------------------------------*/

#if ( configUSE_QUEUE_SETS == 1 )

    static BaseType_t prvNotifyQueueSetContainer( const Queue_t * const pxQueue )
    {
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b088      	sub	sp, #32
 8002d58:	af02      	add	r7, sp, #8
 8002d5a:	6078      	str	r0, [r7, #4]
        Queue_t * pxQueueSetContainer = pxQueue->pxQueueSetContainer;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d60:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]

        /* This function must be called form a critical section. */

        configASSERT( pxQueueSetContainer );
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d104      	bne.n	8002d76 <prvNotifyQueueSetContainer+0x22>
 8002d6c:	492a      	ldr	r1, [pc, #168]	@ (8002e18 <prvNotifyQueueSetContainer+0xc4>)
 8002d6e:	f640 309a 	movw	r0, #2970	@ 0xb9a
 8002d72:	f7fd fe0d 	bl	8000990 <vAssertCalled>
        configASSERT( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength );
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d304      	bcc.n	8002d8c <prvNotifyQueueSetContainer+0x38>
 8002d82:	4925      	ldr	r1, [pc, #148]	@ (8002e18 <prvNotifyQueueSetContainer+0xc4>)
 8002d84:	f640 309b 	movw	r0, #2971	@ 0xb9b
 8002d88:	f7fd fe02 	bl	8000990 <vAssertCalled>

        if( pxQueueSetContainer->uxMessagesWaiting < pxQueueSetContainer->uxLength )
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d23a      	bcs.n	8002e0e <prvNotifyQueueSetContainer+0xba>
        {
            const int8_t cTxLock = pxQueueSetContainer->cTxLock;
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d9e:	73fb      	strb	r3, [r7, #15]

            traceQUEUE_SET_SEND( pxQueueSetContainer );
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	4618      	mov	r0, r3
 8002da4:	f003 fa90 	bl	80062c8 <SEGGER_SYSVIEW_ShrinkId>
 8002da8:	4601      	mov	r1, r0
 8002daa:	2300      	movs	r3, #0
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	2300      	movs	r3, #0
 8002db0:	2200      	movs	r2, #0
 8002db2:	205a      	movs	r0, #90	@ 0x5a
 8002db4:	f002 fdec 	bl	8005990 <SEGGER_SYSVIEW_RecordU32x4>

            /* The data copied is the handle of the queue that contains data. */
            xReturn = prvCopyDataToQueue( pxQueueSetContainer, &pxQueue, queueSEND_TO_BACK );
 8002db8:	1d3b      	adds	r3, r7, #4
 8002dba:	2200      	movs	r2, #0
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	6938      	ldr	r0, [r7, #16]
 8002dc0:	f7ff fe44 	bl	8002a4c <prvCopyDataToQueue>
 8002dc4:	6178      	str	r0, [r7, #20]

            if( cTxLock == queueUNLOCKED )
 8002dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dce:	d10e      	bne.n	8002dee <prvNotifyQueueSetContainer+0x9a>
            {
                if( listLIST_IS_EMPTY( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d01a      	beq.n	8002e0e <prvNotifyQueueSetContainer+0xba>
                {
                    if( xTaskRemoveFromEventList( &( pxQueueSetContainer->xTasksWaitingToReceive ) ) != pdFALSE )
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	3324      	adds	r3, #36	@ 0x24
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fc11 	bl	8003604 <xTaskRemoveFromEventList>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d012      	beq.n	8002e0e <prvNotifyQueueSetContainer+0xba>
                    {
                        /* The task waiting has a higher priority. */
                        xReturn = pdTRUE;
 8002de8:	2301      	movs	r3, #1
 8002dea:	617b      	str	r3, [r7, #20]
 8002dec:	e00f      	b.n	8002e0e <prvNotifyQueueSetContainer+0xba>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                configASSERT( cTxLock != queueINT8_MAX );
 8002dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df2:	2b7f      	cmp	r3, #127	@ 0x7f
 8002df4:	d104      	bne.n	8002e00 <prvNotifyQueueSetContainer+0xac>
 8002df6:	4908      	ldr	r1, [pc, #32]	@ (8002e18 <prvNotifyQueueSetContainer+0xc4>)
 8002df8:	f640 30bb 	movw	r0, #3003	@ 0xbbb
 8002dfc:	f7fd fdc8 	bl	8000990 <vAssertCalled>

                pxQueueSetContainer->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002e00:	7bfb      	ldrb	r3, [r7, #15]
 8002e02:	3301      	adds	r3, #1
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	b25a      	sxtb	r2, r3
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002e0e:	697b      	ldr	r3, [r7, #20]
    }
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	08006f68 	.word	0x08006f68

08002e1c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08c      	sub	sp, #48	@ 0x30
 8002e20:	af04      	add	r7, sp, #16
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002e2c:	88fb      	ldrh	r3, [r7, #6]
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f001 fbe1 	bl	80045f8 <pvPortMalloc>
 8002e36:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00e      	beq.n	8002e5c <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002e3e:	2058      	movs	r0, #88	@ 0x58
 8002e40:	f001 fbda 	bl	80045f8 <pvPortMalloc>
 8002e44:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d003      	beq.n	8002e54 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e52:	e005      	b.n	8002e60 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002e54:	6978      	ldr	r0, [r7, #20]
 8002e56:	f001 fc9d 	bl	8004794 <vPortFree>
 8002e5a:	e001      	b.n	8002e60 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d013      	beq.n	8002e8e <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002e66:	88fa      	ldrh	r2, [r7, #6]
 8002e68:	2300      	movs	r3, #0
 8002e6a:	9303      	str	r3, [sp, #12]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	9302      	str	r3, [sp, #8]
 8002e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e72:	9301      	str	r3, [sp, #4]
 8002e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e76:	9300      	str	r3, [sp, #0]
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	68b9      	ldr	r1, [r7, #8]
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 f80f 	bl	8002ea0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002e82:	69f8      	ldr	r0, [r7, #28]
 8002e84:	f000 f89e 	bl	8002fc4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	61bb      	str	r3, [r7, #24]
 8002e8c:	e002      	b.n	8002e94 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e92:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002e94:	69bb      	ldr	r3, [r7, #24]
    }
 8002e96:	4618      	mov	r0, r3
 8002e98:	3720      	adds	r7, #32
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
	...

08002ea0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	21a5      	movs	r1, #165	@ 0xa5
 8002eba:	f003 fd67 	bl	800698c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ec0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8002ec8:	440b      	add	r3, r1
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	4413      	add	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f023 0307 	bic.w	r3, r3, #7
 8002ed6:	613b      	str	r3, [r7, #16]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d004      	beq.n	8002eec <prvInitialiseNewTask+0x4c>
 8002ee2:	4937      	ldr	r1, [pc, #220]	@ (8002fc0 <prvInitialiseNewTask+0x120>)
 8002ee4:	f240 3069 	movw	r0, #873	@ 0x369
 8002ee8:	f7fd fd52 	bl	8000990 <vAssertCalled>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d01f      	beq.n	8002f32 <prvInitialiseNewTask+0x92>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	e012      	b.n	8002f1e <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002ef8:	68ba      	ldr	r2, [r7, #8]
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	4413      	add	r3, r2
 8002efe:	7819      	ldrb	r1, [r3, #0]
 8002f00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	4413      	add	r3, r2
 8002f06:	3334      	adds	r3, #52	@ 0x34
 8002f08:	460a      	mov	r2, r1
 8002f0a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	4413      	add	r3, r2
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d006      	beq.n	8002f26 <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	2b09      	cmp	r3, #9
 8002f22:	d9e9      	bls.n	8002ef8 <prvInitialiseNewTask+0x58>
 8002f24:	e000      	b.n	8002f28 <prvInitialiseNewTask+0x88>
            {
                break;
 8002f26:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002f30:	e003      	b.n	8002f3a <prvInitialiseNewTask+0x9a>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002f3a:	6a3b      	ldr	r3, [r7, #32]
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d901      	bls.n	8002f44 <prvInitialiseNewTask+0xa4>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002f40:	2304      	movs	r3, #4
 8002f42:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f46:	6a3a      	ldr	r2, [r7, #32]
 8002f48:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f4c:	6a3a      	ldr	r2, [r7, #32]
 8002f4e:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f52:	2200      	movs	r2, #0
 8002f54:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f58:	3304      	adds	r3, #4
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff f918 	bl	8002190 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f62:	3318      	adds	r3, #24
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff f913 	bl	8002190 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f6e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	f1c3 0205 	rsb	r2, r3, #5
 8002f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f78:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002f7e:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f82:	3350      	adds	r3, #80	@ 0x50
 8002f84:	2204      	movs	r2, #4
 8002f86:	2100      	movs	r1, #0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f003 fcff 	bl	800698c <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f90:	3354      	adds	r3, #84	@ 0x54
 8002f92:	2201      	movs	r2, #1
 8002f94:	2100      	movs	r1, #0
 8002f96:	4618      	mov	r0, r3
 8002f98:	f003 fcf8 	bl	800698c <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	68f9      	ldr	r1, [r7, #12]
 8002fa0:	6938      	ldr	r0, [r7, #16]
 8002fa2:	f001 f907 	bl	80041b4 <pxPortInitialiseStack>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002faa:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002fb6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002fb8:	bf00      	nop
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	08006f88 	.word	0x08006f88

08002fc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002fc4:	b5b0      	push	{r4, r5, r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002fcc:	f001 f9fc 	bl	80043c8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002fd0:	4b3b      	ldr	r3, [pc, #236]	@ (80030c0 <prvAddNewTaskToReadyList+0xfc>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	4a3a      	ldr	r2, [pc, #232]	@ (80030c0 <prvAddNewTaskToReadyList+0xfc>)
 8002fd8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002fda:	4b3a      	ldr	r3, [pc, #232]	@ (80030c4 <prvAddNewTaskToReadyList+0x100>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002fe2:	4a38      	ldr	r2, [pc, #224]	@ (80030c4 <prvAddNewTaskToReadyList+0x100>)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002fe8:	4b35      	ldr	r3, [pc, #212]	@ (80030c0 <prvAddNewTaskToReadyList+0xfc>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d110      	bne.n	8003012 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002ff0:	f000 fc00 	bl	80037f4 <prvInitialiseTaskLists>
 8002ff4:	e00d      	b.n	8003012 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002ff6:	4b34      	ldr	r3, [pc, #208]	@ (80030c8 <prvAddNewTaskToReadyList+0x104>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d109      	bne.n	8003012 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002ffe:	4b31      	ldr	r3, [pc, #196]	@ (80030c4 <prvAddNewTaskToReadyList+0x100>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003008:	429a      	cmp	r2, r3
 800300a:	d802      	bhi.n	8003012 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800300c:	4a2d      	ldr	r2, [pc, #180]	@ (80030c4 <prvAddNewTaskToReadyList+0x100>)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003012:	4b2e      	ldr	r3, [pc, #184]	@ (80030cc <prvAddNewTaskToReadyList+0x108>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	3301      	adds	r3, #1
 8003018:	4a2c      	ldr	r2, [pc, #176]	@ (80030cc <prvAddNewTaskToReadyList+0x108>)
 800301a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800301c:	4b2b      	ldr	r3, [pc, #172]	@ (80030cc <prvAddNewTaskToReadyList+0x108>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d016      	beq.n	8003058 <prvAddNewTaskToReadyList+0x94>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4618      	mov	r0, r3
 800302e:	f003 f825 	bl	800607c <SEGGER_SYSVIEW_OnTaskCreate>
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003042:	461d      	mov	r5, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	461c      	mov	r4, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800304e:	1ae3      	subs	r3, r4, r3
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	462b      	mov	r3, r5
 8003054:	f001 fd62 	bl	8004b1c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	4618      	mov	r0, r3
 800305c:	f003 f892 	bl	8006184 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003064:	2201      	movs	r2, #1
 8003066:	409a      	lsls	r2, r3
 8003068:	4b19      	ldr	r3, [pc, #100]	@ (80030d0 <prvAddNewTaskToReadyList+0x10c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4313      	orrs	r3, r2
 800306e:	4a18      	ldr	r2, [pc, #96]	@ (80030d0 <prvAddNewTaskToReadyList+0x10c>)
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	4a15      	ldr	r2, [pc, #84]	@ (80030d4 <prvAddNewTaskToReadyList+0x110>)
 8003080:	441a      	add	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	3304      	adds	r3, #4
 8003086:	4619      	mov	r1, r3
 8003088:	4610      	mov	r0, r2
 800308a:	f7ff f88e 	bl	80021aa <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800308e:	f001 f9c7 	bl	8004420 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003092:	4b0d      	ldr	r3, [pc, #52]	@ (80030c8 <prvAddNewTaskToReadyList+0x104>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00e      	beq.n	80030b8 <prvAddNewTaskToReadyList+0xf4>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800309a:	4b0a      	ldr	r3, [pc, #40]	@ (80030c4 <prvAddNewTaskToReadyList+0x100>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d207      	bcs.n	80030b8 <prvAddNewTaskToReadyList+0xf4>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80030a8:	4b0b      	ldr	r3, [pc, #44]	@ (80030d8 <prvAddNewTaskToReadyList+0x114>)
 80030aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030ae:	601a      	str	r2, [r3, #0]
 80030b0:	f3bf 8f4f 	dsb	sy
 80030b4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80030b8:	bf00      	nop
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bdb0      	pop	{r4, r5, r7, pc}
 80030c0:	200001ec 	.word	0x200001ec
 80030c4:	20000114 	.word	0x20000114
 80030c8:	200001f8 	.word	0x200001f8
 80030cc:	20000208 	.word	0x20000208
 80030d0:	200001f4 	.word	0x200001f4
 80030d4:	20000118 	.word	0x20000118
 80030d8:	e000ed04 	.word	0xe000ed04

080030dc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b084      	sub	sp, #16
 80030e0:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80030e2:	4b25      	ldr	r3, [pc, #148]	@ (8003178 <vTaskStartScheduler+0x9c>)
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	2300      	movs	r3, #0
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	2300      	movs	r3, #0
 80030ec:	2282      	movs	r2, #130	@ 0x82
 80030ee:	4923      	ldr	r1, [pc, #140]	@ (800317c <vTaskStartScheduler+0xa0>)
 80030f0:	4823      	ldr	r0, [pc, #140]	@ (8003180 <vTaskStartScheduler+0xa4>)
 80030f2:	f7ff fe93 	bl	8002e1c <xTaskCreate>
 80030f6:	6078      	str	r0, [r7, #4]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d102      	bne.n	8003104 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80030fe:	f000 fd1f 	bl	8003b40 <xTimerCreateTimerTask>
 8003102:	6078      	str	r0, [r7, #4]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b01      	cmp	r3, #1
 8003108:	d126      	bne.n	8003158 <vTaskStartScheduler+0x7c>
        __asm volatile
 800310a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800310e:	b672      	cpsid	i
 8003110:	f383 8811 	msr	BASEPRI, r3
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	b662      	cpsie	i
 800311e:	603b      	str	r3, [r7, #0]
    }
 8003120:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003122:	4b18      	ldr	r3, [pc, #96]	@ (8003184 <vTaskStartScheduler+0xa8>)
 8003124:	f04f 32ff 	mov.w	r2, #4294967295
 8003128:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800312a:	4b17      	ldr	r3, [pc, #92]	@ (8003188 <vTaskStartScheduler+0xac>)
 800312c:	2201      	movs	r2, #1
 800312e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003130:	4b16      	ldr	r3, [pc, #88]	@ (800318c <vTaskStartScheduler+0xb0>)
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003136:	4b16      	ldr	r3, [pc, #88]	@ (8003190 <vTaskStartScheduler+0xb4>)
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	4b0f      	ldr	r3, [pc, #60]	@ (8003178 <vTaskStartScheduler+0x9c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d102      	bne.n	8003148 <vTaskStartScheduler+0x6c>
 8003142:	f002 ff7f 	bl	8006044 <SEGGER_SYSVIEW_OnIdle>
 8003146:	e004      	b.n	8003152 <vTaskStartScheduler+0x76>
 8003148:	4b11      	ldr	r3, [pc, #68]	@ (8003190 <vTaskStartScheduler+0xb4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f002 ffd7 	bl	8006100 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003152:	f001 f8b7 	bl	80042c4 <xPortStartScheduler>
 8003156:	e008      	b.n	800316a <vTaskStartScheduler+0x8e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800315e:	d104      	bne.n	800316a <vTaskStartScheduler+0x8e>
 8003160:	490c      	ldr	r1, [pc, #48]	@ (8003194 <vTaskStartScheduler+0xb8>)
 8003162:	f640 0041 	movw	r0, #2113	@ 0x841
 8003166:	f7fd fc13 	bl	8000990 <vAssertCalled>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800316a:	4b0b      	ldr	r3, [pc, #44]	@ (8003198 <vTaskStartScheduler+0xbc>)
 800316c:	681b      	ldr	r3, [r3, #0]
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	20000210 	.word	0x20000210
 800317c:	08006fa8 	.word	0x08006fa8
 8003180:	080037c5 	.word	0x080037c5
 8003184:	2000020c 	.word	0x2000020c
 8003188:	200001f8 	.word	0x200001f8
 800318c:	200001f0 	.word	0x200001f0
 8003190:	20000114 	.word	0x20000114
 8003194:	08006f88 	.word	0x08006f88
 8003198:	08007140 	.word	0x08007140

0800319c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80031a0:	4b04      	ldr	r3, [pc, #16]	@ (80031b4 <vTaskSuspendAll+0x18>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	3301      	adds	r3, #1
 80031a6:	4a03      	ldr	r2, [pc, #12]	@ (80031b4 <vTaskSuspendAll+0x18>)
 80031a8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80031aa:	bf00      	nop
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	20000214 	.word	0x20000214

080031b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80031c2:	2300      	movs	r3, #0
 80031c4:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80031c6:	4b40      	ldr	r3, [pc, #256]	@ (80032c8 <xTaskResumeAll+0x110>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d104      	bne.n	80031d8 <xTaskResumeAll+0x20>
 80031ce:	493f      	ldr	r1, [pc, #252]	@ (80032cc <xTaskResumeAll+0x114>)
 80031d0:	f640 00b4 	movw	r0, #2228	@ 0x8b4
 80031d4:	f7fd fbdc 	bl	8000990 <vAssertCalled>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80031d8:	f001 f8f6 	bl	80043c8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80031dc:	4b3a      	ldr	r3, [pc, #232]	@ (80032c8 <xTaskResumeAll+0x110>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	3b01      	subs	r3, #1
 80031e2:	4a39      	ldr	r2, [pc, #228]	@ (80032c8 <xTaskResumeAll+0x110>)
 80031e4:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031e6:	4b38      	ldr	r3, [pc, #224]	@ (80032c8 <xTaskResumeAll+0x110>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d165      	bne.n	80032ba <xTaskResumeAll+0x102>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031ee:	4b38      	ldr	r3, [pc, #224]	@ (80032d0 <xTaskResumeAll+0x118>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d061      	beq.n	80032ba <xTaskResumeAll+0x102>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031f6:	e032      	b.n	800325e <xTaskResumeAll+0xa6>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031f8:	4b36      	ldr	r3, [pc, #216]	@ (80032d4 <xTaskResumeAll+0x11c>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	68db      	ldr	r3, [r3, #12]
 80031fe:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3318      	adds	r3, #24
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff f82d 	bl	8002264 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	3304      	adds	r3, #4
 800320e:	4618      	mov	r0, r3
 8003210:	f7ff f828 	bl	8002264 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4618      	mov	r0, r3
 8003218:	f002 ffb4 	bl	8006184 <SEGGER_SYSVIEW_OnTaskStartReady>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003220:	2201      	movs	r2, #1
 8003222:	409a      	lsls	r2, r3
 8003224:	4b2c      	ldr	r3, [pc, #176]	@ (80032d8 <xTaskResumeAll+0x120>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4313      	orrs	r3, r2
 800322a:	4a2b      	ldr	r2, [pc, #172]	@ (80032d8 <xTaskResumeAll+0x120>)
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4a28      	ldr	r2, [pc, #160]	@ (80032dc <xTaskResumeAll+0x124>)
 800323c:	441a      	add	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	3304      	adds	r3, #4
 8003242:	4619      	mov	r1, r3
 8003244:	4610      	mov	r0, r2
 8003246:	f7fe ffb0 	bl	80021aa <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800324e:	4b24      	ldr	r3, [pc, #144]	@ (80032e0 <xTaskResumeAll+0x128>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003254:	429a      	cmp	r2, r3
 8003256:	d302      	bcc.n	800325e <xTaskResumeAll+0xa6>
                    {
                        xYieldPending = pdTRUE;
 8003258:	4b22      	ldr	r3, [pc, #136]	@ (80032e4 <xTaskResumeAll+0x12c>)
 800325a:	2201      	movs	r2, #1
 800325c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800325e:	4b1d      	ldr	r3, [pc, #116]	@ (80032d4 <xTaskResumeAll+0x11c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1c8      	bne.n	80031f8 <xTaskResumeAll+0x40>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <xTaskResumeAll+0xb8>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800326c:	f000 fb40 	bl	80038f0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003270:	4b1d      	ldr	r3, [pc, #116]	@ (80032e8 <xTaskResumeAll+0x130>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d010      	beq.n	800329e <xTaskResumeAll+0xe6>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800327c:	f000 f85a 	bl	8003334 <xTaskIncrementTick>
 8003280:	4603      	mov	r3, r0
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <xTaskResumeAll+0xd4>
                            {
                                xYieldPending = pdTRUE;
 8003286:	4b17      	ldr	r3, [pc, #92]	@ (80032e4 <xTaskResumeAll+0x12c>)
 8003288:	2201      	movs	r2, #1
 800328a:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	3b01      	subs	r3, #1
 8003290:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f1      	bne.n	800327c <xTaskResumeAll+0xc4>

                        xPendedTicks = 0;
 8003298:	4b13      	ldr	r3, [pc, #76]	@ (80032e8 <xTaskResumeAll+0x130>)
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800329e:	4b11      	ldr	r3, [pc, #68]	@ (80032e4 <xTaskResumeAll+0x12c>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d009      	beq.n	80032ba <xTaskResumeAll+0x102>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80032a6:	2301      	movs	r3, #1
 80032a8:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80032aa:	4b10      	ldr	r3, [pc, #64]	@ (80032ec <xTaskResumeAll+0x134>)
 80032ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	f3bf 8f4f 	dsb	sy
 80032b6:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80032ba:	f001 f8b1 	bl	8004420 <vPortExitCritical>

    return xAlreadyYielded;
 80032be:	68bb      	ldr	r3, [r7, #8]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20000214 	.word	0x20000214
 80032cc:	08006f88 	.word	0x08006f88
 80032d0:	200001ec 	.word	0x200001ec
 80032d4:	200001ac 	.word	0x200001ac
 80032d8:	200001f4 	.word	0x200001f4
 80032dc:	20000118 	.word	0x20000118
 80032e0:	20000114 	.word	0x20000114
 80032e4:	20000200 	.word	0x20000200
 80032e8:	200001fc 	.word	0x200001fc
 80032ec:	e000ed04 	.word	0xe000ed04

080032f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80032f6:	4b05      	ldr	r3, [pc, #20]	@ (800330c <xTaskGetTickCount+0x1c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80032fc:	687b      	ldr	r3, [r7, #4]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	200001f0 	.word	0x200001f0

08003310 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003316:	f001 f933 	bl	8004580 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800331a:	2300      	movs	r3, #0
 800331c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800331e:	4b04      	ldr	r3, [pc, #16]	@ (8003330 <xTaskGetTickCountFromISR+0x20>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003324:	683b      	ldr	r3, [r7, #0]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	200001f0 	.word	0x200001f0

08003334 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b086      	sub	sp, #24
 8003338:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800333e:	4b4d      	ldr	r3, [pc, #308]	@ (8003474 <xTaskIncrementTick+0x140>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f040 808c 	bne.w	8003460 <xTaskIncrementTick+0x12c>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003348:	4b4b      	ldr	r3, [pc, #300]	@ (8003478 <xTaskIncrementTick+0x144>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3301      	adds	r3, #1
 800334e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003350:	4a49      	ldr	r2, [pc, #292]	@ (8003478 <xTaskIncrementTick+0x144>)
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d11a      	bne.n	8003392 <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 800335c:	4b47      	ldr	r3, [pc, #284]	@ (800347c <xTaskIncrementTick+0x148>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d004      	beq.n	8003370 <xTaskIncrementTick+0x3c>
 8003366:	4946      	ldr	r1, [pc, #280]	@ (8003480 <xTaskIncrementTick+0x14c>)
 8003368:	f640 20c7 	movw	r0, #2759	@ 0xac7
 800336c:	f7fd fb10 	bl	8000990 <vAssertCalled>
 8003370:	4b42      	ldr	r3, [pc, #264]	@ (800347c <xTaskIncrementTick+0x148>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	4b43      	ldr	r3, [pc, #268]	@ (8003484 <xTaskIncrementTick+0x150>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a40      	ldr	r2, [pc, #256]	@ (800347c <xTaskIncrementTick+0x148>)
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	4a41      	ldr	r2, [pc, #260]	@ (8003484 <xTaskIncrementTick+0x150>)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6013      	str	r3, [r2, #0]
 8003384:	4b40      	ldr	r3, [pc, #256]	@ (8003488 <xTaskIncrementTick+0x154>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	3301      	adds	r3, #1
 800338a:	4a3f      	ldr	r2, [pc, #252]	@ (8003488 <xTaskIncrementTick+0x154>)
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	f000 faaf 	bl	80038f0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003392:	4b3e      	ldr	r3, [pc, #248]	@ (800348c <xTaskIncrementTick+0x158>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	429a      	cmp	r2, r3
 800339a:	d34c      	bcc.n	8003436 <xTaskIncrementTick+0x102>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800339c:	4b37      	ldr	r3, [pc, #220]	@ (800347c <xTaskIncrementTick+0x148>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d104      	bne.n	80033b0 <xTaskIncrementTick+0x7c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033a6:	4b39      	ldr	r3, [pc, #228]	@ (800348c <xTaskIncrementTick+0x158>)
 80033a8:	f04f 32ff 	mov.w	r2, #4294967295
 80033ac:	601a      	str	r2, [r3, #0]
                    break;
 80033ae:	e042      	b.n	8003436 <xTaskIncrementTick+0x102>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033b0:	4b32      	ldr	r3, [pc, #200]	@ (800347c <xTaskIncrementTick+0x148>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d203      	bcs.n	80033d0 <xTaskIncrementTick+0x9c>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80033c8:	4a30      	ldr	r2, [pc, #192]	@ (800348c <xTaskIncrementTick+0x158>)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80033ce:	e032      	b.n	8003436 <xTaskIncrementTick+0x102>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	3304      	adds	r3, #4
 80033d4:	4618      	mov	r0, r3
 80033d6:	f7fe ff45 	bl	8002264 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d004      	beq.n	80033ec <xTaskIncrementTick+0xb8>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	3318      	adds	r3, #24
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fe ff3c 	bl	8002264 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f002 fec8 	bl	8006184 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f8:	2201      	movs	r2, #1
 80033fa:	409a      	lsls	r2, r3
 80033fc:	4b24      	ldr	r3, [pc, #144]	@ (8003490 <xTaskIncrementTick+0x15c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4313      	orrs	r3, r2
 8003402:	4a23      	ldr	r2, [pc, #140]	@ (8003490 <xTaskIncrementTick+0x15c>)
 8003404:	6013      	str	r3, [r2, #0]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800340a:	4613      	mov	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4a20      	ldr	r2, [pc, #128]	@ (8003494 <xTaskIncrementTick+0x160>)
 8003414:	441a      	add	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	3304      	adds	r3, #4
 800341a:	4619      	mov	r1, r3
 800341c:	4610      	mov	r0, r2
 800341e:	f7fe fec4 	bl	80021aa <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003426:	4b1c      	ldr	r3, [pc, #112]	@ (8003498 <xTaskIncrementTick+0x164>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800342c:	429a      	cmp	r2, r3
 800342e:	d3b5      	bcc.n	800339c <xTaskIncrementTick+0x68>
                            {
                                xSwitchRequired = pdTRUE;
 8003430:	2301      	movs	r3, #1
 8003432:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003434:	e7b2      	b.n	800339c <xTaskIncrementTick+0x68>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003436:	4b18      	ldr	r3, [pc, #96]	@ (8003498 <xTaskIncrementTick+0x164>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800343c:	4915      	ldr	r1, [pc, #84]	@ (8003494 <xTaskIncrementTick+0x160>)
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d901      	bls.n	8003452 <xTaskIncrementTick+0x11e>
                {
                    xSwitchRequired = pdTRUE;
 800344e:	2301      	movs	r3, #1
 8003450:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003452:	4b12      	ldr	r3, [pc, #72]	@ (800349c <xTaskIncrementTick+0x168>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d007      	beq.n	800346a <xTaskIncrementTick+0x136>
                {
                    xSwitchRequired = pdTRUE;
 800345a:	2301      	movs	r3, #1
 800345c:	617b      	str	r3, [r7, #20]
 800345e:	e004      	b.n	800346a <xTaskIncrementTick+0x136>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003460:	4b0f      	ldr	r3, [pc, #60]	@ (80034a0 <xTaskIncrementTick+0x16c>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	3301      	adds	r3, #1
 8003466:	4a0e      	ldr	r2, [pc, #56]	@ (80034a0 <xTaskIncrementTick+0x16c>)
 8003468:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800346a:	697b      	ldr	r3, [r7, #20]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	20000214 	.word	0x20000214
 8003478:	200001f0 	.word	0x200001f0
 800347c:	200001a4 	.word	0x200001a4
 8003480:	08006f88 	.word	0x08006f88
 8003484:	200001a8 	.word	0x200001a8
 8003488:	20000204 	.word	0x20000204
 800348c:	2000020c 	.word	0x2000020c
 8003490:	200001f4 	.word	0x200001f4
 8003494:	20000118 	.word	0x20000118
 8003498:	20000114 	.word	0x20000114
 800349c:	20000200 	.word	0x20000200
 80034a0:	200001fc 	.word	0x200001fc

080034a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80034aa:	4b2a      	ldr	r3, [pc, #168]	@ (8003554 <vTaskSwitchContext+0xb0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80034b2:	4b29      	ldr	r3, [pc, #164]	@ (8003558 <vTaskSwitchContext+0xb4>)
 80034b4:	2201      	movs	r2, #1
 80034b6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80034b8:	e047      	b.n	800354a <vTaskSwitchContext+0xa6>
        xYieldPending = pdFALSE;
 80034ba:	4b27      	ldr	r3, [pc, #156]	@ (8003558 <vTaskSwitchContext+0xb4>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034c0:	4b26      	ldr	r3, [pc, #152]	@ (800355c <vTaskSwitchContext+0xb8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	607b      	str	r3, [r7, #4]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	fab3 f383 	clz	r3, r3
 80034cc:	70fb      	strb	r3, [r7, #3]
            return ucReturn;
 80034ce:	78fb      	ldrb	r3, [r7, #3]
 80034d0:	f1c3 031f 	rsb	r3, r3, #31
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	4922      	ldr	r1, [pc, #136]	@ (8003560 <vTaskSwitchContext+0xbc>)
 80034d8:	68fa      	ldr	r2, [r7, #12]
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d104      	bne.n	80034f4 <vTaskSwitchContext+0x50>
 80034ea:	491e      	ldr	r1, [pc, #120]	@ (8003564 <vTaskSwitchContext+0xc0>)
 80034ec:	f640 4002 	movw	r0, #3074	@ 0xc02
 80034f0:	f7fd fa4e 	bl	8000990 <vAssertCalled>
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	4613      	mov	r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4a18      	ldr	r2, [pc, #96]	@ (8003560 <vTaskSwitchContext+0xbc>)
 8003500:	4413      	add	r3, r2
 8003502:	60bb      	str	r3, [r7, #8]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	605a      	str	r2, [r3, #4]
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	685a      	ldr	r2, [r3, #4]
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	3308      	adds	r3, #8
 8003516:	429a      	cmp	r2, r3
 8003518:	d104      	bne.n	8003524 <vTaskSwitchContext+0x80>
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	685a      	ldr	r2, [r3, #4]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	605a      	str	r2, [r3, #4]
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	4a0f      	ldr	r2, [pc, #60]	@ (8003568 <vTaskSwitchContext+0xc4>)
 800352c:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800352e:	4b0e      	ldr	r3, [pc, #56]	@ (8003568 <vTaskSwitchContext+0xc4>)
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	4b0e      	ldr	r3, [pc, #56]	@ (800356c <vTaskSwitchContext+0xc8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d102      	bne.n	8003540 <vTaskSwitchContext+0x9c>
 800353a:	f002 fd83 	bl	8006044 <SEGGER_SYSVIEW_OnIdle>
}
 800353e:	e004      	b.n	800354a <vTaskSwitchContext+0xa6>
        traceTASK_SWITCHED_IN();
 8003540:	4b09      	ldr	r3, [pc, #36]	@ (8003568 <vTaskSwitchContext+0xc4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4618      	mov	r0, r3
 8003546:	f002 fddb 	bl	8006100 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800354a:	bf00      	nop
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20000214 	.word	0x20000214
 8003558:	20000200 	.word	0x20000200
 800355c:	200001f4 	.word	0x200001f4
 8003560:	20000118 	.word	0x20000118
 8003564:	08006f88 	.word	0x08006f88
 8003568:	20000114 	.word	0x20000114
 800356c:	20000210 	.word	0x20000210

08003570 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d104      	bne.n	800358a <vTaskPlaceOnEventList+0x1a>
 8003580:	4909      	ldr	r1, [pc, #36]	@ (80035a8 <vTaskPlaceOnEventList+0x38>)
 8003582:	f640 401c 	movw	r0, #3100	@ 0xc1c
 8003586:	f7fd fa03 	bl	8000990 <vAssertCalled>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800358a:	4b08      	ldr	r3, [pc, #32]	@ (80035ac <vTaskPlaceOnEventList+0x3c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3318      	adds	r3, #24
 8003590:	4619      	mov	r1, r3
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fe fe2d 	bl	80021f2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003598:	2101      	movs	r1, #1
 800359a:	6838      	ldr	r0, [r7, #0]
 800359c:	f000 fa58 	bl	8003a50 <prvAddCurrentTaskToDelayedList>
}
 80035a0:	bf00      	nop
 80035a2:	3708      	adds	r7, #8
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	08006f88 	.word	0x08006f88
 80035ac:	20000114 	.word	0x20000114

080035b0 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d104      	bne.n	80035cc <vTaskPlaceOnEventListRestricted+0x1c>
 80035c2:	490e      	ldr	r1, [pc, #56]	@ (80035fc <vTaskPlaceOnEventListRestricted+0x4c>)
 80035c4:	f640 404b 	movw	r0, #3147	@ 0xc4b
 80035c8:	f7fd f9e2 	bl	8000990 <vAssertCalled>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003600 <vTaskPlaceOnEventListRestricted+0x50>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3318      	adds	r3, #24
 80035d2:	4619      	mov	r1, r3
 80035d4:	68f8      	ldr	r0, [r7, #12]
 80035d6:	f7fe fde8 	bl	80021aa <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <vTaskPlaceOnEventListRestricted+0x36>
        {
            xTicksToWait = portMAX_DELAY;
 80035e0:	f04f 33ff 	mov.w	r3, #4294967295
 80035e4:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80035e6:	2024      	movs	r0, #36	@ 0x24
 80035e8:	f002 f8a8 	bl	800573c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035ec:	6879      	ldr	r1, [r7, #4]
 80035ee:	68b8      	ldr	r0, [r7, #8]
 80035f0:	f000 fa2e 	bl	8003a50 <prvAddCurrentTaskToDelayedList>
    }
 80035f4:	bf00      	nop
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}
 80035fc:	08006f88 	.word	0x08006f88
 8003600:	20000114 	.word	0x20000114

08003604 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b084      	sub	sp, #16
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	60bb      	str	r3, [r7, #8]
    configASSERT( pxUnblockedTCB );
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d104      	bne.n	8003624 <xTaskRemoveFromEventList+0x20>
 800361a:	4924      	ldr	r1, [pc, #144]	@ (80036ac <xTaskRemoveFromEventList+0xa8>)
 800361c:	f640 407b 	movw	r0, #3195	@ 0xc7b
 8003620:	f7fd f9b6 	bl	8000990 <vAssertCalled>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	3318      	adds	r3, #24
 8003628:	4618      	mov	r0, r3
 800362a:	f7fe fe1b 	bl	8002264 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800362e:	4b20      	ldr	r3, [pc, #128]	@ (80036b0 <xTaskRemoveFromEventList+0xac>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d120      	bne.n	8003678 <xTaskRemoveFromEventList+0x74>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	3304      	adds	r3, #4
 800363a:	4618      	mov	r0, r3
 800363c:	f7fe fe12 	bl	8002264 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4618      	mov	r0, r3
 8003644:	f002 fd9e 	bl	8006184 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800364c:	2201      	movs	r2, #1
 800364e:	409a      	lsls	r2, r3
 8003650:	4b18      	ldr	r3, [pc, #96]	@ (80036b4 <xTaskRemoveFromEventList+0xb0>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4313      	orrs	r3, r2
 8003656:	4a17      	ldr	r2, [pc, #92]	@ (80036b4 <xTaskRemoveFromEventList+0xb0>)
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800365e:	4613      	mov	r3, r2
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4a14      	ldr	r2, [pc, #80]	@ (80036b8 <xTaskRemoveFromEventList+0xb4>)
 8003668:	441a      	add	r2, r3
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	3304      	adds	r3, #4
 800366e:	4619      	mov	r1, r3
 8003670:	4610      	mov	r0, r2
 8003672:	f7fe fd9a 	bl	80021aa <vListInsertEnd>
 8003676:	e005      	b.n	8003684 <xTaskRemoveFromEventList+0x80>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	3318      	adds	r3, #24
 800367c:	4619      	mov	r1, r3
 800367e:	480f      	ldr	r0, [pc, #60]	@ (80036bc <xTaskRemoveFromEventList+0xb8>)
 8003680:	f7fe fd93 	bl	80021aa <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003688:	4b0d      	ldr	r3, [pc, #52]	@ (80036c0 <xTaskRemoveFromEventList+0xbc>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368e:	429a      	cmp	r2, r3
 8003690:	d905      	bls.n	800369e <xTaskRemoveFromEventList+0x9a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003692:	2301      	movs	r3, #1
 8003694:	60fb      	str	r3, [r7, #12]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003696:	4b0b      	ldr	r3, [pc, #44]	@ (80036c4 <xTaskRemoveFromEventList+0xc0>)
 8003698:	2201      	movs	r2, #1
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	e001      	b.n	80036a2 <xTaskRemoveFromEventList+0x9e>
    }
    else
    {
        xReturn = pdFALSE;
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 80036a2:	68fb      	ldr	r3, [r7, #12]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	08006f88 	.word	0x08006f88
 80036b0:	20000214 	.word	0x20000214
 80036b4:	200001f4 	.word	0x200001f4
 80036b8:	20000118 	.word	0x20000118
 80036bc:	200001ac 	.word	0x200001ac
 80036c0:	20000114 	.word	0x20000114
 80036c4:	20000200 	.word	0x20000200

080036c8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80036d0:	4b06      	ldr	r3, [pc, #24]	@ (80036ec <vTaskInternalSetTimeOutState+0x24>)
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80036d8:	4b05      	ldr	r3, [pc, #20]	@ (80036f0 <vTaskInternalSetTimeOutState+0x28>)
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	605a      	str	r2, [r3, #4]
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	20000204 	.word	0x20000204
 80036f0:	200001f0 	.word	0x200001f0

080036f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b086      	sub	sp, #24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d104      	bne.n	800370e <xTaskCheckForTimeOut+0x1a>
 8003704:	4926      	ldr	r1, [pc, #152]	@ (80037a0 <xTaskCheckForTimeOut+0xac>)
 8003706:	f640 40f6 	movw	r0, #3318	@ 0xcf6
 800370a:	f7fd f941 	bl	8000990 <vAssertCalled>
    configASSERT( pxTicksToWait );
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d104      	bne.n	800371e <xTaskCheckForTimeOut+0x2a>
 8003714:	4922      	ldr	r1, [pc, #136]	@ (80037a0 <xTaskCheckForTimeOut+0xac>)
 8003716:	f640 40f7 	movw	r0, #3319	@ 0xcf7
 800371a:	f7fd f939 	bl	8000990 <vAssertCalled>

    taskENTER_CRITICAL();
 800371e:	f000 fe53 	bl	80043c8 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003722:	4b20      	ldr	r3, [pc, #128]	@ (80037a4 <xTaskCheckForTimeOut+0xb0>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	693a      	ldr	r2, [r7, #16]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373a:	d102      	bne.n	8003742 <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800373c:	2300      	movs	r3, #0
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	e026      	b.n	8003790 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	4b18      	ldr	r3, [pc, #96]	@ (80037a8 <xTaskCheckForTimeOut+0xb4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	429a      	cmp	r2, r3
 800374c:	d00a      	beq.n	8003764 <xTaskCheckForTimeOut+0x70>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	693a      	ldr	r2, [r7, #16]
 8003754:	429a      	cmp	r2, r3
 8003756:	d305      	bcc.n	8003764 <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003758:	2301      	movs	r3, #1
 800375a:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	e015      	b.n	8003790 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	429a      	cmp	r2, r3
 800376c:	d20b      	bcs.n	8003786 <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	1ad2      	subs	r2, r2, r3
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff ffa4 	bl	80036c8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003780:	2300      	movs	r3, #0
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	e004      	b.n	8003790 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800378c:	2301      	movs	r3, #1
 800378e:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 8003790:	f000 fe46 	bl	8004420 <vPortExitCritical>

    return xReturn;
 8003794:	697b      	ldr	r3, [r7, #20]
}
 8003796:	4618      	mov	r0, r3
 8003798:	3718      	adds	r7, #24
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	08006f88 	.word	0x08006f88
 80037a4:	200001f0 	.word	0x200001f0
 80037a8:	20000204 	.word	0x20000204

080037ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80037ac:	b480      	push	{r7}
 80037ae:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80037b0:	4b03      	ldr	r3, [pc, #12]	@ (80037c0 <vTaskMissedYield+0x14>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	601a      	str	r2, [r3, #0]
}
 80037b6:	bf00      	nop
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	20000200 	.word	0x20000200

080037c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80037cc:	f000 f852 	bl	8003874 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80037d0:	4b06      	ldr	r3, [pc, #24]	@ (80037ec <prvIdleTask+0x28>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d9f9      	bls.n	80037cc <prvIdleTask+0x8>
                {
                    taskYIELD();
 80037d8:	4b05      	ldr	r3, [pc, #20]	@ (80037f0 <prvIdleTask+0x2c>)
 80037da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80037e8:	e7f0      	b.n	80037cc <prvIdleTask+0x8>
 80037ea:	bf00      	nop
 80037ec:	20000118 	.word	0x20000118
 80037f0:	e000ed04 	.word	0xe000ed04

080037f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037fa:	2300      	movs	r3, #0
 80037fc:	607b      	str	r3, [r7, #4]
 80037fe:	e00c      	b.n	800381a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4a12      	ldr	r2, [pc, #72]	@ (8003854 <prvInitialiseTaskLists+0x60>)
 800380c:	4413      	add	r3, r2
 800380e:	4618      	mov	r0, r3
 8003810:	f7fe fc9e 	bl	8002150 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3301      	adds	r3, #1
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b04      	cmp	r3, #4
 800381e:	d9ef      	bls.n	8003800 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003820:	480d      	ldr	r0, [pc, #52]	@ (8003858 <prvInitialiseTaskLists+0x64>)
 8003822:	f7fe fc95 	bl	8002150 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003826:	480d      	ldr	r0, [pc, #52]	@ (800385c <prvInitialiseTaskLists+0x68>)
 8003828:	f7fe fc92 	bl	8002150 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800382c:	480c      	ldr	r0, [pc, #48]	@ (8003860 <prvInitialiseTaskLists+0x6c>)
 800382e:	f7fe fc8f 	bl	8002150 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003832:	480c      	ldr	r0, [pc, #48]	@ (8003864 <prvInitialiseTaskLists+0x70>)
 8003834:	f7fe fc8c 	bl	8002150 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003838:	480b      	ldr	r0, [pc, #44]	@ (8003868 <prvInitialiseTaskLists+0x74>)
 800383a:	f7fe fc89 	bl	8002150 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800383e:	4b0b      	ldr	r3, [pc, #44]	@ (800386c <prvInitialiseTaskLists+0x78>)
 8003840:	4a05      	ldr	r2, [pc, #20]	@ (8003858 <prvInitialiseTaskLists+0x64>)
 8003842:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003844:	4b0a      	ldr	r3, [pc, #40]	@ (8003870 <prvInitialiseTaskLists+0x7c>)
 8003846:	4a05      	ldr	r2, [pc, #20]	@ (800385c <prvInitialiseTaskLists+0x68>)
 8003848:	601a      	str	r2, [r3, #0]
}
 800384a:	bf00      	nop
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20000118 	.word	0x20000118
 8003858:	2000017c 	.word	0x2000017c
 800385c:	20000190 	.word	0x20000190
 8003860:	200001ac 	.word	0x200001ac
 8003864:	200001c0 	.word	0x200001c0
 8003868:	200001d8 	.word	0x200001d8
 800386c:	200001a4 	.word	0x200001a4
 8003870:	200001a8 	.word	0x200001a8

08003874 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800387a:	e019      	b.n	80038b0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800387c:	f000 fda4 	bl	80043c8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003880:	4b10      	ldr	r3, [pc, #64]	@ (80038c4 <prvCheckTasksWaitingTermination+0x50>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3304      	adds	r3, #4
 800388c:	4618      	mov	r0, r3
 800388e:	f7fe fce9 	bl	8002264 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003892:	4b0d      	ldr	r3, [pc, #52]	@ (80038c8 <prvCheckTasksWaitingTermination+0x54>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	3b01      	subs	r3, #1
 8003898:	4a0b      	ldr	r2, [pc, #44]	@ (80038c8 <prvCheckTasksWaitingTermination+0x54>)
 800389a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800389c:	4b0b      	ldr	r3, [pc, #44]	@ (80038cc <prvCheckTasksWaitingTermination+0x58>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3b01      	subs	r3, #1
 80038a2:	4a0a      	ldr	r2, [pc, #40]	@ (80038cc <prvCheckTasksWaitingTermination+0x58>)
 80038a4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80038a6:	f000 fdbb 	bl	8004420 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 f810 	bl	80038d0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80038b0:	4b06      	ldr	r3, [pc, #24]	@ (80038cc <prvCheckTasksWaitingTermination+0x58>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d1e1      	bne.n	800387c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80038b8:	bf00      	nop
 80038ba:	bf00      	nop
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	200001c0 	.word	0x200001c0
 80038c8:	200001ec 	.word	0x200001ec
 80038cc:	200001d4 	.word	0x200001d4

080038d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038dc:	4618      	mov	r0, r3
 80038de:	f000 ff59 	bl	8004794 <vPortFree>
                vPortFree( pxTCB );
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 ff56 	bl	8004794 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80038e8:	bf00      	nop
 80038ea:	3708      	adds	r7, #8
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003920 <prvResetNextTaskUnblockTime+0x30>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d104      	bne.n	8003908 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80038fe:	4b09      	ldr	r3, [pc, #36]	@ (8003924 <prvResetNextTaskUnblockTime+0x34>)
 8003900:	f04f 32ff 	mov.w	r2, #4294967295
 8003904:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003906:	e005      	b.n	8003914 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003908:	4b05      	ldr	r3, [pc, #20]	@ (8003920 <prvResetNextTaskUnblockTime+0x30>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a04      	ldr	r2, [pc, #16]	@ (8003924 <prvResetNextTaskUnblockTime+0x34>)
 8003912:	6013      	str	r3, [r2, #0]
}
 8003914:	bf00      	nop
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
 800391e:	bf00      	nop
 8003920:	200001a4 	.word	0x200001a4
 8003924:	2000020c 	.word	0x2000020c

08003928 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800392e:	4b0b      	ldr	r3, [pc, #44]	@ (800395c <xTaskGetSchedulerState+0x34>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d102      	bne.n	800393c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003936:	2301      	movs	r3, #1
 8003938:	607b      	str	r3, [r7, #4]
 800393a:	e008      	b.n	800394e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800393c:	4b08      	ldr	r3, [pc, #32]	@ (8003960 <xTaskGetSchedulerState+0x38>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d102      	bne.n	800394a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003944:	2302      	movs	r3, #2
 8003946:	607b      	str	r3, [r7, #4]
 8003948:	e001      	b.n	800394e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800394a:	2300      	movs	r3, #0
 800394c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800394e:	687b      	ldr	r3, [r7, #4]
    }
 8003950:	4618      	mov	r0, r3
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr
 800395c:	200001f8 	.word	0x200001f8
 8003960:	20000214 	.word	0x20000214

08003964 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 8003970:	2300      	movs	r3, #0
 8003972:	60fb      	str	r3, [r7, #12]

        if( pxMutexHolder != NULL )
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d05c      	beq.n	8003a34 <xTaskPriorityDisinherit+0xd0>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800397a:	4b31      	ldr	r3, [pc, #196]	@ (8003a40 <xTaskPriorityDisinherit+0xdc>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	429a      	cmp	r2, r3
 8003982:	d004      	beq.n	800398e <xTaskPriorityDisinherit+0x2a>
 8003984:	492f      	ldr	r1, [pc, #188]	@ (8003a44 <xTaskPriorityDisinherit+0xe0>)
 8003986:	f241 0056 	movw	r0, #4182	@ 0x1056
 800398a:	f7fd f801 	bl	8000990 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003992:	2b00      	cmp	r3, #0
 8003994:	d104      	bne.n	80039a0 <xTaskPriorityDisinherit+0x3c>
 8003996:	492b      	ldr	r1, [pc, #172]	@ (8003a44 <xTaskPriorityDisinherit+0xe0>)
 8003998:	f241 0057 	movw	r0, #4183	@ 0x1057
 800399c:	f7fc fff8 	bl	8000990 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039a4:	1e5a      	subs	r2, r3, #1
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d03e      	beq.n	8003a34 <xTaskPriorityDisinherit+0xd0>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d13a      	bne.n	8003a34 <xTaskPriorityDisinherit+0xd0>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	3304      	adds	r3, #4
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fe fc4e 	bl	8002264 <uxListRemove>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10a      	bne.n	80039e4 <xTaskPriorityDisinherit+0x80>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d2:	2201      	movs	r2, #1
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	43da      	mvns	r2, r3
 80039da:	4b1b      	ldr	r3, [pc, #108]	@ (8003a48 <xTaskPriorityDisinherit+0xe4>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4013      	ands	r3, r2
 80039e0:	4a19      	ldr	r2, [pc, #100]	@ (8003a48 <xTaskPriorityDisinherit+0xe4>)
 80039e2:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4619      	mov	r1, r3
 80039e8:	204a      	movs	r0, #74	@ 0x4a
 80039ea:	f001 fec5 	bl	8005778 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039fa:	f1c3 0205 	rsb	r2, r3, #5
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a06:	2201      	movs	r2, #1
 8003a08:	409a      	lsls	r2, r3
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a48 <xTaskPriorityDisinherit+0xe4>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	4a0d      	ldr	r2, [pc, #52]	@ (8003a48 <xTaskPriorityDisinherit+0xe4>)
 8003a12:	6013      	str	r3, [r2, #0]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4a0a      	ldr	r2, [pc, #40]	@ (8003a4c <xTaskPriorityDisinherit+0xe8>)
 8003a22:	441a      	add	r2, r3
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	3304      	adds	r3, #4
 8003a28:	4619      	mov	r1, r3
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	f7fe fbbd 	bl	80021aa <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003a30:	2301      	movs	r3, #1
 8003a32:	60fb      	str	r3, [r7, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003a34:	68fb      	ldr	r3, [r7, #12]
    }
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000114 	.word	0x20000114
 8003a44:	08006f88 	.word	0x08006f88
 8003a48:	200001f4 	.word	0x200001f4
 8003a4c:	20000118 	.word	0x20000118

08003a50 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003a5a:	4b32      	ldr	r3, [pc, #200]	@ (8003b24 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a60:	4b31      	ldr	r3, [pc, #196]	@ (8003b28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	3304      	adds	r3, #4
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fe fbfc 	bl	8002264 <uxListRemove>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10b      	bne.n	8003a8a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003a72:	4b2d      	ldr	r3, [pc, #180]	@ (8003b28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a78:	2201      	movs	r2, #1
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43da      	mvns	r2, r3
 8003a80:	4b2a      	ldr	r3, [pc, #168]	@ (8003b2c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4013      	ands	r3, r2
 8003a86:	4a29      	ldr	r2, [pc, #164]	@ (8003b2c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003a88:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a90:	d110      	bne.n	8003ab4 <prvAddCurrentTaskToDelayedList+0x64>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00d      	beq.n	8003ab4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003a98:	4b23      	ldr	r3, [pc, #140]	@ (8003b28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	211b      	movs	r1, #27
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f002 fbb2 	bl	8006208 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003aa4:	4b20      	ldr	r3, [pc, #128]	@ (8003b28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4820      	ldr	r0, [pc, #128]	@ (8003b30 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003aae:	f7fe fb7c 	bl	80021aa <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003ab2:	e032      	b.n	8003b1a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4413      	add	r3, r2
 8003aba:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003abc:	4b1a      	ldr	r3, [pc, #104]	@ (8003b28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d20f      	bcs.n	8003aec <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003acc:	4b16      	ldr	r3, [pc, #88]	@ (8003b28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2104      	movs	r1, #4
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f002 fb98 	bl	8006208 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ad8:	4b16      	ldr	r3, [pc, #88]	@ (8003b34 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	4b12      	ldr	r3, [pc, #72]	@ (8003b28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3304      	adds	r3, #4
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	4610      	mov	r0, r2
 8003ae6:	f7fe fb84 	bl	80021f2 <vListInsert>
}
 8003aea:	e016      	b.n	8003b1a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003aec:	4b0e      	ldr	r3, [pc, #56]	@ (8003b28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2104      	movs	r1, #4
 8003af2:	4618      	mov	r0, r3
 8003af4:	f002 fb88 	bl	8006208 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003af8:	4b0f      	ldr	r3, [pc, #60]	@ (8003b38 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	4b0a      	ldr	r3, [pc, #40]	@ (8003b28 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3304      	adds	r3, #4
 8003b02:	4619      	mov	r1, r3
 8003b04:	4610      	mov	r0, r2
 8003b06:	f7fe fb74 	bl	80021f2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8003b3c <prvAddCurrentTaskToDelayedList+0xec>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d202      	bcs.n	8003b1a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003b14:	4a09      	ldr	r2, [pc, #36]	@ (8003b3c <prvAddCurrentTaskToDelayedList+0xec>)
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	6013      	str	r3, [r2, #0]
}
 8003b1a:	bf00      	nop
 8003b1c:	3710      	adds	r7, #16
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	200001f0 	.word	0x200001f0
 8003b28:	20000114 	.word	0x20000114
 8003b2c:	200001f4 	.word	0x200001f4
 8003b30:	200001d8 	.word	0x200001d8
 8003b34:	200001a8 	.word	0x200001a8
 8003b38:	200001a4 	.word	0x200001a4
 8003b3c:	2000020c 	.word	0x2000020c

08003b40 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003b4a:	f000 fad9 	bl	8004100 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003b88 <xTimerCreateTimerTask+0x48>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00b      	beq.n	8003b6e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003b56:	4b0d      	ldr	r3, [pc, #52]	@ (8003b8c <xTimerCreateTimerTask+0x4c>)
 8003b58:	9301      	str	r3, [sp, #4]
 8003b5a:	2304      	movs	r3, #4
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b64:	490a      	ldr	r1, [pc, #40]	@ (8003b90 <xTimerCreateTimerTask+0x50>)
 8003b66:	480b      	ldr	r0, [pc, #44]	@ (8003b94 <xTimerCreateTimerTask+0x54>)
 8003b68:	f7ff f958 	bl	8002e1c <xTaskCreate>
 8003b6c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d104      	bne.n	8003b7e <xTimerCreateTimerTask+0x3e>
 8003b74:	4908      	ldr	r1, [pc, #32]	@ (8003b98 <xTimerCreateTimerTask+0x58>)
 8003b76:	f240 100d 	movw	r0, #269	@ 0x10d
 8003b7a:	f7fc ff09 	bl	8000990 <vAssertCalled>
        return xReturn;
 8003b7e:	687b      	ldr	r3, [r7, #4]
    }
 8003b80:	4618      	mov	r0, r3
 8003b82:	3708      	adds	r7, #8
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bd80      	pop	{r7, pc}
 8003b88:	20000248 	.word	0x20000248
 8003b8c:	2000024c 	.word	0x2000024c
 8003b90:	08006fc0 	.word	0x08006fc0
 8003b94:	08003cc5 	.word	0x08003cc5
 8003b98:	08006fc8 	.word	0x08006fc8

08003b9c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08a      	sub	sp, #40	@ 0x28
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d104      	bne.n	8003bbe <xTimerGenericCommand+0x22>
 8003bb4:	491c      	ldr	r1, [pc, #112]	@ (8003c28 <xTimerGenericCommand+0x8c>)
 8003bb6:	f44f 70c1 	mov.w	r0, #386	@ 0x182
 8003bba:	f7fc fee9 	bl	8000990 <vAssertCalled>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003bbe:	4b1b      	ldr	r3, [pc, #108]	@ (8003c2c <xTimerGenericCommand+0x90>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d02a      	beq.n	8003c1c <xTimerGenericCommand+0x80>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b05      	cmp	r3, #5
 8003bd6:	dc18      	bgt.n	8003c0a <xTimerGenericCommand+0x6e>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003bd8:	f7ff fea6 	bl	8003928 <xTaskGetSchedulerState>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d109      	bne.n	8003bf6 <xTimerGenericCommand+0x5a>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003be2:	4b12      	ldr	r3, [pc, #72]	@ (8003c2c <xTimerGenericCommand+0x90>)
 8003be4:	6818      	ldr	r0, [r3, #0]
 8003be6:	f107 0114 	add.w	r1, r7, #20
 8003bea:	2300      	movs	r3, #0
 8003bec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bee:	f7fe fc43 	bl	8002478 <xQueueGenericSend>
 8003bf2:	6278      	str	r0, [r7, #36]	@ 0x24
 8003bf4:	e012      	b.n	8003c1c <xTimerGenericCommand+0x80>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8003c2c <xTimerGenericCommand+0x90>)
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	f107 0114 	add.w	r1, r7, #20
 8003bfe:	2300      	movs	r3, #0
 8003c00:	2200      	movs	r2, #0
 8003c02:	f7fe fc39 	bl	8002478 <xQueueGenericSend>
 8003c06:	6278      	str	r0, [r7, #36]	@ 0x24
 8003c08:	e008      	b.n	8003c1c <xTimerGenericCommand+0x80>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003c0a:	4b08      	ldr	r3, [pc, #32]	@ (8003c2c <xTimerGenericCommand+0x90>)
 8003c0c:	6818      	ldr	r0, [r3, #0]
 8003c0e:	f107 0114 	add.w	r1, r7, #20
 8003c12:	2300      	movs	r3, #0
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	f7fe fd57 	bl	80026c8 <xQueueGenericSendFromISR>
 8003c1a:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3728      	adds	r7, #40	@ 0x28
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	08006fc8 	.word	0x08006fc8
 8003c2c:	20000248 	.word	0x20000248

08003c30 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c3a:	4b20      	ldr	r3, [pc, #128]	@ (8003cbc <prvProcessExpiredTimer+0x8c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	3304      	adds	r3, #4
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7fe fb0b 	bl	8002264 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d01d      	beq.n	8003c98 <prvProcessExpiredTimer+0x68>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	699a      	ldr	r2, [r3, #24]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	18d1      	adds	r1, r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f000 f8d1 	bl	8003e10 <prvInsertTimerInActiveList>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d01a      	beq.n	8003caa <prvProcessExpiredTimer+0x7a>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c74:	2300      	movs	r3, #0
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	2300      	movs	r3, #0
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f7ff ff8c 	bl	8003b9c <xTimerGenericCommand>
 8003c84:	60b8      	str	r0, [r7, #8]
                configASSERT( xResult );
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10e      	bne.n	8003caa <prvProcessExpiredTimer+0x7a>
 8003c8c:	490c      	ldr	r1, [pc, #48]	@ (8003cc0 <prvProcessExpiredTimer+0x90>)
 8003c8e:	f44f 7005 	mov.w	r0, #532	@ 0x214
 8003c92:	f7fc fe7d 	bl	8000990 <vAssertCalled>
 8003c96:	e008      	b.n	8003caa <prvProcessExpiredTimer+0x7a>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c9e:	f023 0301 	bic.w	r3, r3, #1
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	4798      	blx	r3
    }
 8003cb2:	bf00      	nop
 8003cb4:	3710      	adds	r7, #16
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000240 	.word	0x20000240
 8003cc0:	08006fc8 	.word	0x08006fc8

08003cc4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ccc:	f107 0308 	add.w	r3, r7, #8
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 f859 	bl	8003d88 <prvGetNextExpireTime>
 8003cd6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4619      	mov	r1, r3
 8003cdc:	68f8      	ldr	r0, [r7, #12]
 8003cde:	f000 f805 	bl	8003cec <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003ce2:	f000 f8d7 	bl	8003e94 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ce6:	bf00      	nop
 8003ce8:	e7f0      	b.n	8003ccc <prvTimerTask+0x8>
	...

08003cec <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003cf6:	f7ff fa51 	bl	800319c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cfa:	f107 0308 	add.w	r3, r7, #8
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 f866 	bl	8003dd0 <prvSampleTimeNow>
 8003d04:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d130      	bne.n	8003d6e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d10a      	bne.n	8003d28 <prvProcessTimerOrBlockTask+0x3c>
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d806      	bhi.n	8003d28 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003d1a:	f7ff fa4d 	bl	80031b8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003d1e:	68f9      	ldr	r1, [r7, #12]
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff ff85 	bl	8003c30 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003d26:	e024      	b.n	8003d72 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d008      	beq.n	8003d40 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d2e:	4b13      	ldr	r3, [pc, #76]	@ (8003d7c <prvProcessTimerOrBlockTask+0x90>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <prvProcessTimerOrBlockTask+0x50>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <prvProcessTimerOrBlockTask+0x52>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d40:	4b0f      	ldr	r3, [pc, #60]	@ (8003d80 <prvProcessTimerOrBlockTask+0x94>)
 8003d42:	6818      	ldr	r0, [r3, #0]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	683a      	ldr	r2, [r7, #0]
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f7fe ffcd 	bl	8002cec <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003d52:	f7ff fa31 	bl	80031b8 <xTaskResumeAll>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10a      	bne.n	8003d72 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003d5c:	4b09      	ldr	r3, [pc, #36]	@ (8003d84 <prvProcessTimerOrBlockTask+0x98>)
 8003d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	f3bf 8f6f 	isb	sy
    }
 8003d6c:	e001      	b.n	8003d72 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003d6e:	f7ff fa23 	bl	80031b8 <xTaskResumeAll>
    }
 8003d72:	bf00      	nop
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	20000244 	.word	0x20000244
 8003d80:	20000248 	.word	0x20000248
 8003d84:	e000ed04 	.word	0xe000ed04

08003d88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d90:	4b0e      	ldr	r3, [pc, #56]	@ (8003dcc <prvGetNextExpireTime+0x44>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d101      	bne.n	8003d9e <prvGetNextExpireTime+0x16>
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	e000      	b.n	8003da0 <prvGetNextExpireTime+0x18>
 8003d9e:	2200      	movs	r2, #0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d105      	bne.n	8003db8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003dac:	4b07      	ldr	r3, [pc, #28]	@ (8003dcc <prvGetNextExpireTime+0x44>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	60fb      	str	r3, [r7, #12]
 8003db6:	e001      	b.n	8003dbc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
    }
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	20000240 	.word	0x20000240

08003dd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003dd8:	f7ff fa8a 	bl	80032f0 <xTaskGetTickCount>
 8003ddc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003dde:	4b0b      	ldr	r3, [pc, #44]	@ (8003e0c <prvSampleTimeNow+0x3c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d205      	bcs.n	8003df4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003de8:	f000 f92a 	bl	8004040 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	601a      	str	r2, [r3, #0]
 8003df2:	e002      	b.n	8003dfa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003dfa:	4a04      	ldr	r2, [pc, #16]	@ (8003e0c <prvSampleTimeNow+0x3c>)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003e00:	68fb      	ldr	r3, [r7, #12]
    }
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000250 	.word	0x20000250

08003e10 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d812      	bhi.n	8003e5c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	1ad2      	subs	r2, r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d302      	bcc.n	8003e4a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003e44:	2301      	movs	r3, #1
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	e01b      	b.n	8003e82 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e4a:	4b10      	ldr	r3, [pc, #64]	@ (8003e8c <prvInsertTimerInActiveList+0x7c>)
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3304      	adds	r3, #4
 8003e52:	4619      	mov	r1, r3
 8003e54:	4610      	mov	r0, r2
 8003e56:	f7fe f9cc 	bl	80021f2 <vListInsert>
 8003e5a:	e012      	b.n	8003e82 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d206      	bcs.n	8003e72 <prvInsertTimerInActiveList+0x62>
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d302      	bcc.n	8003e72 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	617b      	str	r3, [r7, #20]
 8003e70:	e007      	b.n	8003e82 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e72:	4b07      	ldr	r3, [pc, #28]	@ (8003e90 <prvInsertTimerInActiveList+0x80>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	f7fe f9b8 	bl	80021f2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003e82:	697b      	ldr	r3, [r7, #20]
    }
 8003e84:	4618      	mov	r0, r3
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	20000244 	.word	0x20000244
 8003e90:	20000240 	.word	0x20000240

08003e94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b08c      	sub	sp, #48	@ 0x30
 8003e98:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e9a:	e0bb      	b.n	8004014 <prvProcessReceivedCommands+0x180>
        {
            #if ( INCLUDE_xTimerPendFunctionCall == 1 )
                {
                    /* Negative commands are pended function calls rather than timer
                     * commands. */
                    if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	da13      	bge.n	8003eca <prvProcessReceivedCommands+0x36>
                    {
                        const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003ea2:	f107 0308 	add.w	r3, r7, #8
 8003ea6:	3304      	adds	r3, #4
 8003ea8:	627b      	str	r3, [r7, #36]	@ 0x24

                        /* The timer uses the xCallbackParameters member to request a
                         * callback be executed.  Check the callback is not NULL. */
                        configASSERT( pxCallback );
 8003eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d104      	bne.n	8003eba <prvProcessReceivedCommands+0x26>
 8003eb0:	4961      	ldr	r1, [pc, #388]	@ (8004038 <prvProcessReceivedCommands+0x1a4>)
 8003eb2:	f240 20fa 	movw	r0, #762	@ 0x2fa
 8003eb6:	f7fc fd6b 	bl	8000990 <vAssertCalled>

                        /* Call the function. */
                        pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ec0:	6850      	ldr	r0, [r2, #4]
 8003ec2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ec4:	6892      	ldr	r2, [r2, #8]
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	4798      	blx	r3
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	f2c0 80a1 	blt.w	8004014 <prvProcessReceivedCommands+0x180>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	623b      	str	r3, [r7, #32]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d004      	beq.n	8003ee8 <prvProcessReceivedCommands+0x54>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7fe f9be 	bl	8002264 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003ee8:	1d3b      	adds	r3, r7, #4
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff ff70 	bl	8003dd0 <prvSampleTimeNow>
 8003ef0:	61f8      	str	r0, [r7, #28]

                switch( xMessage.xMessageID )
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	2b09      	cmp	r3, #9
 8003ef6:	f200 808a 	bhi.w	800400e <prvProcessReceivedCommands+0x17a>
 8003efa:	a201      	add	r2, pc, #4	@ (adr r2, 8003f00 <prvProcessReceivedCommands+0x6c>)
 8003efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f00:	08003f29 	.word	0x08003f29
 8003f04:	08003f29 	.word	0x08003f29
 8003f08:	08003f29 	.word	0x08003f29
 8003f0c:	08003f93 	.word	0x08003f93
 8003f10:	08003fa7 	.word	0x08003fa7
 8003f14:	08003fe5 	.word	0x08003fe5
 8003f18:	08003f29 	.word	0x08003f29
 8003f1c:	08003f29 	.word	0x08003f29
 8003f20:	08003f93 	.word	0x08003f93
 8003f24:	08003fa7 	.word	0x08003fa7
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f2e:	f043 0301 	orr.w	r3, r3, #1
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	18d1      	adds	r1, r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	6a38      	ldr	r0, [r7, #32]
 8003f48:	f7ff ff62 	bl	8003e10 <prvInsertTimerInActiveList>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d05f      	beq.n	8004012 <prvProcessReceivedCommands+0x17e>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f52:	6a3b      	ldr	r3, [r7, #32]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	6a38      	ldr	r0, [r7, #32]
 8003f58:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f60:	f003 0304 	and.w	r3, r3, #4
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d054      	beq.n	8004012 <prvProcessReceivedCommands+0x17e>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	441a      	add	r2, r3
 8003f70:	2300      	movs	r3, #0
 8003f72:	9300      	str	r3, [sp, #0]
 8003f74:	2300      	movs	r3, #0
 8003f76:	2100      	movs	r1, #0
 8003f78:	6a38      	ldr	r0, [r7, #32]
 8003f7a:	f7ff fe0f 	bl	8003b9c <xTimerGenericCommand>
 8003f7e:	61b8      	str	r0, [r7, #24]
                                configASSERT( xResult );
 8003f80:	69bb      	ldr	r3, [r7, #24]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d145      	bne.n	8004012 <prvProcessReceivedCommands+0x17e>
 8003f86:	492c      	ldr	r1, [pc, #176]	@ (8004038 <prvProcessReceivedCommands+0x1a4>)
 8003f88:	f240 3036 	movw	r0, #822	@ 0x336
 8003f8c:	f7fc fd00 	bl	8000990 <vAssertCalled>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003f90:	e03f      	b.n	8004012 <prvProcessReceivedCommands+0x17e>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f92:	6a3b      	ldr	r3, [r7, #32]
 8003f94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f98:	f023 0301 	bic.w	r3, r3, #1
 8003f9c:	b2da      	uxtb	r2, r3
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003fa4:	e036      	b.n	8004014 <prvProcessReceivedCommands+0x180>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fac:	f043 0301 	orr.w	r3, r3, #1
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	6a3b      	ldr	r3, [r7, #32]
 8003fbc:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003fbe:	6a3b      	ldr	r3, [r7, #32]
 8003fc0:	699b      	ldr	r3, [r3, #24]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d104      	bne.n	8003fd0 <prvProcessReceivedCommands+0x13c>
 8003fc6:	491c      	ldr	r1, [pc, #112]	@ (8004038 <prvProcessReceivedCommands+0x1a4>)
 8003fc8:	f240 304f 	movw	r0, #847	@ 0x34f
 8003fcc:	f7fc fce0 	bl	8000990 <vAssertCalled>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	699a      	ldr	r2, [r3, #24]
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	18d1      	adds	r1, r2, r3
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	69fa      	ldr	r2, [r7, #28]
 8003fdc:	6a38      	ldr	r0, [r7, #32]
 8003fde:	f7ff ff17 	bl	8003e10 <prvInsertTimerInActiveList>
                        break;
 8003fe2:	e017      	b.n	8004014 <prvProcessReceivedCommands+0x180>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d103      	bne.n	8003ffa <prvProcessReceivedCommands+0x166>
                                {
                                    vPortFree( pxTimer );
 8003ff2:	6a38      	ldr	r0, [r7, #32]
 8003ff4:	f000 fbce 	bl	8004794 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003ff8:	e00c      	b.n	8004014 <prvProcessReceivedCommands+0x180>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ffa:	6a3b      	ldr	r3, [r7, #32]
 8003ffc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004000:	f023 0301 	bic.w	r3, r3, #1
 8004004:	b2da      	uxtb	r2, r3
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800400c:	e002      	b.n	8004014 <prvProcessReceivedCommands+0x180>

                    default:
                        /* Don't expect to get here. */
                        break;
 800400e:	bf00      	nop
 8004010:	e000      	b.n	8004014 <prvProcessReceivedCommands+0x180>
                        break;
 8004012:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004014:	4b09      	ldr	r3, [pc, #36]	@ (800403c <prvProcessReceivedCommands+0x1a8>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f107 0108 	add.w	r1, r7, #8
 800401c:	2200      	movs	r2, #0
 800401e:	4618      	mov	r0, r3
 8004020:	f7fe fc14 	bl	800284c <xQueueReceive>
 8004024:	4603      	mov	r3, r0
 8004026:	2b00      	cmp	r3, #0
 8004028:	f47f af38 	bne.w	8003e9c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800402c:	bf00      	nop
 800402e:	bf00      	nop
 8004030:	3728      	adds	r7, #40	@ 0x28
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	08006fc8 	.word	0x08006fc8
 800403c:	20000248 	.word	0x20000248

08004040 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004046:	e042      	b.n	80040ce <prvSwitchTimerLists+0x8e>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004048:	4b2a      	ldr	r3, [pc, #168]	@ (80040f4 <prvSwitchTimerLists+0xb4>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004052:	4b28      	ldr	r3, [pc, #160]	@ (80040f4 <prvSwitchTimerLists+0xb4>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	3304      	adds	r3, #4
 8004060:	4618      	mov	r0, r3
 8004062:	f7fe f8ff 	bl	8002264 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	68f8      	ldr	r0, [r7, #12]
 800406c:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d028      	beq.n	80040ce <prvSwitchTimerLists+0x8e>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	693a      	ldr	r2, [r7, #16]
 8004082:	4413      	add	r3, r2
 8004084:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	429a      	cmp	r2, r3
 800408c:	d90e      	bls.n	80040ac <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800409a:	4b16      	ldr	r3, [pc, #88]	@ (80040f4 <prvSwitchTimerLists+0xb4>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3304      	adds	r3, #4
 80040a2:	4619      	mov	r1, r3
 80040a4:	4610      	mov	r0, r2
 80040a6:	f7fe f8a4 	bl	80021f2 <vListInsert>
 80040aa:	e010      	b.n	80040ce <prvSwitchTimerLists+0x8e>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80040ac:	2300      	movs	r3, #0
 80040ae:	9300      	str	r3, [sp, #0]
 80040b0:	2300      	movs	r3, #0
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	2100      	movs	r1, #0
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f7ff fd70 	bl	8003b9c <xTimerGenericCommand>
 80040bc:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d104      	bne.n	80040ce <prvSwitchTimerLists+0x8e>
 80040c4:	490c      	ldr	r1, [pc, #48]	@ (80040f8 <prvSwitchTimerLists+0xb8>)
 80040c6:	f240 30a9 	movw	r0, #937	@ 0x3a9
 80040ca:	f7fc fc61 	bl	8000990 <vAssertCalled>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80040ce:	4b09      	ldr	r3, [pc, #36]	@ (80040f4 <prvSwitchTimerLists+0xb4>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1b7      	bne.n	8004048 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80040d8:	4b06      	ldr	r3, [pc, #24]	@ (80040f4 <prvSwitchTimerLists+0xb4>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80040de:	4b07      	ldr	r3, [pc, #28]	@ (80040fc <prvSwitchTimerLists+0xbc>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4a04      	ldr	r2, [pc, #16]	@ (80040f4 <prvSwitchTimerLists+0xb4>)
 80040e4:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80040e6:	4a05      	ldr	r2, [pc, #20]	@ (80040fc <prvSwitchTimerLists+0xbc>)
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	6013      	str	r3, [r2, #0]
    }
 80040ec:	bf00      	nop
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	20000240 	.word	0x20000240
 80040f8:	08006fc8 	.word	0x08006fc8
 80040fc:	20000244 	.word	0x20000244

08004100 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004104:	f000 f960 	bl	80043c8 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004108:	4b12      	ldr	r3, [pc, #72]	@ (8004154 <prvCheckForValidListAndQueue+0x54>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d11d      	bne.n	800414c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004110:	4811      	ldr	r0, [pc, #68]	@ (8004158 <prvCheckForValidListAndQueue+0x58>)
 8004112:	f7fe f81d 	bl	8002150 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004116:	4811      	ldr	r0, [pc, #68]	@ (800415c <prvCheckForValidListAndQueue+0x5c>)
 8004118:	f7fe f81a 	bl	8002150 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800411c:	4b10      	ldr	r3, [pc, #64]	@ (8004160 <prvCheckForValidListAndQueue+0x60>)
 800411e:	4a0e      	ldr	r2, [pc, #56]	@ (8004158 <prvCheckForValidListAndQueue+0x58>)
 8004120:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004122:	4b10      	ldr	r3, [pc, #64]	@ (8004164 <prvCheckForValidListAndQueue+0x64>)
 8004124:	4a0d      	ldr	r2, [pc, #52]	@ (800415c <prvCheckForValidListAndQueue+0x5c>)
 8004126:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004128:	2200      	movs	r2, #0
 800412a:	2110      	movs	r1, #16
 800412c:	2005      	movs	r0, #5
 800412e:	f7fe f927 	bl	8002380 <xQueueGenericCreate>
 8004132:	4603      	mov	r3, r0
 8004134:	4a07      	ldr	r2, [pc, #28]	@ (8004154 <prvCheckForValidListAndQueue+0x54>)
 8004136:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004138:	4b06      	ldr	r3, [pc, #24]	@ (8004154 <prvCheckForValidListAndQueue+0x54>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d005      	beq.n	800414c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004140:	4b04      	ldr	r3, [pc, #16]	@ (8004154 <prvCheckForValidListAndQueue+0x54>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4908      	ldr	r1, [pc, #32]	@ (8004168 <prvCheckForValidListAndQueue+0x68>)
 8004146:	4618      	mov	r0, r3
 8004148:	f7fe fd9e 	bl	8002c88 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800414c:	f000 f968 	bl	8004420 <vPortExitCritical>
    }
 8004150:	bf00      	nop
 8004152:	bd80      	pop	{r7, pc}
 8004154:	20000248 	.word	0x20000248
 8004158:	20000218 	.word	0x20000218
 800415c:	2000022c 	.word	0x2000022c
 8004160:	20000240 	.word	0x20000240
 8004164:	20000244 	.word	0x20000244
 8004168:	08006fe8 	.word	0x08006fe8

0800416c <__NVIC_SetPriorityGrouping>:
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f003 0307 	and.w	r3, r3, #7
 800417a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800417c:	4b0b      	ldr	r3, [pc, #44]	@ (80041ac <__NVIC_SetPriorityGrouping+0x40>)
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004188:	4013      	ands	r3, r2
 800418a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004194:	4b06      	ldr	r3, [pc, #24]	@ (80041b0 <__NVIC_SetPriorityGrouping+0x44>)
 8004196:	4313      	orrs	r3, r2
 8004198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800419a:	4a04      	ldr	r2, [pc, #16]	@ (80041ac <__NVIC_SetPriorityGrouping+0x40>)
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	60d3      	str	r3, [r2, #12]
}
 80041a0:	bf00      	nop
 80041a2:	3714      	adds	r7, #20
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr
 80041ac:	e000ed00 	.word	0xe000ed00
 80041b0:	05fa0000 	.word	0x05fa0000

080041b4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	3b04      	subs	r3, #4
 80041c4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80041cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	3b04      	subs	r3, #4
 80041d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	f023 0201 	bic.w	r2, r3, #1
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3b04      	subs	r3, #4
 80041e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80041e4:	4a0c      	ldr	r2, [pc, #48]	@ (8004218 <pxPortInitialiseStack+0x64>)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3b14      	subs	r3, #20
 80041ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	3b04      	subs	r3, #4
 80041fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f06f 0202 	mvn.w	r2, #2
 8004202:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	3b20      	subs	r3, #32
 8004208:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800420a:	68fb      	ldr	r3, [r7, #12]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr
 8004218:	0800421d 	.word	0x0800421d

0800421c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004222:	2300      	movs	r3, #0
 8004224:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004226:	4b0f      	ldr	r3, [pc, #60]	@ (8004264 <prvTaskExitError+0x48>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422e:	d003      	beq.n	8004238 <prvTaskExitError+0x1c>
 8004230:	490d      	ldr	r1, [pc, #52]	@ (8004268 <prvTaskExitError+0x4c>)
 8004232:	20df      	movs	r0, #223	@ 0xdf
 8004234:	f7fc fbac 	bl	8000990 <vAssertCalled>
        __asm volatile
 8004238:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800423c:	b672      	cpsid	i
 800423e:	f383 8811 	msr	BASEPRI, r3
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	b662      	cpsie	i
 800424c:	607b      	str	r3, [r7, #4]
    }
 800424e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004250:	bf00      	nop
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d0fc      	beq.n	8004252 <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004258:	bf00      	nop
 800425a:	bf00      	nop
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop
 8004264:	20000008 	.word	0x20000008
 8004268:	08006ff0 	.word	0x08006ff0
 800426c:	00000000 	.word	0x00000000

08004270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004270:	4b07      	ldr	r3, [pc, #28]	@ (8004290 <pxCurrentTCBConst2>)
 8004272:	6819      	ldr	r1, [r3, #0]
 8004274:	6808      	ldr	r0, [r1, #0]
 8004276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800427a:	f380 8809 	msr	PSP, r0
 800427e:	f3bf 8f6f 	isb	sy
 8004282:	f04f 0000 	mov.w	r0, #0
 8004286:	f380 8811 	msr	BASEPRI, r0
 800428a:	4770      	bx	lr
 800428c:	f3af 8000 	nop.w

08004290 <pxCurrentTCBConst2>:
 8004290:	20000114 	.word	0x20000114
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004294:	bf00      	nop
 8004296:	bf00      	nop

08004298 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004298:	4808      	ldr	r0, [pc, #32]	@ (80042bc <prvPortStartFirstTask+0x24>)
 800429a:	6800      	ldr	r0, [r0, #0]
 800429c:	6800      	ldr	r0, [r0, #0]
 800429e:	f380 8808 	msr	MSP, r0
 80042a2:	f04f 0000 	mov.w	r0, #0
 80042a6:	f380 8814 	msr	CONTROL, r0
 80042aa:	b662      	cpsie	i
 80042ac:	b661      	cpsie	f
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	df00      	svc	0
 80042b8:	bf00      	nop
 80042ba:	0000      	.short	0x0000
 80042bc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80042c0:	bf00      	nop
 80042c2:	bf00      	nop

080042c4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80042ca:	4b38      	ldr	r3, [pc, #224]	@ (80043ac <xPortStartScheduler+0xe8>)
 80042cc:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	60bb      	str	r3, [r7, #8]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	22ff      	movs	r2, #255	@ 0xff
 80042da:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	71fb      	strb	r3, [r7, #7]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042e4:	79fb      	ldrb	r3, [r7, #7]
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	4b30      	ldr	r3, [pc, #192]	@ (80043b0 <xPortStartScheduler+0xec>)
 80042f0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042f2:	4b30      	ldr	r3, [pc, #192]	@ (80043b4 <xPortStartScheduler+0xf0>)
 80042f4:	2207      	movs	r2, #7
 80042f6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042f8:	e009      	b.n	800430e <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 80042fa:	4b2e      	ldr	r3, [pc, #184]	@ (80043b4 <xPortStartScheduler+0xf0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3b01      	subs	r3, #1
 8004300:	4a2c      	ldr	r2, [pc, #176]	@ (80043b4 <xPortStartScheduler+0xf0>)
 8004302:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004304:	79fb      	ldrb	r3, [r7, #7]
 8004306:	b2db      	uxtb	r3, r3
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	b2db      	uxtb	r3, r3
 800430c:	71fb      	strb	r3, [r7, #7]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004316:	2b80      	cmp	r3, #128	@ 0x80
 8004318:	d0ef      	beq.n	80042fa <xPortStartScheduler+0x36>
            #ifdef __NVIC_PRIO_BITS
                {
                    /* Check the CMSIS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800431a:	4b26      	ldr	r3, [pc, #152]	@ (80043b4 <xPortStartScheduler+0xf0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f1c3 0307 	rsb	r3, r3, #7
 8004322:	2b04      	cmp	r3, #4
 8004324:	d004      	beq.n	8004330 <xPortStartScheduler+0x6c>
 8004326:	4924      	ldr	r1, [pc, #144]	@ (80043b8 <xPortStartScheduler+0xf4>)
 8004328:	f44f 70a5 	mov.w	r0, #330	@ 0x14a
 800432c:	f7fc fb30 	bl	8000990 <vAssertCalled>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004330:	4b20      	ldr	r3, [pc, #128]	@ (80043b4 <xPortStartScheduler+0xf0>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f1c3 0307 	rsb	r3, r3, #7
 8004338:	2b04      	cmp	r3, #4
 800433a:	d004      	beq.n	8004346 <xPortStartScheduler+0x82>
 800433c:	491e      	ldr	r1, [pc, #120]	@ (80043b8 <xPortStartScheduler+0xf4>)
 800433e:	f240 1053 	movw	r0, #339	@ 0x153
 8004342:	f7fc fb25 	bl	8000990 <vAssertCalled>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004346:	4b1b      	ldr	r3, [pc, #108]	@ (80043b4 <xPortStartScheduler+0xf0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	021b      	lsls	r3, r3, #8
 800434c:	4a19      	ldr	r2, [pc, #100]	@ (80043b4 <xPortStartScheduler+0xf0>)
 800434e:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004350:	4b18      	ldr	r3, [pc, #96]	@ (80043b4 <xPortStartScheduler+0xf0>)
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004358:	4a16      	ldr	r2, [pc, #88]	@ (80043b4 <xPortStartScheduler+0xf0>)
 800435a:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	b2da      	uxtb	r2, r3
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004364:	4b15      	ldr	r3, [pc, #84]	@ (80043bc <xPortStartScheduler+0xf8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a14      	ldr	r2, [pc, #80]	@ (80043bc <xPortStartScheduler+0xf8>)
 800436a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800436e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004370:	4b12      	ldr	r3, [pc, #72]	@ (80043bc <xPortStartScheduler+0xf8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a11      	ldr	r2, [pc, #68]	@ (80043bc <xPortStartScheduler+0xf8>)
 8004376:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800437a:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800437c:	f000 f8d0 	bl	8004520 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004380:	4b0f      	ldr	r3, [pc, #60]	@ (80043c0 <xPortStartScheduler+0xfc>)
 8004382:	2200      	movs	r2, #0
 8004384:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004386:	f000 f8ef 	bl	8004568 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800438a:	4b0e      	ldr	r3, [pc, #56]	@ (80043c4 <xPortStartScheduler+0x100>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a0d      	ldr	r2, [pc, #52]	@ (80043c4 <xPortStartScheduler+0x100>)
 8004390:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004394:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004396:	f7ff ff7f 	bl	8004298 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800439a:	f7ff f883 	bl	80034a4 <vTaskSwitchContext>
    prvTaskExitError();
 800439e:	f7ff ff3d 	bl	800421c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80043a2:	2300      	movs	r3, #0
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	e000e400 	.word	0xe000e400
 80043b0:	20000254 	.word	0x20000254
 80043b4:	20000258 	.word	0x20000258
 80043b8:	08006ff0 	.word	0x08006ff0
 80043bc:	e000ed20 	.word	0xe000ed20
 80043c0:	20000008 	.word	0x20000008
 80043c4:	e000ef34 	.word	0xe000ef34

080043c8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
        __asm volatile
 80043ce:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80043d2:	b672      	cpsid	i
 80043d4:	f383 8811 	msr	BASEPRI, r3
 80043d8:	f3bf 8f6f 	isb	sy
 80043dc:	f3bf 8f4f 	dsb	sy
 80043e0:	b662      	cpsie	i
 80043e2:	607b      	str	r3, [r7, #4]
    }
 80043e4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80043e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004414 <vPortEnterCritical+0x4c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3301      	adds	r3, #1
 80043ec:	4a09      	ldr	r2, [pc, #36]	@ (8004414 <vPortEnterCritical+0x4c>)
 80043ee:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80043f0:	4b08      	ldr	r3, [pc, #32]	@ (8004414 <vPortEnterCritical+0x4c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d109      	bne.n	800440c <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80043f8:	4b07      	ldr	r3, [pc, #28]	@ (8004418 <vPortEnterCritical+0x50>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d004      	beq.n	800440c <vPortEnterCritical+0x44>
 8004402:	4906      	ldr	r1, [pc, #24]	@ (800441c <vPortEnterCritical+0x54>)
 8004404:	f44f 70cc 	mov.w	r0, #408	@ 0x198
 8004408:	f7fc fac2 	bl	8000990 <vAssertCalled>
    }
}
 800440c:	bf00      	nop
 800440e:	3708      	adds	r7, #8
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}
 8004414:	20000008 	.word	0x20000008
 8004418:	e000ed04 	.word	0xe000ed04
 800441c:	08006ff0 	.word	0x08006ff0

08004420 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004426:	4b0e      	ldr	r3, [pc, #56]	@ (8004460 <vPortExitCritical+0x40>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d104      	bne.n	8004438 <vPortExitCritical+0x18>
 800442e:	490d      	ldr	r1, [pc, #52]	@ (8004464 <vPortExitCritical+0x44>)
 8004430:	f240 109f 	movw	r0, #415	@ 0x19f
 8004434:	f7fc faac 	bl	8000990 <vAssertCalled>
    uxCriticalNesting--;
 8004438:	4b09      	ldr	r3, [pc, #36]	@ (8004460 <vPortExitCritical+0x40>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3b01      	subs	r3, #1
 800443e:	4a08      	ldr	r2, [pc, #32]	@ (8004460 <vPortExitCritical+0x40>)
 8004440:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004442:	4b07      	ldr	r3, [pc, #28]	@ (8004460 <vPortExitCritical+0x40>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d105      	bne.n	8004456 <vPortExitCritical+0x36>
 800444a:	2300      	movs	r3, #0
 800444c:	607b      	str	r3, [r7, #4]
        __asm volatile
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f383 8811 	msr	BASEPRI, r3
    }
 8004454:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004456:	bf00      	nop
 8004458:	3708      	adds	r7, #8
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	20000008 	.word	0x20000008
 8004464:	08006ff0 	.word	0x08006ff0
	...

08004470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004470:	f3ef 8009 	mrs	r0, PSP
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	4b15      	ldr	r3, [pc, #84]	@ (80044d0 <pxCurrentTCBConst>)
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	f01e 0f10 	tst.w	lr, #16
 8004480:	bf08      	it	eq
 8004482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800448a:	6010      	str	r0, [r2, #0]
 800448c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004490:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8004494:	b672      	cpsid	i
 8004496:	f380 8811 	msr	BASEPRI, r0
 800449a:	f3bf 8f4f 	dsb	sy
 800449e:	f3bf 8f6f 	isb	sy
 80044a2:	b662      	cpsie	i
 80044a4:	f7fe fffe 	bl	80034a4 <vTaskSwitchContext>
 80044a8:	f04f 0000 	mov.w	r0, #0
 80044ac:	f380 8811 	msr	BASEPRI, r0
 80044b0:	bc09      	pop	{r0, r3}
 80044b2:	6819      	ldr	r1, [r3, #0]
 80044b4:	6808      	ldr	r0, [r1, #0]
 80044b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ba:	f01e 0f10 	tst.w	lr, #16
 80044be:	bf08      	it	eq
 80044c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80044c4:	f380 8809 	msr	PSP, r0
 80044c8:	f3bf 8f6f 	isb	sy
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop

080044d0 <pxCurrentTCBConst>:
 80044d0:	20000114 	.word	0x20000114
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop

080044d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
        __asm volatile
 80044de:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80044e2:	b672      	cpsid	i
 80044e4:	f383 8811 	msr	BASEPRI, r3
 80044e8:	f3bf 8f6f 	isb	sy
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	b662      	cpsie	i
 80044f2:	607b      	str	r3, [r7, #4]
    }
 80044f4:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80044f6:	f7fe ff1d 	bl	8003334 <xTaskIncrementTick>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <SysTick_Handler+0x30>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004500:	4b06      	ldr	r3, [pc, #24]	@ (800451c <SysTick_Handler+0x44>)
 8004502:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	2300      	movs	r3, #0
 800450a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	f383 8811 	msr	BASEPRI, r3
    }
 8004512:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8004514:	bf00      	nop
 8004516:	3708      	adds	r7, #8
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	e000ed04 	.word	0xe000ed04

08004520 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004524:	4b0b      	ldr	r3, [pc, #44]	@ (8004554 <vPortSetupTimerInterrupt+0x34>)
 8004526:	2200      	movs	r2, #0
 8004528:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800452a:	4b0b      	ldr	r3, [pc, #44]	@ (8004558 <vPortSetupTimerInterrupt+0x38>)
 800452c:	2200      	movs	r2, #0
 800452e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004530:	4b0a      	ldr	r3, [pc, #40]	@ (800455c <vPortSetupTimerInterrupt+0x3c>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a0a      	ldr	r2, [pc, #40]	@ (8004560 <vPortSetupTimerInterrupt+0x40>)
 8004536:	fba2 2303 	umull	r2, r3, r2, r3
 800453a:	099b      	lsrs	r3, r3, #6
 800453c:	4a09      	ldr	r2, [pc, #36]	@ (8004564 <vPortSetupTimerInterrupt+0x44>)
 800453e:	3b01      	subs	r3, #1
 8004540:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004542:	4b04      	ldr	r3, [pc, #16]	@ (8004554 <vPortSetupTimerInterrupt+0x34>)
 8004544:	2207      	movs	r2, #7
 8004546:	601a      	str	r2, [r3, #0]
}
 8004548:	bf00      	nop
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
 8004552:	bf00      	nop
 8004554:	e000e010 	.word	0xe000e010
 8004558:	e000e018 	.word	0xe000e018
 800455c:	20000000 	.word	0x20000000
 8004560:	10624dd3 	.word	0x10624dd3
 8004564:	e000e014 	.word	0xe000e014

08004568 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004568:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004578 <vPortEnableVFP+0x10>
 800456c:	6801      	ldr	r1, [r0, #0]
 800456e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004572:	6001      	str	r1, [r0, #0]
 8004574:	4770      	bx	lr
 8004576:	0000      	.short	0x0000
 8004578:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 800457c:	bf00      	nop
 800457e:	bf00      	nop

08004580 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004586:	f3ef 8305 	mrs	r3, IPSR
 800458a:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b0f      	cmp	r3, #15
 8004590:	d90e      	bls.n	80045b0 <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004592:	4a10      	ldr	r2, [pc, #64]	@ (80045d4 <vPortValidateInterruptPriority+0x54>)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4413      	add	r3, r2
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800459c:	4b0e      	ldr	r3, [pc, #56]	@ (80045d8 <vPortValidateInterruptPriority+0x58>)
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	78fa      	ldrb	r2, [r7, #3]
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d204      	bcs.n	80045b0 <vPortValidateInterruptPriority+0x30>
 80045a6:	490d      	ldr	r1, [pc, #52]	@ (80045dc <vPortValidateInterruptPriority+0x5c>)
 80045a8:	f240 20f2 	movw	r0, #754	@ 0x2f2
 80045ac:	f7fc f9f0 	bl	8000990 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80045b0:	4b0b      	ldr	r3, [pc, #44]	@ (80045e0 <vPortValidateInterruptPriority+0x60>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80045b8:	4b0a      	ldr	r3, [pc, #40]	@ (80045e4 <vPortValidateInterruptPriority+0x64>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	429a      	cmp	r2, r3
 80045be:	d904      	bls.n	80045ca <vPortValidateInterruptPriority+0x4a>
 80045c0:	4906      	ldr	r1, [pc, #24]	@ (80045dc <vPortValidateInterruptPriority+0x5c>)
 80045c2:	f240 3002 	movw	r0, #770	@ 0x302
 80045c6:	f7fc f9e3 	bl	8000990 <vAssertCalled>
    }
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	e000e3f0 	.word	0xe000e3f0
 80045d8:	20000254 	.word	0x20000254
 80045dc:	08006ff0 	.word	0x08006ff0
 80045e0:	e000ed0c 	.word	0xe000ed0c
 80045e4:	20000258 	.word	0x20000258

080045e8 <vInitPrioGroupValue>:
#endif /* configASSERT_DEFINED */

/*-----------------------------------------------------------*/

void vInitPrioGroupValue( void )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	af00      	add	r7, sp, #0
    /* Ensure all priority bits are assigned as preemption priority bits.
     * This is required for FreeRTOS to work correctly with interrupts.
     * See comment in vPortValidateInterruptPriority() for details. */
    NVIC_SetPriorityGrouping( 0U );
 80045ec:	2000      	movs	r0, #0
 80045ee:	f7ff fdbd 	bl	800416c <__NVIC_SetPriorityGrouping>
}
 80045f2:	bf00      	nop
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004600:	2300      	movs	r3, #0
 8004602:	60fb      	str	r3, [r7, #12]

    vTaskSuspendAll();
 8004604:	f7fe fdca 	bl	800319c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004608:	4b5b      	ldr	r3, [pc, #364]	@ (8004778 <pvPortMalloc+0x180>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004610:	f000 f918 	bl	8004844 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004614:	4b59      	ldr	r3, [pc, #356]	@ (800477c <pvPortMalloc+0x184>)
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4013      	ands	r3, r2
 800461c:	2b00      	cmp	r3, #0
 800461e:	f040 809a 	bne.w	8004756 <pvPortMalloc+0x15e>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d027      	beq.n	8004678 <pvPortMalloc+0x80>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004628:	2208      	movs	r2, #8
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	429a      	cmp	r2, r3
 8004632:	d221      	bcs.n	8004678 <pvPortMalloc+0x80>
            {
                xWantedSize += xHeapStructSize;
 8004634:	2208      	movs	r2, #8
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4413      	add	r3, r2
 800463a:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	2b00      	cmp	r3, #0
 8004644:	d01b      	beq.n	800467e <pvPortMalloc+0x86>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f023 0307 	bic.w	r3, r3, #7
 800464c:	3308      	adds	r3, #8
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	429a      	cmp	r2, r3
 8004652:	d20e      	bcs.n	8004672 <pvPortMalloc+0x7a>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	f023 0307 	bic.w	r3, r3, #7
 800465a:	3308      	adds	r3, #8
 800465c:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	2b00      	cmp	r3, #0
 8004666:	d00a      	beq.n	800467e <pvPortMalloc+0x86>
 8004668:	4945      	ldr	r1, [pc, #276]	@ (8004780 <pvPortMalloc+0x188>)
 800466a:	209a      	movs	r0, #154	@ 0x9a
 800466c:	f7fc f990 	bl	8000990 <vAssertCalled>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004670:	e005      	b.n	800467e <pvPortMalloc+0x86>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004672:	2300      	movs	r3, #0
 8004674:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004676:	e002      	b.n	800467e <pvPortMalloc+0x86>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	607b      	str	r3, [r7, #4]
 800467c:	e000      	b.n	8004680 <pvPortMalloc+0x88>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800467e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d067      	beq.n	8004756 <pvPortMalloc+0x15e>
 8004686:	4b3f      	ldr	r3, [pc, #252]	@ (8004784 <pvPortMalloc+0x18c>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	429a      	cmp	r2, r3
 800468e:	d862      	bhi.n	8004756 <pvPortMalloc+0x15e>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004690:	4b3d      	ldr	r3, [pc, #244]	@ (8004788 <pvPortMalloc+0x190>)
 8004692:	613b      	str	r3, [r7, #16]
                pxBlock = xStart.pxNextFreeBlock;
 8004694:	4b3c      	ldr	r3, [pc, #240]	@ (8004788 <pvPortMalloc+0x190>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	617b      	str	r3, [r7, #20]

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800469a:	e004      	b.n	80046a6 <pvPortMalloc+0xae>
                {
                    pxPreviousBlock = pxBlock;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	613b      	str	r3, [r7, #16]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	617b      	str	r3, [r7, #20]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d903      	bls.n	80046b8 <pvPortMalloc+0xc0>
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d1f1      	bne.n	800469c <pvPortMalloc+0xa4>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80046b8:	4b2f      	ldr	r3, [pc, #188]	@ (8004778 <pvPortMalloc+0x180>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d049      	beq.n	8004756 <pvPortMalloc+0x15e>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2208      	movs	r2, #8
 80046c8:	4413      	add	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	1ad2      	subs	r2, r2, r3
 80046dc:	2308      	movs	r3, #8
 80046de:	005b      	lsls	r3, r3, #1
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d918      	bls.n	8004716 <pvPortMalloc+0x11e>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	4413      	add	r3, r2
 80046ea:	60bb      	str	r3, [r7, #8]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f003 0307 	and.w	r3, r3, #7
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d003      	beq.n	80046fe <pvPortMalloc+0x106>
 80046f6:	4922      	ldr	r1, [pc, #136]	@ (8004780 <pvPortMalloc+0x188>)
 80046f8:	20cd      	movs	r0, #205	@ 0xcd
 80046fa:	f7fc f949 	bl	8000990 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	685a      	ldr	r2, [r3, #4]
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	1ad2      	subs	r2, r2, r3
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	687a      	ldr	r2, [r7, #4]
 800470e:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004710:	68b8      	ldr	r0, [r7, #8]
 8004712:	f000 f8f9 	bl	8004908 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004716:	4b1b      	ldr	r3, [pc, #108]	@ (8004784 <pvPortMalloc+0x18c>)
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	4a18      	ldr	r2, [pc, #96]	@ (8004784 <pvPortMalloc+0x18c>)
 8004722:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004724:	4b17      	ldr	r3, [pc, #92]	@ (8004784 <pvPortMalloc+0x18c>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	4b18      	ldr	r3, [pc, #96]	@ (800478c <pvPortMalloc+0x194>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	429a      	cmp	r2, r3
 800472e:	d203      	bcs.n	8004738 <pvPortMalloc+0x140>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004730:	4b14      	ldr	r3, [pc, #80]	@ (8004784 <pvPortMalloc+0x18c>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a15      	ldr	r2, [pc, #84]	@ (800478c <pvPortMalloc+0x194>)
 8004736:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	685a      	ldr	r2, [r3, #4]
 800473c:	4b0f      	ldr	r3, [pc, #60]	@ (800477c <pvPortMalloc+0x184>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	431a      	orrs	r2, r3
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800474c:	4b10      	ldr	r3, [pc, #64]	@ (8004790 <pvPortMalloc+0x198>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3301      	adds	r3, #1
 8004752:	4a0f      	ldr	r2, [pc, #60]	@ (8004790 <pvPortMalloc+0x198>)
 8004754:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004756:	f7fe fd2f 	bl	80031b8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f003 0307 	and.w	r3, r3, #7
 8004760:	2b00      	cmp	r3, #0
 8004762:	d004      	beq.n	800476e <pvPortMalloc+0x176>
 8004764:	4906      	ldr	r1, [pc, #24]	@ (8004780 <pvPortMalloc+0x188>)
 8004766:	f44f 7087 	mov.w	r0, #270	@ 0x10e
 800476a:	f7fc f911 	bl	8000990 <vAssertCalled>
    return pvReturn;
 800476e:	68fb      	ldr	r3, [r7, #12]
}
 8004770:	4618      	mov	r0, r3
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	2000ba64 	.word	0x2000ba64
 800477c:	2000ba78 	.word	0x2000ba78
 8004780:	08007028 	.word	0x08007028
 8004784:	2000ba68 	.word	0x2000ba68
 8004788:	2000ba5c 	.word	0x2000ba5c
 800478c:	2000ba6c 	.word	0x2000ba6c
 8004790:	2000ba70 	.word	0x2000ba70

08004794 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d041      	beq.n	800482a <vPortFree+0x96>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80047a6:	2308      	movs	r3, #8
 80047a8:	425b      	negs	r3, r3
 80047aa:	68fa      	ldr	r2, [r7, #12]
 80047ac:	4413      	add	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	60bb      	str	r3, [r7, #8]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	4b1e      	ldr	r3, [pc, #120]	@ (8004834 <vPortFree+0xa0>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4013      	ands	r3, r2
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d104      	bne.n	80047cc <vPortFree+0x38>
 80047c2:	491d      	ldr	r1, [pc, #116]	@ (8004838 <vPortFree+0xa4>)
 80047c4:	f44f 7091 	mov.w	r0, #290	@ 0x122
 80047c8:	f7fc f8e2 	bl	8000990 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d004      	beq.n	80047de <vPortFree+0x4a>
 80047d4:	4918      	ldr	r1, [pc, #96]	@ (8004838 <vPortFree+0xa4>)
 80047d6:	f240 1023 	movw	r0, #291	@ 0x123
 80047da:	f7fc f8d9 	bl	8000990 <vAssertCalled>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	685a      	ldr	r2, [r3, #4]
 80047e2:	4b14      	ldr	r3, [pc, #80]	@ (8004834 <vPortFree+0xa0>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4013      	ands	r3, r2
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01e      	beq.n	800482a <vPortFree+0x96>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d11a      	bne.n	800482a <vPortFree+0x96>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004834 <vPortFree+0xa0>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	43db      	mvns	r3, r3
 80047fe:	401a      	ands	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004804:	f7fe fcca 	bl	800319c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	4b0b      	ldr	r3, [pc, #44]	@ (800483c <vPortFree+0xa8>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4413      	add	r3, r2
 8004812:	4a0a      	ldr	r2, [pc, #40]	@ (800483c <vPortFree+0xa8>)
 8004814:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004816:	68b8      	ldr	r0, [r7, #8]
 8004818:	f000 f876 	bl	8004908 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800481c:	4b08      	ldr	r3, [pc, #32]	@ (8004840 <vPortFree+0xac>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3301      	adds	r3, #1
 8004822:	4a07      	ldr	r2, [pc, #28]	@ (8004840 <vPortFree+0xac>)
 8004824:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004826:	f7fe fcc7 	bl	80031b8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800482a:	bf00      	nop
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	2000ba78 	.word	0x2000ba78
 8004838:	08007028 	.word	0x08007028
 800483c:	2000ba68 	.word	0x2000ba68
 8004840:	2000ba74 	.word	0x2000ba74

08004844 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800484a:	f44f 4338 	mov.w	r3, #47104	@ 0xb800
 800484e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004850:	4b27      	ldr	r3, [pc, #156]	@ (80048f0 <prvHeapInit+0xac>)
 8004852:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	2b00      	cmp	r3, #0
 800485c:	d00c      	beq.n	8004878 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	3307      	adds	r3, #7
 8004862:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f023 0307 	bic.w	r3, r3, #7
 800486a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800486c:	68ba      	ldr	r2, [r7, #8]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	4a1f      	ldr	r2, [pc, #124]	@ (80048f0 <prvHeapInit+0xac>)
 8004874:	4413      	add	r3, r2
 8004876:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800487c:	4a1d      	ldr	r2, [pc, #116]	@ (80048f4 <prvHeapInit+0xb0>)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004882:	4b1c      	ldr	r3, [pc, #112]	@ (80048f4 <prvHeapInit+0xb0>)
 8004884:	2200      	movs	r2, #0
 8004886:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	4413      	add	r3, r2
 800488e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004890:	2208      	movs	r2, #8
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	1a9b      	subs	r3, r3, r2
 8004896:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f023 0307 	bic.w	r3, r3, #7
 800489e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4a15      	ldr	r2, [pc, #84]	@ (80048f8 <prvHeapInit+0xb4>)
 80048a4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80048a6:	4b14      	ldr	r3, [pc, #80]	@ (80048f8 <prvHeapInit+0xb4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2200      	movs	r2, #0
 80048ac:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80048ae:	4b12      	ldr	r3, [pc, #72]	@ (80048f8 <prvHeapInit+0xb4>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	1ad2      	subs	r2, r2, r3
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80048c4:	4b0c      	ldr	r3, [pc, #48]	@ (80048f8 <prvHeapInit+0xb4>)
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	4a0a      	ldr	r2, [pc, #40]	@ (80048fc <prvHeapInit+0xb8>)
 80048d2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	4a09      	ldr	r2, [pc, #36]	@ (8004900 <prvHeapInit+0xbc>)
 80048da:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80048dc:	4b09      	ldr	r3, [pc, #36]	@ (8004904 <prvHeapInit+0xc0>)
 80048de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80048e2:	601a      	str	r2, [r3, #0]
}
 80048e4:	bf00      	nop
 80048e6:	3714      	adds	r7, #20
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr
 80048f0:	2000025c 	.word	0x2000025c
 80048f4:	2000ba5c 	.word	0x2000ba5c
 80048f8:	2000ba64 	.word	0x2000ba64
 80048fc:	2000ba6c 	.word	0x2000ba6c
 8004900:	2000ba68 	.word	0x2000ba68
 8004904:	2000ba78 	.word	0x2000ba78

08004908 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004910:	4b28      	ldr	r3, [pc, #160]	@ (80049b4 <prvInsertBlockIntoFreeList+0xac>)
 8004912:	60fb      	str	r3, [r7, #12]
 8004914:	e002      	b.n	800491c <prvInsertBlockIntoFreeList+0x14>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	60fb      	str	r3, [r7, #12]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	429a      	cmp	r2, r3
 8004924:	d8f7      	bhi.n	8004916 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	4413      	add	r3, r2
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	429a      	cmp	r2, r3
 8004936:	d108      	bne.n	800494a <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685a      	ldr	r2, [r3, #4]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	441a      	add	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	441a      	add	r2, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d118      	bne.n	8004990 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	4b15      	ldr	r3, [pc, #84]	@ (80049b8 <prvInsertBlockIntoFreeList+0xb0>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	429a      	cmp	r2, r3
 8004968:	d00d      	beq.n	8004986 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685a      	ldr	r2, [r3, #4]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	441a      	add	r2, r3
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	601a      	str	r2, [r3, #0]
 8004984:	e008      	b.n	8004998 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004986:	4b0c      	ldr	r3, [pc, #48]	@ (80049b8 <prvInsertBlockIntoFreeList+0xb0>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	601a      	str	r2, [r3, #0]
 800498e:	e003      	b.n	8004998 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	429a      	cmp	r2, r3
 800499e:	d002      	beq.n	80049a6 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80049a6:	bf00      	nop
 80049a8:	3714      	adds	r7, #20
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	2000ba5c 	.word	0x2000ba5c
 80049b8:	2000ba64 	.word	0x2000ba64

080049bc <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80049c0:	4803      	ldr	r0, [pc, #12]	@ (80049d0 <_cbSendSystemDesc+0x14>)
 80049c2:	f001 fae9 	bl	8005f98 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80049c6:	4803      	ldr	r0, [pc, #12]	@ (80049d4 <_cbSendSystemDesc+0x18>)
 80049c8:	f001 fae6 	bl	8005f98 <SEGGER_SYSVIEW_SendSysDesc>
}
 80049cc:	bf00      	nop
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	0800705c 	.word	0x0800705c
 80049d4:	080070a0 	.word	0x080070a0

080049d8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80049dc:	4b06      	ldr	r3, [pc, #24]	@ (80049f8 <SEGGER_SYSVIEW_Conf+0x20>)
 80049de:	6818      	ldr	r0, [r3, #0]
 80049e0:	4b05      	ldr	r3, [pc, #20]	@ (80049f8 <SEGGER_SYSVIEW_Conf+0x20>)
 80049e2:	6819      	ldr	r1, [r3, #0]
 80049e4:	4b05      	ldr	r3, [pc, #20]	@ (80049fc <SEGGER_SYSVIEW_Conf+0x24>)
 80049e6:	4a06      	ldr	r2, [pc, #24]	@ (8004a00 <SEGGER_SYSVIEW_Conf+0x28>)
 80049e8:	f000 fe54 	bl	8005694 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80049ec:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80049f0:	f000 fe94 	bl	800571c <SEGGER_SYSVIEW_SetRAMBase>
}
 80049f4:	bf00      	nop
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	20000000 	.word	0x20000000
 80049fc:	080049bd 	.word	0x080049bd
 8004a00:	08007144 	.word	0x08007144

08004a04 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	607b      	str	r3, [r7, #4]
 8004a0e:	e033      	b.n	8004a78 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004a10:	491e      	ldr	r1, [pc, #120]	@ (8004a8c <_cbSendTaskList+0x88>)
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	4613      	mov	r3, r2
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	6818      	ldr	r0, [r3, #0]
 8004a20:	491a      	ldr	r1, [pc, #104]	@ (8004a8c <_cbSendTaskList+0x88>)
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	4613      	mov	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	4413      	add	r3, r2
 8004a2a:	009b      	lsls	r3, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	3304      	adds	r3, #4
 8004a30:	6819      	ldr	r1, [r3, #0]
 8004a32:	4c16      	ldr	r4, [pc, #88]	@ (8004a8c <_cbSendTaskList+0x88>)
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	4413      	add	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4423      	add	r3, r4
 8004a40:	3308      	adds	r3, #8
 8004a42:	681c      	ldr	r4, [r3, #0]
 8004a44:	4d11      	ldr	r5, [pc, #68]	@ (8004a8c <_cbSendTaskList+0x88>)
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	009b      	lsls	r3, r3, #2
 8004a4c:	4413      	add	r3, r2
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	442b      	add	r3, r5
 8004a52:	330c      	adds	r3, #12
 8004a54:	681d      	ldr	r5, [r3, #0]
 8004a56:	4e0d      	ldr	r6, [pc, #52]	@ (8004a8c <_cbSendTaskList+0x88>)
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	4413      	add	r3, r2
 8004a60:	009b      	lsls	r3, r3, #2
 8004a62:	4433      	add	r3, r6
 8004a64:	3310      	adds	r3, #16
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	462b      	mov	r3, r5
 8004a6c:	4622      	mov	r2, r4
 8004a6e:	f000 f8bd 	bl	8004bec <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	3301      	adds	r3, #1
 8004a76:	607b      	str	r3, [r7, #4]
 8004a78:	4b05      	ldr	r3, [pc, #20]	@ (8004a90 <_cbSendTaskList+0x8c>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	687a      	ldr	r2, [r7, #4]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d3c6      	bcc.n	8004a10 <_cbSendTaskList+0xc>
  }
}
 8004a82:	bf00      	nop
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a8c:	2000ba7c 	.word	0x2000ba7c
 8004a90:	2000bb1c 	.word	0x2000bb1c

08004a94 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a98:	b082      	sub	sp, #8
 8004a9a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004a9c:	f7fe fc38 	bl	8003310 <xTaskGetTickCountFromISR>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	469a      	mov	sl, r3
 8004aa6:	4693      	mov	fp, r2
 8004aa8:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004aac:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	460b      	mov	r3, r1
 8004ab4:	f04f 0a00 	mov.w	sl, #0
 8004ab8:	f04f 0b00 	mov.w	fp, #0
 8004abc:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004ac0:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004ac4:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004ac8:	4652      	mov	r2, sl
 8004aca:	465b      	mov	r3, fp
 8004acc:	1a14      	subs	r4, r2, r0
 8004ace:	eb63 0501 	sbc.w	r5, r3, r1
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	00ab      	lsls	r3, r5, #2
 8004adc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004ae0:	00a2      	lsls	r2, r4, #2
 8004ae2:	4614      	mov	r4, r2
 8004ae4:	461d      	mov	r5, r3
 8004ae6:	eb14 0800 	adds.w	r8, r4, r0
 8004aea:	eb45 0901 	adc.w	r9, r5, r1
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004afa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004afe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004b02:	4690      	mov	r8, r2
 8004b04:	4699      	mov	r9, r3
 8004b06:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004b0a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004b0e:	4610      	mov	r0, r2
 8004b10:	4619      	mov	r1, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004b1c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b086      	sub	sp, #24
 8004b20:	af02      	add	r7, sp, #8
 8004b22:	60f8      	str	r0, [r7, #12]
 8004b24:	60b9      	str	r1, [r7, #8]
 8004b26:	607a      	str	r2, [r7, #4]
 8004b28:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004b2a:	2205      	movs	r2, #5
 8004b2c:	492b      	ldr	r1, [pc, #172]	@ (8004bdc <SYSVIEW_AddTask+0xc0>)
 8004b2e:	68b8      	ldr	r0, [r7, #8]
 8004b30:	f001 ff1c 	bl	800696c <memcmp>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d04b      	beq.n	8004bd2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004b3a:	4b29      	ldr	r3, [pc, #164]	@ (8004be0 <SYSVIEW_AddTask+0xc4>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b07      	cmp	r3, #7
 8004b40:	d903      	bls.n	8004b4a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004b42:	4828      	ldr	r0, [pc, #160]	@ (8004be4 <SYSVIEW_AddTask+0xc8>)
 8004b44:	f001 fcac 	bl	80064a0 <SEGGER_SYSVIEW_Warn>
    return;
 8004b48:	e044      	b.n	8004bd4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004b4a:	4b25      	ldr	r3, [pc, #148]	@ (8004be0 <SYSVIEW_AddTask+0xc4>)
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	4926      	ldr	r1, [pc, #152]	@ (8004be8 <SYSVIEW_AddTask+0xcc>)
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004b5e:	4b20      	ldr	r3, [pc, #128]	@ (8004be0 <SYSVIEW_AddTask+0xc4>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	4921      	ldr	r1, [pc, #132]	@ (8004be8 <SYSVIEW_AddTask+0xcc>)
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	440b      	add	r3, r1
 8004b6e:	3304      	adds	r3, #4
 8004b70:	68ba      	ldr	r2, [r7, #8]
 8004b72:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004b74:	4b1a      	ldr	r3, [pc, #104]	@ (8004be0 <SYSVIEW_AddTask+0xc4>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	491b      	ldr	r1, [pc, #108]	@ (8004be8 <SYSVIEW_AddTask+0xcc>)
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	009b      	lsls	r3, r3, #2
 8004b7e:	4413      	add	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	440b      	add	r3, r1
 8004b84:	3308      	adds	r3, #8
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004b8a:	4b15      	ldr	r3, [pc, #84]	@ (8004be0 <SYSVIEW_AddTask+0xc4>)
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	4916      	ldr	r1, [pc, #88]	@ (8004be8 <SYSVIEW_AddTask+0xcc>)
 8004b90:	4613      	mov	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	440b      	add	r3, r1
 8004b9a:	330c      	adds	r3, #12
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8004be0 <SYSVIEW_AddTask+0xc4>)
 8004ba2:	681a      	ldr	r2, [r3, #0]
 8004ba4:	4910      	ldr	r1, [pc, #64]	@ (8004be8 <SYSVIEW_AddTask+0xcc>)
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4413      	add	r3, r2
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	440b      	add	r3, r1
 8004bb0:	3310      	adds	r3, #16
 8004bb2:	69ba      	ldr	r2, [r7, #24]
 8004bb4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004be0 <SYSVIEW_AddTask+0xc4>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	3301      	adds	r3, #1
 8004bbc:	4a08      	ldr	r2, [pc, #32]	@ (8004be0 <SYSVIEW_AddTask+0xc4>)
 8004bbe:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004bc0:	69bb      	ldr	r3, [r7, #24]
 8004bc2:	9300      	str	r3, [sp, #0]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	68b9      	ldr	r1, [r7, #8]
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f000 f80e 	bl	8004bec <SYSVIEW_SendTaskInfo>
 8004bd0:	e000      	b.n	8004bd4 <SYSVIEW_AddTask+0xb8>
    return;
 8004bd2:	bf00      	nop

}
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	080070b0 	.word	0x080070b0
 8004be0:	2000bb1c 	.word	0x2000bb1c
 8004be4:	080070b8 	.word	0x080070b8
 8004be8:	2000ba7c 	.word	0x2000ba7c

08004bec <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08a      	sub	sp, #40	@ 0x28
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	607a      	str	r2, [r7, #4]
 8004bf8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004bfa:	f107 0314 	add.w	r3, r7, #20
 8004bfe:	2214      	movs	r2, #20
 8004c00:	2100      	movs	r1, #0
 8004c02:	4618      	mov	r0, r3
 8004c04:	f001 fec2 	bl	800698c <memset>
  TaskInfo.TaskID     = TaskID;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c1a:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004c1c:	f107 0314 	add.w	r3, r7, #20
 8004c20:	4618      	mov	r0, r3
 8004c22:	f001 f8c1 	bl	8005da8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004c26:	bf00      	nop
 8004c28:	3728      	adds	r7, #40	@ 0x28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
	...

08004c30 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004c36:	4b24      	ldr	r3, [pc, #144]	@ (8004cc8 <_DoInit+0x98>)
 8004c38:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2203      	movs	r2, #3
 8004c3e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2203      	movs	r2, #3
 8004c44:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a20      	ldr	r2, [pc, #128]	@ (8004ccc <_DoInit+0x9c>)
 8004c4a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a20      	ldr	r2, [pc, #128]	@ (8004cd0 <_DoInit+0xa0>)
 8004c50:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004c58:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a17      	ldr	r2, [pc, #92]	@ (8004ccc <_DoInit+0x9c>)
 8004c70:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a17      	ldr	r2, [pc, #92]	@ (8004cd4 <_DoInit+0xa4>)
 8004c76:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2210      	movs	r2, #16
 8004c7c:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3307      	adds	r3, #7
 8004c94:	4a10      	ldr	r2, [pc, #64]	@ (8004cd8 <_DoInit+0xa8>)
 8004c96:	6810      	ldr	r0, [r2, #0]
 8004c98:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004c9a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a0e      	ldr	r2, [pc, #56]	@ (8004cdc <_DoInit+0xac>)
 8004ca2:	6810      	ldr	r0, [r2, #0]
 8004ca4:	6018      	str	r0, [r3, #0]
 8004ca6:	8891      	ldrh	r1, [r2, #4]
 8004ca8:	7992      	ldrb	r2, [r2, #6]
 8004caa:	8099      	strh	r1, [r3, #4]
 8004cac:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004cae:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004cb8:	f3bf 8f5f 	dmb	sy
}
 8004cbc:	bf00      	nop
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr
 8004cc8:	2000bb20 	.word	0x2000bb20
 8004ccc:	08007108 	.word	0x08007108
 8004cd0:	2000bbc8 	.word	0x2000bbc8
 8004cd4:	2000bfc8 	.word	0x2000bfc8
 8004cd8:	08007114 	.word	0x08007114
 8004cdc:	08007118 	.word	0x08007118

08004ce0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b08a      	sub	sp, #40	@ 0x28
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	60f8      	str	r0, [r7, #12]
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004cec:	2300      	movs	r3, #0
 8004cee:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004cfc:	69ba      	ldr	r2, [r7, #24]
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d905      	bls.n	8004d10 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d0e:	e007      	b.n	8004d20 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	69b9      	ldr	r1, [r7, #24]
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	1acb      	subs	r3, r1, r3
 8004d1a:	4413      	add	r3, r2
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	bf28      	it	cs
 8004d2e:	4613      	movcs	r3, r2
 8004d30:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004d32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	4293      	cmp	r3, r2
 8004d38:	bf28      	it	cs
 8004d3a:	4613      	movcs	r3, r2
 8004d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	4413      	add	r3, r2
 8004d46:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	6978      	ldr	r0, [r7, #20]
 8004d4e:	f001 fe80 	bl	8006a52 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004d52:	6a3a      	ldr	r2, [r7, #32]
 8004d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d56:	4413      	add	r3, r2
 8004d58:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004d5a:	68ba      	ldr	r2, [r7, #8]
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5e:	4413      	add	r3, r2
 8004d60:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004d6a:	69fa      	ldr	r2, [r7, #28]
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d6e:	4413      	add	r3, r2
 8004d70:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	69fa      	ldr	r2, [r7, #28]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d101      	bne.n	8004d80 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004d80:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1b2      	bne.n	8004cf6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004d90:	6a3b      	ldr	r3, [r7, #32]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3728      	adds	r7, #40	@ 0x28
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}

08004d9a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004d9a:	b580      	push	{r7, lr}
 8004d9c:	b088      	sub	sp, #32
 8004d9e:	af00      	add	r7, sp, #0
 8004da0:	60f8      	str	r0, [r7, #12]
 8004da2:	60b9      	str	r1, [r7, #8]
 8004da4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004db6:	69ba      	ldr	r2, [r7, #24]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d911      	bls.n	8004de2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	685a      	ldr	r2, [r3, #4]
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	68b9      	ldr	r1, [r7, #8]
 8004dcc:	6938      	ldr	r0, [r7, #16]
 8004dce:	f001 fe40 	bl	8006a52 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004dd2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004dd6:	69fa      	ldr	r2, [r7, #28]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	441a      	add	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004de0:	e01f      	b.n	8004e22 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	4413      	add	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004df0:	697a      	ldr	r2, [r7, #20]
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	6938      	ldr	r0, [r7, #16]
 8004df6:	f001 fe2c 	bl	8006a52 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	697a      	ldr	r2, [r7, #20]
 8004e10:	4619      	mov	r1, r3
 8004e12:	6938      	ldr	r0, [r7, #16]
 8004e14:	f001 fe1d 	bl	8006a52 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004e18:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	697a      	ldr	r2, [r7, #20]
 8004e20:	60da      	str	r2, [r3, #12]
}
 8004e22:	bf00      	nop
 8004e24:	3720      	adds	r7, #32
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}

08004e2a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004e2a:	b480      	push	{r7}
 8004e2c:	b087      	sub	sp, #28
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	691b      	ldr	r3, [r3, #16]
 8004e36:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d808      	bhi.n	8004e58 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689a      	ldr	r2, [r3, #8]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	1ad2      	subs	r2, r2, r3
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	4413      	add	r3, r2
 8004e52:	3b01      	subs	r3, #1
 8004e54:	617b      	str	r3, [r7, #20]
 8004e56:	e004      	b.n	8004e62 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004e58:	693a      	ldr	r2, [r7, #16]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004e62:	697b      	ldr	r3, [r7, #20]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	371c      	adds	r7, #28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6e:	4770      	bx	lr

08004e70 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b08c      	sub	sp, #48	@ 0x30
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004e7c:	4b3e      	ldr	r3, [pc, #248]	@ (8004f78 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e7e:	623b      	str	r3, [r7, #32]
 8004e80:	6a3b      	ldr	r3, [r7, #32]
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <SEGGER_RTT_ReadNoLock+0x1e>
 8004e8a:	f7ff fed1 	bl	8004c30 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	4613      	mov	r3, r2
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	4413      	add	r3, r2
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	3360      	adds	r3, #96	@ 0x60
 8004e9a:	4a37      	ldr	r2, [pc, #220]	@ (8004f78 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e9c:	4413      	add	r3, r2
 8004e9e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	691b      	ldr	r3, [r3, #16]
 8004ea8:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004eb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d92b      	bls.n	8004f14 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	bf28      	it	cs
 8004ece:	4613      	movcs	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ed8:	4413      	add	r3, r2
 8004eda:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	6939      	ldr	r1, [r7, #16]
 8004ee0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ee2:	f001 fdb6 	bl	8006a52 <memcpy>
    NumBytesRead += NumBytesRem;
 8004ee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	4413      	add	r3, r2
 8004eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004eee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004efe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	4413      	add	r3, r2
 8004f04:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d101      	bne.n	8004f14 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004f10:	2300      	movs	r3, #0
 8004f12:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f1c:	697a      	ldr	r2, [r7, #20]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4293      	cmp	r3, r2
 8004f22:	bf28      	it	cs
 8004f24:	4613      	movcs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d019      	beq.n	8004f62 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	685a      	ldr	r2, [r3, #4]
 8004f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f34:	4413      	add	r3, r2
 8004f36:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	6939      	ldr	r1, [r7, #16]
 8004f3c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f3e:	f001 fd88 	bl	8006a52 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	4413      	add	r3, r2
 8004f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	4413      	add	r3, r2
 8004f50:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	4413      	add	r3, r2
 8004f60:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f6c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	3730      	adds	r7, #48	@ 0x30
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	2000bb20 	.word	0x2000bb20

08004f7c <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b088      	sub	sp, #32
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	60f8      	str	r0, [r7, #12]
 8004f84:	60b9      	str	r1, [r7, #8]
 8004f86:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	4613      	mov	r3, r2
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	4413      	add	r3, r2
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	4a1f      	ldr	r2, [pc, #124]	@ (8005018 <SEGGER_RTT_WriteNoLock+0x9c>)
 8004f9a:	4413      	add	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	2b02      	cmp	r3, #2
 8004fa4:	d029      	beq.n	8004ffa <SEGGER_RTT_WriteNoLock+0x7e>
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d82e      	bhi.n	8005008 <SEGGER_RTT_WriteNoLock+0x8c>
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d002      	beq.n	8004fb4 <SEGGER_RTT_WriteNoLock+0x38>
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d013      	beq.n	8004fda <SEGGER_RTT_WriteNoLock+0x5e>
 8004fb2:	e029      	b.n	8005008 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004fb4:	6978      	ldr	r0, [r7, #20]
 8004fb6:	f7ff ff38 	bl	8004e2a <_GetAvailWriteSpace>
 8004fba:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004fbc:	693a      	ldr	r2, [r7, #16]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d202      	bcs.n	8004fca <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004fc8:	e021      	b.n	800500e <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	69b9      	ldr	r1, [r7, #24]
 8004fd2:	6978      	ldr	r0, [r7, #20]
 8004fd4:	f7ff fee1 	bl	8004d9a <_WriteNoCheck>
    break;
 8004fd8:	e019      	b.n	800500e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004fda:	6978      	ldr	r0, [r7, #20]
 8004fdc:	f7ff ff25 	bl	8004e2a <_GetAvailWriteSpace>
 8004fe0:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004fe2:	687a      	ldr	r2, [r7, #4]
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	bf28      	it	cs
 8004fea:	4613      	movcs	r3, r2
 8004fec:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004fee:	69fa      	ldr	r2, [r7, #28]
 8004ff0:	69b9      	ldr	r1, [r7, #24]
 8004ff2:	6978      	ldr	r0, [r7, #20]
 8004ff4:	f7ff fed1 	bl	8004d9a <_WriteNoCheck>
    break;
 8004ff8:	e009      	b.n	800500e <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	69b9      	ldr	r1, [r7, #24]
 8004ffe:	6978      	ldr	r0, [r7, #20]
 8005000:	f7ff fe6e 	bl	8004ce0 <_WriteBlocking>
 8005004:	61f8      	str	r0, [r7, #28]
    break;
 8005006:	e002      	b.n	800500e <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8005008:	2300      	movs	r3, #0
 800500a:	61fb      	str	r3, [r7, #28]
    break;
 800500c:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800500e:	69fb      	ldr	r3, [r7, #28]
}
 8005010:	4618      	mov	r0, r3
 8005012:	3720      	adds	r7, #32
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	2000bb20 	.word	0x2000bb20

0800501c <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800501c:	b580      	push	{r7, lr}
 800501e:	b088      	sub	sp, #32
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005028:	4b0e      	ldr	r3, [pc, #56]	@ (8005064 <SEGGER_RTT_Write+0x48>)
 800502a:	61fb      	str	r3, [r7, #28]
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b00      	cmp	r3, #0
 8005034:	d101      	bne.n	800503a <SEGGER_RTT_Write+0x1e>
 8005036:	f7ff fdfb 	bl	8004c30 <_DoInit>
  SEGGER_RTT_LOCK();
 800503a:	f3ef 8311 	mrs	r3, BASEPRI
 800503e:	f04f 0120 	mov.w	r1, #32
 8005042:	f381 8811 	msr	BASEPRI, r1
 8005046:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	68b9      	ldr	r1, [r7, #8]
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f7ff ff95 	bl	8004f7c <SEGGER_RTT_WriteNoLock>
 8005052:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800505a:	697b      	ldr	r3, [r7, #20]
}
 800505c:	4618      	mov	r0, r3
 800505e:	3720      	adds	r7, #32
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	2000bb20 	.word	0x2000bb20

08005068 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005068:	b580      	push	{r7, lr}
 800506a:	b088      	sub	sp, #32
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
 8005074:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005076:	4b3d      	ldr	r3, [pc, #244]	@ (800516c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005078:	61bb      	str	r3, [r7, #24]
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	d101      	bne.n	8005088 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005084:	f7ff fdd4 	bl	8004c30 <_DoInit>
  SEGGER_RTT_LOCK();
 8005088:	f3ef 8311 	mrs	r3, BASEPRI
 800508c:	f04f 0120 	mov.w	r1, #32
 8005090:	f381 8811 	msr	BASEPRI, r1
 8005094:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005096:	4b35      	ldr	r3, [pc, #212]	@ (800516c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005098:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800509a:	2300      	movs	r3, #0
 800509c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800509e:	6939      	ldr	r1, [r7, #16]
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	4613      	mov	r3, r2
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	4413      	add	r3, r2
 80050aa:	00db      	lsls	r3, r3, #3
 80050ac:	440b      	add	r3, r1
 80050ae:	3304      	adds	r3, #4
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d008      	beq.n	80050c8 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	3301      	adds	r3, #1
 80050ba:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	69fa      	ldr	r2, [r7, #28]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	dbeb      	blt.n	800509e <SEGGER_RTT_AllocUpBuffer+0x36>
 80050c6:	e000      	b.n	80050ca <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80050c8:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	691b      	ldr	r3, [r3, #16]
 80050ce:	69fa      	ldr	r2, [r7, #28]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	da3f      	bge.n	8005154 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80050d4:	6939      	ldr	r1, [r7, #16]
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	4613      	mov	r3, r2
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	4413      	add	r3, r2
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	440b      	add	r3, r1
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80050e8:	6939      	ldr	r1, [r7, #16]
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	4613      	mov	r3, r2
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	4413      	add	r3, r2
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	440b      	add	r3, r1
 80050f8:	3304      	adds	r3, #4
 80050fa:	68ba      	ldr	r2, [r7, #8]
 80050fc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80050fe:	6939      	ldr	r1, [r7, #16]
 8005100:	69fa      	ldr	r2, [r7, #28]
 8005102:	4613      	mov	r3, r2
 8005104:	005b      	lsls	r3, r3, #1
 8005106:	4413      	add	r3, r2
 8005108:	00db      	lsls	r3, r3, #3
 800510a:	440b      	add	r3, r1
 800510c:	3320      	adds	r3, #32
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005112:	6939      	ldr	r1, [r7, #16]
 8005114:	69fa      	ldr	r2, [r7, #28]
 8005116:	4613      	mov	r3, r2
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	4413      	add	r3, r2
 800511c:	00db      	lsls	r3, r3, #3
 800511e:	440b      	add	r3, r1
 8005120:	3328      	adds	r3, #40	@ 0x28
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005126:	6939      	ldr	r1, [r7, #16]
 8005128:	69fa      	ldr	r2, [r7, #28]
 800512a:	4613      	mov	r3, r2
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	4413      	add	r3, r2
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	440b      	add	r3, r1
 8005134:	3324      	adds	r3, #36	@ 0x24
 8005136:	2200      	movs	r2, #0
 8005138:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800513a:	6939      	ldr	r1, [r7, #16]
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	4613      	mov	r3, r2
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	4413      	add	r3, r2
 8005144:	00db      	lsls	r3, r3, #3
 8005146:	440b      	add	r3, r1
 8005148:	332c      	adds	r3, #44	@ 0x2c
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800514e:	f3bf 8f5f 	dmb	sy
 8005152:	e002      	b.n	800515a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005154:	f04f 33ff 	mov.w	r3, #4294967295
 8005158:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005160:	69fb      	ldr	r3, [r7, #28]
}
 8005162:	4618      	mov	r0, r3
 8005164:	3720      	adds	r7, #32
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	2000bb20 	.word	0x2000bb20

08005170 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005170:	b580      	push	{r7, lr}
 8005172:	b088      	sub	sp, #32
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
 800517c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800517e:	4b33      	ldr	r3, [pc, #204]	@ (800524c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005180:	61bb      	str	r3, [r7, #24]
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800518c:	f7ff fd50 	bl	8004c30 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005190:	4b2e      	ldr	r3, [pc, #184]	@ (800524c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005192:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	461a      	mov	r2, r3
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	4293      	cmp	r3, r2
 800519e:	d24d      	bcs.n	800523c <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 80051a0:	f3ef 8311 	mrs	r3, BASEPRI
 80051a4:	f04f 0120 	mov.w	r1, #32
 80051a8:	f381 8811 	msr	BASEPRI, r1
 80051ac:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d031      	beq.n	8005218 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80051b4:	6979      	ldr	r1, [r7, #20]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	4613      	mov	r3, r2
 80051ba:	005b      	lsls	r3, r3, #1
 80051bc:	4413      	add	r3, r2
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	440b      	add	r3, r1
 80051c2:	3360      	adds	r3, #96	@ 0x60
 80051c4:	68ba      	ldr	r2, [r7, #8]
 80051c6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80051c8:	6979      	ldr	r1, [r7, #20]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4613      	mov	r3, r2
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	4413      	add	r3, r2
 80051d2:	00db      	lsls	r3, r3, #3
 80051d4:	440b      	add	r3, r1
 80051d6:	3364      	adds	r3, #100	@ 0x64
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80051dc:	6979      	ldr	r1, [r7, #20]
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	4613      	mov	r3, r2
 80051e2:	005b      	lsls	r3, r3, #1
 80051e4:	4413      	add	r3, r2
 80051e6:	00db      	lsls	r3, r3, #3
 80051e8:	440b      	add	r3, r1
 80051ea:	3368      	adds	r3, #104	@ 0x68
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80051f0:	6979      	ldr	r1, [r7, #20]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	4613      	mov	r3, r2
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	4413      	add	r3, r2
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	440b      	add	r3, r1
 80051fe:	3370      	adds	r3, #112	@ 0x70
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005204:	6979      	ldr	r1, [r7, #20]
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	4613      	mov	r3, r2
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	4413      	add	r3, r2
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	440b      	add	r3, r1
 8005212:	336c      	adds	r3, #108	@ 0x6c
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005218:	6979      	ldr	r1, [r7, #20]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4613      	mov	r3, r2
 800521e:	005b      	lsls	r3, r3, #1
 8005220:	4413      	add	r3, r2
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	440b      	add	r3, r1
 8005226:	3374      	adds	r3, #116	@ 0x74
 8005228:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800522a:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800522c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005236:	2300      	movs	r3, #0
 8005238:	61fb      	str	r3, [r7, #28]
 800523a:	e002      	b.n	8005242 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 800523c:	f04f 33ff 	mov.w	r3, #4294967295
 8005240:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005242:	69fb      	ldr	r3, [r7, #28]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3720      	adds	r7, #32
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}
 800524c:	2000bb20 	.word	0x2000bb20

08005250 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800525c:	2300      	movs	r3, #0
 800525e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005260:	e002      	b.n	8005268 <_EncodeStr+0x18>
    Len++;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	3301      	adds	r3, #1
 8005266:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	4413      	add	r3, r2
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1f6      	bne.n	8005262 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	429a      	cmp	r2, r3
 800527a:	d901      	bls.n	8005280 <_EncodeStr+0x30>
    Len = Limit;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	2bfe      	cmp	r3, #254	@ 0xfe
 8005284:	d806      	bhi.n	8005294 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	60fa      	str	r2, [r7, #12]
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	701a      	strb	r2, [r3, #0]
 8005292:	e011      	b.n	80052b8 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	60fa      	str	r2, [r7, #12]
 800529a:	22ff      	movs	r2, #255	@ 0xff
 800529c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	1c5a      	adds	r2, r3, #1
 80052a2:	60fa      	str	r2, [r7, #12]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	b2d2      	uxtb	r2, r2
 80052a8:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	0a19      	lsrs	r1, r3, #8
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	60fa      	str	r2, [r7, #12]
 80052b4:	b2ca      	uxtb	r2, r1
 80052b6:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80052b8:	2300      	movs	r3, #0
 80052ba:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80052bc:	e00a      	b.n	80052d4 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	1c53      	adds	r3, r2, #1
 80052c2:	60bb      	str	r3, [r7, #8]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	1c59      	adds	r1, r3, #1
 80052c8:	60f9      	str	r1, [r7, #12]
 80052ca:	7812      	ldrb	r2, [r2, #0]
 80052cc:	701a      	strb	r2, [r3, #0]
    n++;
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	3301      	adds	r3, #1
 80052d2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d3f0      	bcc.n	80052be <_EncodeStr+0x6e>
  }
  return pPayload;
 80052dc:	68fb      	ldr	r3, [r7, #12]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	371c      	adds	r7, #28
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr

080052ea <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80052ea:	b480      	push	{r7}
 80052ec:	b083      	sub	sp, #12
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	3304      	adds	r3, #4
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	370c      	adds	r7, #12
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
	...

08005304 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800530a:	4b35      	ldr	r3, [pc, #212]	@ (80053e0 <_HandleIncomingPacket+0xdc>)
 800530c:	7e1b      	ldrb	r3, [r3, #24]
 800530e:	4618      	mov	r0, r3
 8005310:	1cfb      	adds	r3, r7, #3
 8005312:	2201      	movs	r2, #1
 8005314:	4619      	mov	r1, r3
 8005316:	f7ff fdab 	bl	8004e70 <SEGGER_RTT_ReadNoLock>
 800531a:	4603      	mov	r3, r0
 800531c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2b00      	cmp	r3, #0
 8005322:	dd59      	ble.n	80053d8 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	2b80      	cmp	r3, #128	@ 0x80
 8005328:	d032      	beq.n	8005390 <_HandleIncomingPacket+0x8c>
 800532a:	2b80      	cmp	r3, #128	@ 0x80
 800532c:	dc42      	bgt.n	80053b4 <_HandleIncomingPacket+0xb0>
 800532e:	2b07      	cmp	r3, #7
 8005330:	dc16      	bgt.n	8005360 <_HandleIncomingPacket+0x5c>
 8005332:	2b00      	cmp	r3, #0
 8005334:	dd3e      	ble.n	80053b4 <_HandleIncomingPacket+0xb0>
 8005336:	3b01      	subs	r3, #1
 8005338:	2b06      	cmp	r3, #6
 800533a:	d83b      	bhi.n	80053b4 <_HandleIncomingPacket+0xb0>
 800533c:	a201      	add	r2, pc, #4	@ (adr r2, 8005344 <_HandleIncomingPacket+0x40>)
 800533e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005342:	bf00      	nop
 8005344:	08005367 	.word	0x08005367
 8005348:	0800536d 	.word	0x0800536d
 800534c:	08005373 	.word	0x08005373
 8005350:	08005379 	.word	0x08005379
 8005354:	0800537f 	.word	0x0800537f
 8005358:	08005385 	.word	0x08005385
 800535c:	0800538b 	.word	0x0800538b
 8005360:	2b7f      	cmp	r3, #127	@ 0x7f
 8005362:	d034      	beq.n	80053ce <_HandleIncomingPacket+0xca>
 8005364:	e026      	b.n	80053b4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005366:	f000 fba5 	bl	8005ab4 <SEGGER_SYSVIEW_Start>
      break;
 800536a:	e035      	b.n	80053d8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800536c:	f000 fc5c 	bl	8005c28 <SEGGER_SYSVIEW_Stop>
      break;
 8005370:	e032      	b.n	80053d8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005372:	f000 fe35 	bl	8005fe0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005376:	e02f      	b.n	80053d8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005378:	f000 fdfa 	bl	8005f70 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800537c:	e02c      	b.n	80053d8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800537e:	f000 fc79 	bl	8005c74 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005382:	e029      	b.n	80053d8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005384:	f001 f84e 	bl	8006424 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005388:	e026      	b.n	80053d8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800538a:	f001 f82d 	bl	80063e8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800538e:	e023      	b.n	80053d8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005390:	4b13      	ldr	r3, [pc, #76]	@ (80053e0 <_HandleIncomingPacket+0xdc>)
 8005392:	7e1b      	ldrb	r3, [r3, #24]
 8005394:	4618      	mov	r0, r3
 8005396:	1cfb      	adds	r3, r7, #3
 8005398:	2201      	movs	r2, #1
 800539a:	4619      	mov	r1, r3
 800539c:	f7ff fd68 	bl	8004e70 <SEGGER_RTT_ReadNoLock>
 80053a0:	4603      	mov	r3, r0
 80053a2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	dd13      	ble.n	80053d2 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80053aa:	78fb      	ldrb	r3, [r7, #3]
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 ff9b 	bl	80062e8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80053b2:	e00e      	b.n	80053d2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80053b4:	78fb      	ldrb	r3, [r7, #3]
 80053b6:	b25b      	sxtb	r3, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	da0c      	bge.n	80053d6 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80053bc:	4b08      	ldr	r3, [pc, #32]	@ (80053e0 <_HandleIncomingPacket+0xdc>)
 80053be:	7e1b      	ldrb	r3, [r3, #24]
 80053c0:	4618      	mov	r0, r3
 80053c2:	1cfb      	adds	r3, r7, #3
 80053c4:	2201      	movs	r2, #1
 80053c6:	4619      	mov	r1, r3
 80053c8:	f7ff fd52 	bl	8004e70 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80053cc:	e003      	b.n	80053d6 <_HandleIncomingPacket+0xd2>
      break;
 80053ce:	bf00      	nop
 80053d0:	e002      	b.n	80053d8 <_HandleIncomingPacket+0xd4>
      break;
 80053d2:	bf00      	nop
 80053d4:	e000      	b.n	80053d8 <_HandleIncomingPacket+0xd4>
      break;
 80053d6:	bf00      	nop
    }
  }
}
 80053d8:	bf00      	nop
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	2000cfe0 	.word	0x2000cfe0

080053e4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08c      	sub	sp, #48	@ 0x30
 80053e8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80053ea:	2301      	movs	r3, #1
 80053ec:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80053ee:	1d3b      	adds	r3, r7, #4
 80053f0:	3301      	adds	r3, #1
 80053f2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053f8:	4b31      	ldr	r3, [pc, #196]	@ (80054c0 <_TrySendOverflowPacket+0xdc>)
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053fe:	e00b      	b.n	8005418 <_TrySendOverflowPacket+0x34>
 8005400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005402:	b2da      	uxtb	r2, r3
 8005404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005406:	1c59      	adds	r1, r3, #1
 8005408:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800540a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	701a      	strb	r2, [r3, #0]
 8005412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005414:	09db      	lsrs	r3, r3, #7
 8005416:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541a:	2b7f      	cmp	r3, #127	@ 0x7f
 800541c:	d8f0      	bhi.n	8005400 <_TrySendOverflowPacket+0x1c>
 800541e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005424:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	701a      	strb	r2, [r3, #0]
 800542a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800542c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800542e:	4b25      	ldr	r3, [pc, #148]	@ (80054c4 <_TrySendOverflowPacket+0xe0>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005434:	4b22      	ldr	r3, [pc, #136]	@ (80054c0 <_TrySendOverflowPacket+0xdc>)
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	627b      	str	r3, [r7, #36]	@ 0x24
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	623b      	str	r3, [r7, #32]
 8005446:	e00b      	b.n	8005460 <_TrySendOverflowPacket+0x7c>
 8005448:	6a3b      	ldr	r3, [r7, #32]
 800544a:	b2da      	uxtb	r2, r3
 800544c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544e:	1c59      	adds	r1, r3, #1
 8005450:	6279      	str	r1, [r7, #36]	@ 0x24
 8005452:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005456:	b2d2      	uxtb	r2, r2
 8005458:	701a      	strb	r2, [r3, #0]
 800545a:	6a3b      	ldr	r3, [r7, #32]
 800545c:	09db      	lsrs	r3, r3, #7
 800545e:	623b      	str	r3, [r7, #32]
 8005460:	6a3b      	ldr	r3, [r7, #32]
 8005462:	2b7f      	cmp	r3, #127	@ 0x7f
 8005464:	d8f0      	bhi.n	8005448 <_TrySendOverflowPacket+0x64>
 8005466:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	627a      	str	r2, [r7, #36]	@ 0x24
 800546c:	6a3a      	ldr	r2, [r7, #32]
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	701a      	strb	r2, [r3, #0]
 8005472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005474:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005476:	4b12      	ldr	r3, [pc, #72]	@ (80054c0 <_TrySendOverflowPacket+0xdc>)
 8005478:	785b      	ldrb	r3, [r3, #1]
 800547a:	4618      	mov	r0, r3
 800547c:	1d3b      	adds	r3, r7, #4
 800547e:	69fa      	ldr	r2, [r7, #28]
 8005480:	1ad3      	subs	r3, r2, r3
 8005482:	461a      	mov	r2, r3
 8005484:	1d3b      	adds	r3, r7, #4
 8005486:	4619      	mov	r1, r3
 8005488:	f7fa fec2 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800548c:	4603      	mov	r3, r0
 800548e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d009      	beq.n	80054aa <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005496:	4a0a      	ldr	r2, [pc, #40]	@ (80054c0 <_TrySendOverflowPacket+0xdc>)
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800549c:	4b08      	ldr	r3, [pc, #32]	@ (80054c0 <_TrySendOverflowPacket+0xdc>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	3b01      	subs	r3, #1
 80054a2:	b2da      	uxtb	r2, r3
 80054a4:	4b06      	ldr	r3, [pc, #24]	@ (80054c0 <_TrySendOverflowPacket+0xdc>)
 80054a6:	701a      	strb	r2, [r3, #0]
 80054a8:	e004      	b.n	80054b4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80054aa:	4b05      	ldr	r3, [pc, #20]	@ (80054c0 <_TrySendOverflowPacket+0xdc>)
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	3301      	adds	r3, #1
 80054b0:	4a03      	ldr	r2, [pc, #12]	@ (80054c0 <_TrySendOverflowPacket+0xdc>)
 80054b2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80054b4:	693b      	ldr	r3, [r7, #16]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3730      	adds	r7, #48	@ 0x30
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	bf00      	nop
 80054c0:	2000cfe0 	.word	0x2000cfe0
 80054c4:	e0001004 	.word	0xe0001004

080054c8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08a      	sub	sp, #40	@ 0x28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80054d4:	4b6c      	ldr	r3, [pc, #432]	@ (8005688 <_SendPacket+0x1c0>)
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d010      	beq.n	80054fe <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80054dc:	4b6a      	ldr	r3, [pc, #424]	@ (8005688 <_SendPacket+0x1c0>)
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	f000 80a3 	beq.w	800562c <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80054e6:	4b68      	ldr	r3, [pc, #416]	@ (8005688 <_SendPacket+0x1c0>)
 80054e8:	781b      	ldrb	r3, [r3, #0]
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d109      	bne.n	8005502 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80054ee:	f7ff ff79 	bl	80053e4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80054f2:	4b65      	ldr	r3, [pc, #404]	@ (8005688 <_SendPacket+0x1c0>)
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	f040 809a 	bne.w	8005630 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80054fc:	e001      	b.n	8005502 <_SendPacket+0x3a>
    goto Send;
 80054fe:	bf00      	nop
 8005500:	e000      	b.n	8005504 <_SendPacket+0x3c>
Send:
 8005502:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b1f      	cmp	r3, #31
 8005508:	d809      	bhi.n	800551e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800550a:	4b5f      	ldr	r3, [pc, #380]	@ (8005688 <_SendPacket+0x1c0>)
 800550c:	69da      	ldr	r2, [r3, #28]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	fa22 f303 	lsr.w	r3, r2, r3
 8005514:	f003 0301 	and.w	r3, r3, #1
 8005518:	2b00      	cmp	r3, #0
 800551a:	f040 808b 	bne.w	8005634 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b17      	cmp	r3, #23
 8005522:	d807      	bhi.n	8005534 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3b01      	subs	r3, #1
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	b2da      	uxtb	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	701a      	strb	r2, [r3, #0]
 8005532:	e03d      	b.n	80055b0 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005534:	68ba      	ldr	r2, [r7, #8]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005540:	d912      	bls.n	8005568 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	09da      	lsrs	r2, r3, #7
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	3b01      	subs	r3, #1
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	b2d2      	uxtb	r2, r2
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	b2db      	uxtb	r3, r3
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	3a01      	subs	r2, #1
 800555a:	60fa      	str	r2, [r7, #12]
 800555c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005560:	b2da      	uxtb	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	701a      	strb	r2, [r3, #0]
 8005566:	e006      	b.n	8005576 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	3b01      	subs	r3, #1
 800556c:	60fb      	str	r3, [r7, #12]
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	b2da      	uxtb	r2, r3
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b7f      	cmp	r3, #127	@ 0x7f
 800557a:	d912      	bls.n	80055a2 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	09da      	lsrs	r2, r3, #7
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	3b01      	subs	r3, #1
 8005584:	60fb      	str	r3, [r7, #12]
 8005586:	b2d2      	uxtb	r2, r2
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	b2db      	uxtb	r3, r3
 8005590:	68fa      	ldr	r2, [r7, #12]
 8005592:	3a01      	subs	r2, #1
 8005594:	60fa      	str	r2, [r7, #12]
 8005596:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800559a:	b2da      	uxtb	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	701a      	strb	r2, [r3, #0]
 80055a0:	e006      	b.n	80055b0 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	3b01      	subs	r3, #1
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	b2da      	uxtb	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80055b0:	4b36      	ldr	r3, [pc, #216]	@ (800568c <_SendPacket+0x1c4>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80055b6:	4b34      	ldr	r3, [pc, #208]	@ (8005688 <_SendPacket+0x1c0>)
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	69ba      	ldr	r2, [r7, #24]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	623b      	str	r3, [r7, #32]
 80055c8:	e00b      	b.n	80055e2 <_SendPacket+0x11a>
 80055ca:	6a3b      	ldr	r3, [r7, #32]
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	1c59      	adds	r1, r3, #1
 80055d2:	6279      	str	r1, [r7, #36]	@ 0x24
 80055d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	701a      	strb	r2, [r3, #0]
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	09db      	lsrs	r3, r3, #7
 80055e0:	623b      	str	r3, [r7, #32]
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80055e6:	d8f0      	bhi.n	80055ca <_SendPacket+0x102>
 80055e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ea:	1c5a      	adds	r2, r3, #1
 80055ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80055ee:	6a3a      	ldr	r2, [r7, #32]
 80055f0:	b2d2      	uxtb	r2, r2
 80055f2:	701a      	strb	r2, [r3, #0]
 80055f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80055f8:	4b23      	ldr	r3, [pc, #140]	@ (8005688 <_SendPacket+0x1c0>)
 80055fa:	785b      	ldrb	r3, [r3, #1]
 80055fc:	4618      	mov	r0, r3
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	1ad3      	subs	r3, r2, r3
 8005604:	461a      	mov	r2, r3
 8005606:	68f9      	ldr	r1, [r7, #12]
 8005608:	f7fa fe02 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800560c:	4603      	mov	r3, r0
 800560e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d003      	beq.n	800561e <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005616:	4a1c      	ldr	r2, [pc, #112]	@ (8005688 <_SendPacket+0x1c0>)
 8005618:	69bb      	ldr	r3, [r7, #24]
 800561a:	60d3      	str	r3, [r2, #12]
 800561c:	e00b      	b.n	8005636 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800561e:	4b1a      	ldr	r3, [pc, #104]	@ (8005688 <_SendPacket+0x1c0>)
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	3301      	adds	r3, #1
 8005624:	b2da      	uxtb	r2, r3
 8005626:	4b18      	ldr	r3, [pc, #96]	@ (8005688 <_SendPacket+0x1c0>)
 8005628:	701a      	strb	r2, [r3, #0]
 800562a:	e004      	b.n	8005636 <_SendPacket+0x16e>
    goto SendDone;
 800562c:	bf00      	nop
 800562e:	e002      	b.n	8005636 <_SendPacket+0x16e>
      goto SendDone;
 8005630:	bf00      	nop
 8005632:	e000      	b.n	8005636 <_SendPacket+0x16e>
      goto SendDone;
 8005634:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005636:	4b14      	ldr	r3, [pc, #80]	@ (8005688 <_SendPacket+0x1c0>)
 8005638:	7e1b      	ldrb	r3, [r3, #24]
 800563a:	4619      	mov	r1, r3
 800563c:	4a14      	ldr	r2, [pc, #80]	@ (8005690 <_SendPacket+0x1c8>)
 800563e:	460b      	mov	r3, r1
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	440b      	add	r3, r1
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	4413      	add	r3, r2
 8005648:	336c      	adds	r3, #108	@ 0x6c
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	4b0e      	ldr	r3, [pc, #56]	@ (8005688 <_SendPacket+0x1c0>)
 800564e:	7e1b      	ldrb	r3, [r3, #24]
 8005650:	4618      	mov	r0, r3
 8005652:	490f      	ldr	r1, [pc, #60]	@ (8005690 <_SendPacket+0x1c8>)
 8005654:	4603      	mov	r3, r0
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	4403      	add	r3, r0
 800565a:	00db      	lsls	r3, r3, #3
 800565c:	440b      	add	r3, r1
 800565e:	3370      	adds	r3, #112	@ 0x70
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d00b      	beq.n	800567e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005666:	4b08      	ldr	r3, [pc, #32]	@ (8005688 <_SendPacket+0x1c0>)
 8005668:	789b      	ldrb	r3, [r3, #2]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d107      	bne.n	800567e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800566e:	4b06      	ldr	r3, [pc, #24]	@ (8005688 <_SendPacket+0x1c0>)
 8005670:	2201      	movs	r2, #1
 8005672:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005674:	f7ff fe46 	bl	8005304 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005678:	4b03      	ldr	r3, [pc, #12]	@ (8005688 <_SendPacket+0x1c0>)
 800567a:	2200      	movs	r2, #0
 800567c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800567e:	bf00      	nop
 8005680:	3728      	adds	r7, #40	@ 0x28
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	2000cfe0 	.word	0x2000cfe0
 800568c:	e0001004 	.word	0xe0001004
 8005690:	2000bb20 	.word	0x2000bb20

08005694 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af02      	add	r7, sp, #8
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80056a2:	2300      	movs	r3, #0
 80056a4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80056a8:	4917      	ldr	r1, [pc, #92]	@ (8005708 <SEGGER_SYSVIEW_Init+0x74>)
 80056aa:	4818      	ldr	r0, [pc, #96]	@ (800570c <SEGGER_SYSVIEW_Init+0x78>)
 80056ac:	f7ff fcdc 	bl	8005068 <SEGGER_RTT_AllocUpBuffer>
 80056b0:	4603      	mov	r3, r0
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	4b16      	ldr	r3, [pc, #88]	@ (8005710 <SEGGER_SYSVIEW_Init+0x7c>)
 80056b6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80056b8:	4b15      	ldr	r3, [pc, #84]	@ (8005710 <SEGGER_SYSVIEW_Init+0x7c>)
 80056ba:	785a      	ldrb	r2, [r3, #1]
 80056bc:	4b14      	ldr	r3, [pc, #80]	@ (8005710 <SEGGER_SYSVIEW_Init+0x7c>)
 80056be:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80056c0:	4b13      	ldr	r3, [pc, #76]	@ (8005710 <SEGGER_SYSVIEW_Init+0x7c>)
 80056c2:	7e1b      	ldrb	r3, [r3, #24]
 80056c4:	4618      	mov	r0, r3
 80056c6:	2300      	movs	r3, #0
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	2308      	movs	r3, #8
 80056cc:	4a11      	ldr	r2, [pc, #68]	@ (8005714 <SEGGER_SYSVIEW_Init+0x80>)
 80056ce:	490f      	ldr	r1, [pc, #60]	@ (800570c <SEGGER_SYSVIEW_Init+0x78>)
 80056d0:	f7ff fd4e 	bl	8005170 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80056d4:	4b0e      	ldr	r3, [pc, #56]	@ (8005710 <SEGGER_SYSVIEW_Init+0x7c>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80056da:	4b0f      	ldr	r3, [pc, #60]	@ (8005718 <SEGGER_SYSVIEW_Init+0x84>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a0c      	ldr	r2, [pc, #48]	@ (8005710 <SEGGER_SYSVIEW_Init+0x7c>)
 80056e0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80056e2:	4a0b      	ldr	r2, [pc, #44]	@ (8005710 <SEGGER_SYSVIEW_Init+0x7c>)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80056e8:	4a09      	ldr	r2, [pc, #36]	@ (8005710 <SEGGER_SYSVIEW_Init+0x7c>)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80056ee:	4a08      	ldr	r2, [pc, #32]	@ (8005710 <SEGGER_SYSVIEW_Init+0x7c>)
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80056f4:	4a06      	ldr	r2, [pc, #24]	@ (8005710 <SEGGER_SYSVIEW_Init+0x7c>)
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80056fa:	4b05      	ldr	r3, [pc, #20]	@ (8005710 <SEGGER_SYSVIEW_Init+0x7c>)
 80056fc:	2200      	movs	r2, #0
 80056fe:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005700:	bf00      	nop
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	2000bfd8 	.word	0x2000bfd8
 800570c:	08007120 	.word	0x08007120
 8005710:	2000cfe0 	.word	0x2000cfe0
 8005714:	2000cfd8 	.word	0x2000cfd8
 8005718:	e0001004 	.word	0xe0001004

0800571c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005724:	4a04      	ldr	r2, [pc, #16]	@ (8005738 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6113      	str	r3, [r2, #16]
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	2000cfe0 	.word	0x2000cfe0

0800573c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005744:	f3ef 8311 	mrs	r3, BASEPRI
 8005748:	f04f 0120 	mov.w	r1, #32
 800574c:	f381 8811 	msr	BASEPRI, r1
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	4808      	ldr	r0, [pc, #32]	@ (8005774 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005754:	f7ff fdc9 	bl	80052ea <_PreparePacket>
 8005758:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	68b9      	ldr	r1, [r7, #8]
 800575e:	68b8      	ldr	r0, [r7, #8]
 8005760:	f7ff feb2 	bl	80054c8 <_SendPacket>
  RECORD_END();
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f383 8811 	msr	BASEPRI, r3
}
 800576a:	bf00      	nop
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	2000d010 	.word	0x2000d010

08005778 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005778:	b580      	push	{r7, lr}
 800577a:	b088      	sub	sp, #32
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005782:	f3ef 8311 	mrs	r3, BASEPRI
 8005786:	f04f 0120 	mov.w	r1, #32
 800578a:	f381 8811 	msr	BASEPRI, r1
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	4816      	ldr	r0, [pc, #88]	@ (80057ec <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005792:	f7ff fdaa 	bl	80052ea <_PreparePacket>
 8005796:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	61fb      	str	r3, [r7, #28]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	61bb      	str	r3, [r7, #24]
 80057a4:	e00b      	b.n	80057be <SEGGER_SYSVIEW_RecordU32+0x46>
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	b2da      	uxtb	r2, r3
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	1c59      	adds	r1, r3, #1
 80057ae:	61f9      	str	r1, [r7, #28]
 80057b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057b4:	b2d2      	uxtb	r2, r2
 80057b6:	701a      	strb	r2, [r3, #0]
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	09db      	lsrs	r3, r3, #7
 80057bc:	61bb      	str	r3, [r7, #24]
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80057c2:	d8f0      	bhi.n	80057a6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	61fa      	str	r2, [r7, #28]
 80057ca:	69ba      	ldr	r2, [r7, #24]
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	701a      	strb	r2, [r3, #0]
 80057d0:	69fb      	ldr	r3, [r7, #28]
 80057d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	68f9      	ldr	r1, [r7, #12]
 80057d8:	6938      	ldr	r0, [r7, #16]
 80057da:	f7ff fe75 	bl	80054c8 <_SendPacket>
  RECORD_END();
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f383 8811 	msr	BASEPRI, r3
}
 80057e4:	bf00      	nop
 80057e6:	3720      	adds	r7, #32
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	2000d010 	.word	0x2000d010

080057f0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b08c      	sub	sp, #48	@ 0x30
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80057fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005800:	f04f 0120 	mov.w	r1, #32
 8005804:	f381 8811 	msr	BASEPRI, r1
 8005808:	61fb      	str	r3, [r7, #28]
 800580a:	4825      	ldr	r0, [pc, #148]	@ (80058a0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800580c:	f7ff fd6d 	bl	80052ea <_PreparePacket>
 8005810:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005812:	69bb      	ldr	r3, [r7, #24]
 8005814:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800581e:	e00b      	b.n	8005838 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005822:	b2da      	uxtb	r2, r3
 8005824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005826:	1c59      	adds	r1, r3, #1
 8005828:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800582a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800582e:	b2d2      	uxtb	r2, r2
 8005830:	701a      	strb	r2, [r3, #0]
 8005832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005834:	09db      	lsrs	r3, r3, #7
 8005836:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583a:	2b7f      	cmp	r3, #127	@ 0x7f
 800583c:	d8f0      	bhi.n	8005820 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800583e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005840:	1c5a      	adds	r2, r3, #1
 8005842:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005844:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005846:	b2d2      	uxtb	r2, r2
 8005848:	701a      	strb	r2, [r3, #0]
 800584a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800584c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	627b      	str	r3, [r7, #36]	@ 0x24
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	623b      	str	r3, [r7, #32]
 8005856:	e00b      	b.n	8005870 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	b2da      	uxtb	r2, r3
 800585c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585e:	1c59      	adds	r1, r3, #1
 8005860:	6279      	str	r1, [r7, #36]	@ 0x24
 8005862:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005866:	b2d2      	uxtb	r2, r2
 8005868:	701a      	strb	r2, [r3, #0]
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	09db      	lsrs	r3, r3, #7
 800586e:	623b      	str	r3, [r7, #32]
 8005870:	6a3b      	ldr	r3, [r7, #32]
 8005872:	2b7f      	cmp	r3, #127	@ 0x7f
 8005874:	d8f0      	bhi.n	8005858 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	627a      	str	r2, [r7, #36]	@ 0x24
 800587c:	6a3a      	ldr	r2, [r7, #32]
 800587e:	b2d2      	uxtb	r2, r2
 8005880:	701a      	strb	r2, [r3, #0]
 8005882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005884:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	6979      	ldr	r1, [r7, #20]
 800588a:	69b8      	ldr	r0, [r7, #24]
 800588c:	f7ff fe1c 	bl	80054c8 <_SendPacket>
  RECORD_END();
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	f383 8811 	msr	BASEPRI, r3
}
 8005896:	bf00      	nop
 8005898:	3730      	adds	r7, #48	@ 0x30
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	2000d010 	.word	0x2000d010

080058a4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b08e      	sub	sp, #56	@ 0x38
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
 80058b0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80058b2:	f3ef 8311 	mrs	r3, BASEPRI
 80058b6:	f04f 0120 	mov.w	r1, #32
 80058ba:	f381 8811 	msr	BASEPRI, r1
 80058be:	61fb      	str	r3, [r7, #28]
 80058c0:	4832      	ldr	r0, [pc, #200]	@ (800598c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80058c2:	f7ff fd12 	bl	80052ea <_PreparePacket>
 80058c6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80058d4:	e00b      	b.n	80058ee <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80058d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058dc:	1c59      	adds	r1, r3, #1
 80058de:	6379      	str	r1, [r7, #52]	@ 0x34
 80058e0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058e4:	b2d2      	uxtb	r2, r2
 80058e6:	701a      	strb	r2, [r3, #0]
 80058e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ea:	09db      	lsrs	r3, r3, #7
 80058ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80058ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80058f2:	d8f0      	bhi.n	80058d6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80058f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	637a      	str	r2, [r7, #52]	@ 0x34
 80058fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058fc:	b2d2      	uxtb	r2, r2
 80058fe:	701a      	strb	r2, [r3, #0]
 8005900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005902:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800590c:	e00b      	b.n	8005926 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800590e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005910:	b2da      	uxtb	r2, r3
 8005912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005914:	1c59      	adds	r1, r3, #1
 8005916:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005918:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800591c:	b2d2      	uxtb	r2, r2
 800591e:	701a      	strb	r2, [r3, #0]
 8005920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005922:	09db      	lsrs	r3, r3, #7
 8005924:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005928:	2b7f      	cmp	r3, #127	@ 0x7f
 800592a:	d8f0      	bhi.n	800590e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800592c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800592e:	1c5a      	adds	r2, r3, #1
 8005930:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005932:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005934:	b2d2      	uxtb	r2, r2
 8005936:	701a      	strb	r2, [r3, #0]
 8005938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800593a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	623b      	str	r3, [r7, #32]
 8005944:	e00b      	b.n	800595e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005946:	6a3b      	ldr	r3, [r7, #32]
 8005948:	b2da      	uxtb	r2, r3
 800594a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594c:	1c59      	adds	r1, r3, #1
 800594e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005950:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005954:	b2d2      	uxtb	r2, r2
 8005956:	701a      	strb	r2, [r3, #0]
 8005958:	6a3b      	ldr	r3, [r7, #32]
 800595a:	09db      	lsrs	r3, r3, #7
 800595c:	623b      	str	r3, [r7, #32]
 800595e:	6a3b      	ldr	r3, [r7, #32]
 8005960:	2b7f      	cmp	r3, #127	@ 0x7f
 8005962:	d8f0      	bhi.n	8005946 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005966:	1c5a      	adds	r2, r3, #1
 8005968:	627a      	str	r2, [r7, #36]	@ 0x24
 800596a:	6a3a      	ldr	r2, [r7, #32]
 800596c:	b2d2      	uxtb	r2, r2
 800596e:	701a      	strb	r2, [r3, #0]
 8005970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005972:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	6979      	ldr	r1, [r7, #20]
 8005978:	69b8      	ldr	r0, [r7, #24]
 800597a:	f7ff fda5 	bl	80054c8 <_SendPacket>
  RECORD_END();
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	f383 8811 	msr	BASEPRI, r3
}
 8005984:	bf00      	nop
 8005986:	3738      	adds	r7, #56	@ 0x38
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	2000d010 	.word	0x2000d010

08005990 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005990:	b580      	push	{r7, lr}
 8005992:	b090      	sub	sp, #64	@ 0x40
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800599e:	f3ef 8311 	mrs	r3, BASEPRI
 80059a2:	f04f 0120 	mov.w	r1, #32
 80059a6:	f381 8811 	msr	BASEPRI, r1
 80059aa:	61fb      	str	r3, [r7, #28]
 80059ac:	4840      	ldr	r0, [pc, #256]	@ (8005ab0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80059ae:	f7ff fc9c 	bl	80052ea <_PreparePacket>
 80059b2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059c0:	e00b      	b.n	80059da <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80059c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c4:	b2da      	uxtb	r2, r3
 80059c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059c8:	1c59      	adds	r1, r3, #1
 80059ca:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80059cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059d0:	b2d2      	uxtb	r2, r2
 80059d2:	701a      	strb	r2, [r3, #0]
 80059d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d6:	09db      	lsrs	r3, r3, #7
 80059d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80059da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80059de:	d8f0      	bhi.n	80059c2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80059e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059e2:	1c5a      	adds	r2, r3, #1
 80059e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80059e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	701a      	strb	r2, [r3, #0]
 80059ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059ee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80059f8:	e00b      	b.n	8005a12 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80059fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fc:	b2da      	uxtb	r2, r3
 80059fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a00:	1c59      	adds	r1, r3, #1
 8005a02:	6379      	str	r1, [r7, #52]	@ 0x34
 8005a04:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a08:	b2d2      	uxtb	r2, r2
 8005a0a:	701a      	strb	r2, [r3, #0]
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a0e:	09db      	lsrs	r3, r3, #7
 8005a10:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a14:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a16:	d8f0      	bhi.n	80059fa <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a1a:	1c5a      	adds	r2, r3, #1
 8005a1c:	637a      	str	r2, [r7, #52]	@ 0x34
 8005a1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a26:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a30:	e00b      	b.n	8005a4a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a38:	1c59      	adds	r1, r3, #1
 8005a3a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005a3c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	701a      	strb	r2, [r3, #0]
 8005a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a46:	09db      	lsrs	r3, r3, #7
 8005a48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a4e:	d8f0      	bhi.n	8005a32 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a52:	1c5a      	adds	r2, r3, #1
 8005a54:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	701a      	strb	r2, [r3, #0]
 8005a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a5e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a66:	623b      	str	r3, [r7, #32]
 8005a68:	e00b      	b.n	8005a82 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a70:	1c59      	adds	r1, r3, #1
 8005a72:	6279      	str	r1, [r7, #36]	@ 0x24
 8005a74:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	701a      	strb	r2, [r3, #0]
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	09db      	lsrs	r3, r3, #7
 8005a80:	623b      	str	r3, [r7, #32]
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a86:	d8f0      	bhi.n	8005a6a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a8e:	6a3a      	ldr	r2, [r7, #32]
 8005a90:	b2d2      	uxtb	r2, r2
 8005a92:	701a      	strb	r2, [r3, #0]
 8005a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a96:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	6979      	ldr	r1, [r7, #20]
 8005a9c:	69b8      	ldr	r0, [r7, #24]
 8005a9e:	f7ff fd13 	bl	80054c8 <_SendPacket>
  RECORD_END();
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	f383 8811 	msr	BASEPRI, r3
}
 8005aa8:	bf00      	nop
 8005aaa:	3740      	adds	r7, #64	@ 0x40
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	2000d010 	.word	0x2000d010

08005ab4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b08c      	sub	sp, #48	@ 0x30
 8005ab8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005aba:	4b58      	ldr	r3, [pc, #352]	@ (8005c1c <SEGGER_SYSVIEW_Start+0x168>)
 8005abc:	2201      	movs	r2, #1
 8005abe:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005ac0:	f3ef 8311 	mrs	r3, BASEPRI
 8005ac4:	f04f 0120 	mov.w	r1, #32
 8005ac8:	f381 8811 	msr	BASEPRI, r1
 8005acc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005ace:	4b53      	ldr	r3, [pc, #332]	@ (8005c1c <SEGGER_SYSVIEW_Start+0x168>)
 8005ad0:	785b      	ldrb	r3, [r3, #1]
 8005ad2:	220a      	movs	r2, #10
 8005ad4:	4952      	ldr	r1, [pc, #328]	@ (8005c20 <SEGGER_SYSVIEW_Start+0x16c>)
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fa fb9a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005ae2:	200a      	movs	r0, #10
 8005ae4:	f7ff fe2a 	bl	800573c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ae8:	f3ef 8311 	mrs	r3, BASEPRI
 8005aec:	f04f 0120 	mov.w	r1, #32
 8005af0:	f381 8811 	msr	BASEPRI, r1
 8005af4:	60bb      	str	r3, [r7, #8]
 8005af6:	484b      	ldr	r0, [pc, #300]	@ (8005c24 <SEGGER_SYSVIEW_Start+0x170>)
 8005af8:	f7ff fbf7 	bl	80052ea <_PreparePacket>
 8005afc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b06:	4b45      	ldr	r3, [pc, #276]	@ (8005c1c <SEGGER_SYSVIEW_Start+0x168>)
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b0c:	e00b      	b.n	8005b26 <SEGGER_SYSVIEW_Start+0x72>
 8005b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b10:	b2da      	uxtb	r2, r3
 8005b12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b14:	1c59      	adds	r1, r3, #1
 8005b16:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005b18:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	701a      	strb	r2, [r3, #0]
 8005b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b22:	09db      	lsrs	r3, r3, #7
 8005b24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b28:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b2a:	d8f0      	bhi.n	8005b0e <SEGGER_SYSVIEW_Start+0x5a>
 8005b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b2e:	1c5a      	adds	r2, r3, #1
 8005b30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	701a      	strb	r2, [r3, #0]
 8005b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b3a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b40:	4b36      	ldr	r3, [pc, #216]	@ (8005c1c <SEGGER_SYSVIEW_Start+0x168>)
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	623b      	str	r3, [r7, #32]
 8005b46:	e00b      	b.n	8005b60 <SEGGER_SYSVIEW_Start+0xac>
 8005b48:	6a3b      	ldr	r3, [r7, #32]
 8005b4a:	b2da      	uxtb	r2, r3
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4e:	1c59      	adds	r1, r3, #1
 8005b50:	6279      	str	r1, [r7, #36]	@ 0x24
 8005b52:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b56:	b2d2      	uxtb	r2, r2
 8005b58:	701a      	strb	r2, [r3, #0]
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	09db      	lsrs	r3, r3, #7
 8005b5e:	623b      	str	r3, [r7, #32]
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b64:	d8f0      	bhi.n	8005b48 <SEGGER_SYSVIEW_Start+0x94>
 8005b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b6c:	6a3a      	ldr	r2, [r7, #32]
 8005b6e:	b2d2      	uxtb	r2, r2
 8005b70:	701a      	strb	r2, [r3, #0]
 8005b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b74:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	61fb      	str	r3, [r7, #28]
 8005b7a:	4b28      	ldr	r3, [pc, #160]	@ (8005c1c <SEGGER_SYSVIEW_Start+0x168>)
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	61bb      	str	r3, [r7, #24]
 8005b80:	e00b      	b.n	8005b9a <SEGGER_SYSVIEW_Start+0xe6>
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	b2da      	uxtb	r2, r3
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	1c59      	adds	r1, r3, #1
 8005b8a:	61f9      	str	r1, [r7, #28]
 8005b8c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b90:	b2d2      	uxtb	r2, r2
 8005b92:	701a      	strb	r2, [r3, #0]
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	09db      	lsrs	r3, r3, #7
 8005b98:	61bb      	str	r3, [r7, #24]
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b9e:	d8f0      	bhi.n	8005b82 <SEGGER_SYSVIEW_Start+0xce>
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	1c5a      	adds	r2, r3, #1
 8005ba4:	61fa      	str	r2, [r7, #28]
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	b2d2      	uxtb	r2, r2
 8005baa:	701a      	strb	r2, [r3, #0]
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	617b      	str	r3, [r7, #20]
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	613b      	str	r3, [r7, #16]
 8005bb8:	e00b      	b.n	8005bd2 <SEGGER_SYSVIEW_Start+0x11e>
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	1c59      	adds	r1, r3, #1
 8005bc2:	6179      	str	r1, [r7, #20]
 8005bc4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bc8:	b2d2      	uxtb	r2, r2
 8005bca:	701a      	strb	r2, [r3, #0]
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	09db      	lsrs	r3, r3, #7
 8005bd0:	613b      	str	r3, [r7, #16]
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bd6:	d8f0      	bhi.n	8005bba <SEGGER_SYSVIEW_Start+0x106>
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	1c5a      	adds	r2, r3, #1
 8005bdc:	617a      	str	r2, [r7, #20]
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	b2d2      	uxtb	r2, r2
 8005be2:	701a      	strb	r2, [r3, #0]
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005be8:	2218      	movs	r2, #24
 8005bea:	6839      	ldr	r1, [r7, #0]
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7ff fc6b 	bl	80054c8 <_SendPacket>
      RECORD_END();
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005bf8:	4b08      	ldr	r3, [pc, #32]	@ (8005c1c <SEGGER_SYSVIEW_Start+0x168>)
 8005bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005c00:	4b06      	ldr	r3, [pc, #24]	@ (8005c1c <SEGGER_SYSVIEW_Start+0x168>)
 8005c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c04:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005c06:	f000 f9eb 	bl	8005fe0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005c0a:	f000 f9b1 	bl	8005f70 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005c0e:	f000 fc09 	bl	8006424 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005c12:	bf00      	nop
 8005c14:	3730      	adds	r7, #48	@ 0x30
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}
 8005c1a:	bf00      	nop
 8005c1c:	2000cfe0 	.word	0x2000cfe0
 8005c20:	0800714c 	.word	0x0800714c
 8005c24:	2000d010 	.word	0x2000d010

08005c28 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c2e:	f3ef 8311 	mrs	r3, BASEPRI
 8005c32:	f04f 0120 	mov.w	r1, #32
 8005c36:	f381 8811 	msr	BASEPRI, r1
 8005c3a:	607b      	str	r3, [r7, #4]
 8005c3c:	480b      	ldr	r0, [pc, #44]	@ (8005c6c <SEGGER_SYSVIEW_Stop+0x44>)
 8005c3e:	f7ff fb54 	bl	80052ea <_PreparePacket>
 8005c42:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005c44:	4b0a      	ldr	r3, [pc, #40]	@ (8005c70 <SEGGER_SYSVIEW_Stop+0x48>)
 8005c46:	781b      	ldrb	r3, [r3, #0]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d007      	beq.n	8005c5c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005c4c:	220b      	movs	r2, #11
 8005c4e:	6839      	ldr	r1, [r7, #0]
 8005c50:	6838      	ldr	r0, [r7, #0]
 8005c52:	f7ff fc39 	bl	80054c8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005c56:	4b06      	ldr	r3, [pc, #24]	@ (8005c70 <SEGGER_SYSVIEW_Stop+0x48>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f383 8811 	msr	BASEPRI, r3
}
 8005c62:	bf00      	nop
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	2000d010 	.word	0x2000d010
 8005c70:	2000cfe0 	.word	0x2000cfe0

08005c74 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b08c      	sub	sp, #48	@ 0x30
 8005c78:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c7a:	f3ef 8311 	mrs	r3, BASEPRI
 8005c7e:	f04f 0120 	mov.w	r1, #32
 8005c82:	f381 8811 	msr	BASEPRI, r1
 8005c86:	60fb      	str	r3, [r7, #12]
 8005c88:	4845      	ldr	r0, [pc, #276]	@ (8005da0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005c8a:	f7ff fb2e 	bl	80052ea <_PreparePacket>
 8005c8e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c98:	4b42      	ldr	r3, [pc, #264]	@ (8005da4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c9e:	e00b      	b.n	8005cb8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ca2:	b2da      	uxtb	r2, r3
 8005ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca6:	1c59      	adds	r1, r3, #1
 8005ca8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005caa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cb4:	09db      	lsrs	r3, r3, #7
 8005cb6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cba:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cbc:	d8f0      	bhi.n	8005ca0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005cbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005cc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cc6:	b2d2      	uxtb	r2, r2
 8005cc8:	701a      	strb	r2, [r3, #0]
 8005cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ccc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cd2:	4b34      	ldr	r3, [pc, #208]	@ (8005da4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	623b      	str	r3, [r7, #32]
 8005cd8:	e00b      	b.n	8005cf2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ce0:	1c59      	adds	r1, r3, #1
 8005ce2:	6279      	str	r1, [r7, #36]	@ 0x24
 8005ce4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	701a      	strb	r2, [r3, #0]
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	09db      	lsrs	r3, r3, #7
 8005cf0:	623b      	str	r3, [r7, #32]
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cf6:	d8f0      	bhi.n	8005cda <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfa:	1c5a      	adds	r2, r3, #1
 8005cfc:	627a      	str	r2, [r7, #36]	@ 0x24
 8005cfe:	6a3a      	ldr	r2, [r7, #32]
 8005d00:	b2d2      	uxtb	r2, r2
 8005d02:	701a      	strb	r2, [r3, #0]
 8005d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d06:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	61fb      	str	r3, [r7, #28]
 8005d0c:	4b25      	ldr	r3, [pc, #148]	@ (8005da4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	61bb      	str	r3, [r7, #24]
 8005d12:	e00b      	b.n	8005d2c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005d14:	69bb      	ldr	r3, [r7, #24]
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	1c59      	adds	r1, r3, #1
 8005d1c:	61f9      	str	r1, [r7, #28]
 8005d1e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d22:	b2d2      	uxtb	r2, r2
 8005d24:	701a      	strb	r2, [r3, #0]
 8005d26:	69bb      	ldr	r3, [r7, #24]
 8005d28:	09db      	lsrs	r3, r3, #7
 8005d2a:	61bb      	str	r3, [r7, #24]
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d30:	d8f0      	bhi.n	8005d14 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	1c5a      	adds	r2, r3, #1
 8005d36:	61fa      	str	r2, [r7, #28]
 8005d38:	69ba      	ldr	r2, [r7, #24]
 8005d3a:	b2d2      	uxtb	r2, r2
 8005d3c:	701a      	strb	r2, [r3, #0]
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	617b      	str	r3, [r7, #20]
 8005d46:	2300      	movs	r3, #0
 8005d48:	613b      	str	r3, [r7, #16]
 8005d4a:	e00b      	b.n	8005d64 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	1c59      	adds	r1, r3, #1
 8005d54:	6179      	str	r1, [r7, #20]
 8005d56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	09db      	lsrs	r3, r3, #7
 8005d62:	613b      	str	r3, [r7, #16]
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d68:	d8f0      	bhi.n	8005d4c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	1c5a      	adds	r2, r3, #1
 8005d6e:	617a      	str	r2, [r7, #20]
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	701a      	strb	r2, [r3, #0]
 8005d76:	697b      	ldr	r3, [r7, #20]
 8005d78:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005d7a:	2218      	movs	r2, #24
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	68b8      	ldr	r0, [r7, #8]
 8005d80:	f7ff fba2 	bl	80054c8 <_SendPacket>
  RECORD_END();
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005d8a:	4b06      	ldr	r3, [pc, #24]	@ (8005da4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d002      	beq.n	8005d98 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005d92:	4b04      	ldr	r3, [pc, #16]	@ (8005da4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005d94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d96:	4798      	blx	r3
  }
}
 8005d98:	bf00      	nop
 8005d9a:	3730      	adds	r7, #48	@ 0x30
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	2000d010 	.word	0x2000d010
 8005da4:	2000cfe0 	.word	0x2000cfe0

08005da8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b092      	sub	sp, #72	@ 0x48
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005db0:	f3ef 8311 	mrs	r3, BASEPRI
 8005db4:	f04f 0120 	mov.w	r1, #32
 8005db8:	f381 8811 	msr	BASEPRI, r1
 8005dbc:	617b      	str	r3, [r7, #20]
 8005dbe:	486a      	ldr	r0, [pc, #424]	@ (8005f68 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005dc0:	f7ff fa93 	bl	80052ea <_PreparePacket>
 8005dc4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	4b66      	ldr	r3, [pc, #408]	@ (8005f6c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dda:	e00b      	b.n	8005df4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005ddc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005de2:	1c59      	adds	r1, r3, #1
 8005de4:	6479      	str	r1, [r7, #68]	@ 0x44
 8005de6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	701a      	strb	r2, [r3, #0]
 8005dee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005df0:	09db      	lsrs	r3, r3, #7
 8005df2:	643b      	str	r3, [r7, #64]	@ 0x40
 8005df4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005df6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005df8:	d8f0      	bhi.n	8005ddc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005dfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	647a      	str	r2, [r7, #68]	@ 0x44
 8005e00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	701a      	strb	r2, [r3, #0]
 8005e06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e14:	e00b      	b.n	8005e2e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e1c:	1c59      	adds	r1, r3, #1
 8005e1e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005e20:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e24:	b2d2      	uxtb	r2, r2
 8005e26:	701a      	strb	r2, [r3, #0]
 8005e28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e2a:	09db      	lsrs	r3, r3, #7
 8005e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e30:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e32:	d8f0      	bhi.n	8005e16 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005e34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005e3a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e3c:	b2d2      	uxtb	r2, r2
 8005e3e:	701a      	strb	r2, [r3, #0]
 8005e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e42:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	2220      	movs	r2, #32
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	68f8      	ldr	r0, [r7, #12]
 8005e4e:	f7ff f9ff 	bl	8005250 <_EncodeStr>
 8005e52:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005e54:	2209      	movs	r2, #9
 8005e56:	68f9      	ldr	r1, [r7, #12]
 8005e58:	6938      	ldr	r0, [r7, #16]
 8005e5a:	f7ff fb35 	bl	80054c8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	4b40      	ldr	r3, [pc, #256]	@ (8005f6c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	1ad3      	subs	r3, r2, r3
 8005e70:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e72:	e00b      	b.n	8005e8c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e76:	b2da      	uxtb	r2, r3
 8005e78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e7a:	1c59      	adds	r1, r3, #1
 8005e7c:	6379      	str	r1, [r7, #52]	@ 0x34
 8005e7e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	701a      	strb	r2, [r3, #0]
 8005e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e88:	09db      	lsrs	r3, r3, #7
 8005e8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e90:	d8f0      	bhi.n	8005e74 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005e92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	637a      	str	r2, [r7, #52]	@ 0x34
 8005e98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]
 8005e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ea0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	68db      	ldr	r3, [r3, #12]
 8005eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005eac:	e00b      	b.n	8005ec6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb0:	b2da      	uxtb	r2, r3
 8005eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb4:	1c59      	adds	r1, r3, #1
 8005eb6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005eb8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	701a      	strb	r2, [r3, #0]
 8005ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec2:	09db      	lsrs	r3, r3, #7
 8005ec4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005eca:	d8f0      	bhi.n	8005eae <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005ecc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ed2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	701a      	strb	r2, [r3, #0]
 8005ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eda:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	623b      	str	r3, [r7, #32]
 8005ee6:	e00b      	b.n	8005f00 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eee:	1c59      	adds	r1, r3, #1
 8005ef0:	6279      	str	r1, [r7, #36]	@ 0x24
 8005ef2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ef6:	b2d2      	uxtb	r2, r2
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	09db      	lsrs	r3, r3, #7
 8005efe:	623b      	str	r3, [r7, #32]
 8005f00:	6a3b      	ldr	r3, [r7, #32]
 8005f02:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f04:	d8f0      	bhi.n	8005ee8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f0c:	6a3a      	ldr	r2, [r7, #32]
 8005f0e:	b2d2      	uxtb	r2, r2
 8005f10:	701a      	strb	r2, [r3, #0]
 8005f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f14:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	61fb      	str	r3, [r7, #28]
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	61bb      	str	r3, [r7, #24]
 8005f1e:	e00b      	b.n	8005f38 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005f20:	69bb      	ldr	r3, [r7, #24]
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	1c59      	adds	r1, r3, #1
 8005f28:	61f9      	str	r1, [r7, #28]
 8005f2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	09db      	lsrs	r3, r3, #7
 8005f36:	61bb      	str	r3, [r7, #24]
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f3c:	d8f0      	bhi.n	8005f20 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	61fa      	str	r2, [r7, #28]
 8005f44:	69ba      	ldr	r2, [r7, #24]
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	701a      	strb	r2, [r3, #0]
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005f4e:	2215      	movs	r2, #21
 8005f50:	68f9      	ldr	r1, [r7, #12]
 8005f52:	6938      	ldr	r0, [r7, #16]
 8005f54:	f7ff fab8 	bl	80054c8 <_SendPacket>
  RECORD_END();
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	f383 8811 	msr	BASEPRI, r3
}
 8005f5e:	bf00      	nop
 8005f60:	3748      	adds	r7, #72	@ 0x48
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	2000d010 	.word	0x2000d010
 8005f6c:	2000cfe0 	.word	0x2000cfe0

08005f70 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005f70:	b580      	push	{r7, lr}
 8005f72:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005f74:	4b07      	ldr	r3, [pc, #28]	@ (8005f94 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d008      	beq.n	8005f8e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005f7c:	4b05      	ldr	r3, [pc, #20]	@ (8005f94 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f7e:	6a1b      	ldr	r3, [r3, #32]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005f86:	4b03      	ldr	r3, [pc, #12]	@ (8005f94 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	4798      	blx	r3
  }
}
 8005f8e:	bf00      	nop
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	2000cfe0 	.word	0x2000cfe0

08005f98 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005fa0:	f3ef 8311 	mrs	r3, BASEPRI
 8005fa4:	f04f 0120 	mov.w	r1, #32
 8005fa8:	f381 8811 	msr	BASEPRI, r1
 8005fac:	617b      	str	r3, [r7, #20]
 8005fae:	480b      	ldr	r0, [pc, #44]	@ (8005fdc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005fb0:	f7ff f99b 	bl	80052ea <_PreparePacket>
 8005fb4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005fb6:	2280      	movs	r2, #128	@ 0x80
 8005fb8:	6879      	ldr	r1, [r7, #4]
 8005fba:	6938      	ldr	r0, [r7, #16]
 8005fbc:	f7ff f948 	bl	8005250 <_EncodeStr>
 8005fc0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005fc2:	220e      	movs	r2, #14
 8005fc4:	68f9      	ldr	r1, [r7, #12]
 8005fc6:	6938      	ldr	r0, [r7, #16]
 8005fc8:	f7ff fa7e 	bl	80054c8 <_SendPacket>
  RECORD_END();
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	f383 8811 	msr	BASEPRI, r3
}
 8005fd2:	bf00      	nop
 8005fd4:	3718      	adds	r7, #24
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	2000d010 	.word	0x2000d010

08005fe0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005fe0:	b590      	push	{r4, r7, lr}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005fe6:	4b15      	ldr	r3, [pc, #84]	@ (800603c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005fe8:	6a1b      	ldr	r3, [r3, #32]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d01a      	beq.n	8006024 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005fee:	4b13      	ldr	r3, [pc, #76]	@ (800603c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d015      	beq.n	8006024 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005ff8:	4b10      	ldr	r3, [pc, #64]	@ (800603c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4798      	blx	r3
 8006000:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006004:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006006:	e9d7 0100 	ldrd	r0, r1, [r7]
 800600a:	f04f 0200 	mov.w	r2, #0
 800600e:	f04f 0300 	mov.w	r3, #0
 8006012:	000a      	movs	r2, r1
 8006014:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006016:	4613      	mov	r3, r2
 8006018:	461a      	mov	r2, r3
 800601a:	4621      	mov	r1, r4
 800601c:	200d      	movs	r0, #13
 800601e:	f7ff fbe7 	bl	80057f0 <SEGGER_SYSVIEW_RecordU32x2>
 8006022:	e006      	b.n	8006032 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006024:	4b06      	ldr	r3, [pc, #24]	@ (8006040 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4619      	mov	r1, r3
 800602a:	200c      	movs	r0, #12
 800602c:	f7ff fba4 	bl	8005778 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006030:	bf00      	nop
 8006032:	bf00      	nop
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	bd90      	pop	{r4, r7, pc}
 800603a:	bf00      	nop
 800603c:	2000cfe0 	.word	0x2000cfe0
 8006040:	e0001004 	.word	0xe0001004

08006044 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800604a:	f3ef 8311 	mrs	r3, BASEPRI
 800604e:	f04f 0120 	mov.w	r1, #32
 8006052:	f381 8811 	msr	BASEPRI, r1
 8006056:	607b      	str	r3, [r7, #4]
 8006058:	4807      	ldr	r0, [pc, #28]	@ (8006078 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800605a:	f7ff f946 	bl	80052ea <_PreparePacket>
 800605e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006060:	2211      	movs	r2, #17
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	6838      	ldr	r0, [r7, #0]
 8006066:	f7ff fa2f 	bl	80054c8 <_SendPacket>
  RECORD_END();
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f383 8811 	msr	BASEPRI, r3
}
 8006070:	bf00      	nop
 8006072:	3708      	adds	r7, #8
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	2000d010 	.word	0x2000d010

0800607c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800607c:	b580      	push	{r7, lr}
 800607e:	b088      	sub	sp, #32
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006084:	f3ef 8311 	mrs	r3, BASEPRI
 8006088:	f04f 0120 	mov.w	r1, #32
 800608c:	f381 8811 	msr	BASEPRI, r1
 8006090:	617b      	str	r3, [r7, #20]
 8006092:	4819      	ldr	r0, [pc, #100]	@ (80060f8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006094:	f7ff f929 	bl	80052ea <_PreparePacket>
 8006098:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800609e:	4b17      	ldr	r3, [pc, #92]	@ (80060fc <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	61fb      	str	r3, [r7, #28]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	61bb      	str	r3, [r7, #24]
 80060b0:	e00b      	b.n	80060ca <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	1c59      	adds	r1, r3, #1
 80060ba:	61f9      	str	r1, [r7, #28]
 80060bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	09db      	lsrs	r3, r3, #7
 80060c8:	61bb      	str	r3, [r7, #24]
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80060ce:	d8f0      	bhi.n	80060b2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	1c5a      	adds	r2, r3, #1
 80060d4:	61fa      	str	r2, [r7, #28]
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	b2d2      	uxtb	r2, r2
 80060da:	701a      	strb	r2, [r3, #0]
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80060e0:	2208      	movs	r2, #8
 80060e2:	68f9      	ldr	r1, [r7, #12]
 80060e4:	6938      	ldr	r0, [r7, #16]
 80060e6:	f7ff f9ef 	bl	80054c8 <_SendPacket>
  RECORD_END();
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	f383 8811 	msr	BASEPRI, r3
}
 80060f0:	bf00      	nop
 80060f2:	3720      	adds	r7, #32
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}
 80060f8:	2000d010 	.word	0x2000d010
 80060fc:	2000cfe0 	.word	0x2000cfe0

08006100 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006100:	b580      	push	{r7, lr}
 8006102:	b088      	sub	sp, #32
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006108:	f3ef 8311 	mrs	r3, BASEPRI
 800610c:	f04f 0120 	mov.w	r1, #32
 8006110:	f381 8811 	msr	BASEPRI, r1
 8006114:	617b      	str	r3, [r7, #20]
 8006116:	4819      	ldr	r0, [pc, #100]	@ (800617c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006118:	f7ff f8e7 	bl	80052ea <_PreparePacket>
 800611c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006122:	4b17      	ldr	r3, [pc, #92]	@ (8006180 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006124:	691b      	ldr	r3, [r3, #16]
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	1ad3      	subs	r3, r2, r3
 800612a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	61fb      	str	r3, [r7, #28]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	61bb      	str	r3, [r7, #24]
 8006134:	e00b      	b.n	800614e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	b2da      	uxtb	r2, r3
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	1c59      	adds	r1, r3, #1
 800613e:	61f9      	str	r1, [r7, #28]
 8006140:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006144:	b2d2      	uxtb	r2, r2
 8006146:	701a      	strb	r2, [r3, #0]
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	09db      	lsrs	r3, r3, #7
 800614c:	61bb      	str	r3, [r7, #24]
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	2b7f      	cmp	r3, #127	@ 0x7f
 8006152:	d8f0      	bhi.n	8006136 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	61fa      	str	r2, [r7, #28]
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	b2d2      	uxtb	r2, r2
 800615e:	701a      	strb	r2, [r3, #0]
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006164:	2204      	movs	r2, #4
 8006166:	68f9      	ldr	r1, [r7, #12]
 8006168:	6938      	ldr	r0, [r7, #16]
 800616a:	f7ff f9ad 	bl	80054c8 <_SendPacket>
  RECORD_END();
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f383 8811 	msr	BASEPRI, r3
}
 8006174:	bf00      	nop
 8006176:	3720      	adds	r7, #32
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	2000d010 	.word	0x2000d010
 8006180:	2000cfe0 	.word	0x2000cfe0

08006184 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006184:	b580      	push	{r7, lr}
 8006186:	b088      	sub	sp, #32
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800618c:	f3ef 8311 	mrs	r3, BASEPRI
 8006190:	f04f 0120 	mov.w	r1, #32
 8006194:	f381 8811 	msr	BASEPRI, r1
 8006198:	617b      	str	r3, [r7, #20]
 800619a:	4819      	ldr	r0, [pc, #100]	@ (8006200 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800619c:	f7ff f8a5 	bl	80052ea <_PreparePacket>
 80061a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80061a6:	4b17      	ldr	r3, [pc, #92]	@ (8006204 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	1ad3      	subs	r3, r2, r3
 80061ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	61fb      	str	r3, [r7, #28]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	61bb      	str	r3, [r7, #24]
 80061b8:	e00b      	b.n	80061d2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	b2da      	uxtb	r2, r3
 80061be:	69fb      	ldr	r3, [r7, #28]
 80061c0:	1c59      	adds	r1, r3, #1
 80061c2:	61f9      	str	r1, [r7, #28]
 80061c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061c8:	b2d2      	uxtb	r2, r2
 80061ca:	701a      	strb	r2, [r3, #0]
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	09db      	lsrs	r3, r3, #7
 80061d0:	61bb      	str	r3, [r7, #24]
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80061d6:	d8f0      	bhi.n	80061ba <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	1c5a      	adds	r2, r3, #1
 80061dc:	61fa      	str	r2, [r7, #28]
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	b2d2      	uxtb	r2, r2
 80061e2:	701a      	strb	r2, [r3, #0]
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80061e8:	2206      	movs	r2, #6
 80061ea:	68f9      	ldr	r1, [r7, #12]
 80061ec:	6938      	ldr	r0, [r7, #16]
 80061ee:	f7ff f96b 	bl	80054c8 <_SendPacket>
  RECORD_END();
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	f383 8811 	msr	BASEPRI, r3
}
 80061f8:	bf00      	nop
 80061fa:	3720      	adds	r7, #32
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}
 8006200:	2000d010 	.word	0x2000d010
 8006204:	2000cfe0 	.word	0x2000cfe0

08006208 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006208:	b580      	push	{r7, lr}
 800620a:	b08a      	sub	sp, #40	@ 0x28
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006212:	f3ef 8311 	mrs	r3, BASEPRI
 8006216:	f04f 0120 	mov.w	r1, #32
 800621a:	f381 8811 	msr	BASEPRI, r1
 800621e:	617b      	str	r3, [r7, #20]
 8006220:	4827      	ldr	r0, [pc, #156]	@ (80062c0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006222:	f7ff f862 	bl	80052ea <_PreparePacket>
 8006226:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800622c:	4b25      	ldr	r3, [pc, #148]	@ (80062c4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	627b      	str	r3, [r7, #36]	@ 0x24
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	623b      	str	r3, [r7, #32]
 800623e:	e00b      	b.n	8006258 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	b2da      	uxtb	r2, r3
 8006244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006246:	1c59      	adds	r1, r3, #1
 8006248:	6279      	str	r1, [r7, #36]	@ 0x24
 800624a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	701a      	strb	r2, [r3, #0]
 8006252:	6a3b      	ldr	r3, [r7, #32]
 8006254:	09db      	lsrs	r3, r3, #7
 8006256:	623b      	str	r3, [r7, #32]
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	2b7f      	cmp	r3, #127	@ 0x7f
 800625c:	d8f0      	bhi.n	8006240 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800625e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	627a      	str	r2, [r7, #36]	@ 0x24
 8006264:	6a3a      	ldr	r2, [r7, #32]
 8006266:	b2d2      	uxtb	r2, r2
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	61fb      	str	r3, [r7, #28]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	61bb      	str	r3, [r7, #24]
 8006276:	e00b      	b.n	8006290 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006278:	69bb      	ldr	r3, [r7, #24]
 800627a:	b2da      	uxtb	r2, r3
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	1c59      	adds	r1, r3, #1
 8006280:	61f9      	str	r1, [r7, #28]
 8006282:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	09db      	lsrs	r3, r3, #7
 800628e:	61bb      	str	r3, [r7, #24]
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	2b7f      	cmp	r3, #127	@ 0x7f
 8006294:	d8f0      	bhi.n	8006278 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006296:	69fb      	ldr	r3, [r7, #28]
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	61fa      	str	r2, [r7, #28]
 800629c:	69ba      	ldr	r2, [r7, #24]
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80062a6:	2207      	movs	r2, #7
 80062a8:	68f9      	ldr	r1, [r7, #12]
 80062aa:	6938      	ldr	r0, [r7, #16]
 80062ac:	f7ff f90c 	bl	80054c8 <_SendPacket>
  RECORD_END();
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	f383 8811 	msr	BASEPRI, r3
}
 80062b6:	bf00      	nop
 80062b8:	3728      	adds	r7, #40	@ 0x28
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	2000d010 	.word	0x2000d010
 80062c4:	2000cfe0 	.word	0x2000cfe0

080062c8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80062d0:	4b04      	ldr	r3, [pc, #16]	@ (80062e4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	1ad3      	subs	r3, r2, r3
}
 80062d8:	4618      	mov	r0, r3
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr
 80062e4:	2000cfe0 	.word	0x2000cfe0

080062e8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b08c      	sub	sp, #48	@ 0x30
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	4603      	mov	r3, r0
 80062f0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80062f2:	4b3b      	ldr	r3, [pc, #236]	@ (80063e0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d06d      	beq.n	80063d6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80062fa:	4b39      	ldr	r3, [pc, #228]	@ (80063e0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006300:	2300      	movs	r3, #0
 8006302:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006304:	e008      	b.n	8006318 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800630c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800630e:	2b00      	cmp	r3, #0
 8006310:	d007      	beq.n	8006322 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006314:	3301      	adds	r3, #1
 8006316:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800631c:	429a      	cmp	r2, r3
 800631e:	d3f2      	bcc.n	8006306 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006320:	e000      	b.n	8006324 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006322:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006326:	2b00      	cmp	r3, #0
 8006328:	d055      	beq.n	80063d6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800632a:	f3ef 8311 	mrs	r3, BASEPRI
 800632e:	f04f 0120 	mov.w	r1, #32
 8006332:	f381 8811 	msr	BASEPRI, r1
 8006336:	617b      	str	r3, [r7, #20]
 8006338:	482a      	ldr	r0, [pc, #168]	@ (80063e4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800633a:	f7fe ffd6 	bl	80052ea <_PreparePacket>
 800633e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	627b      	str	r3, [r7, #36]	@ 0x24
 8006348:	79fb      	ldrb	r3, [r7, #7]
 800634a:	623b      	str	r3, [r7, #32]
 800634c:	e00b      	b.n	8006366 <SEGGER_SYSVIEW_SendModule+0x7e>
 800634e:	6a3b      	ldr	r3, [r7, #32]
 8006350:	b2da      	uxtb	r2, r3
 8006352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006354:	1c59      	adds	r1, r3, #1
 8006356:	6279      	str	r1, [r7, #36]	@ 0x24
 8006358:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800635c:	b2d2      	uxtb	r2, r2
 800635e:	701a      	strb	r2, [r3, #0]
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	09db      	lsrs	r3, r3, #7
 8006364:	623b      	str	r3, [r7, #32]
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	2b7f      	cmp	r3, #127	@ 0x7f
 800636a:	d8f0      	bhi.n	800634e <SEGGER_SYSVIEW_SendModule+0x66>
 800636c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636e:	1c5a      	adds	r2, r3, #1
 8006370:	627a      	str	r2, [r7, #36]	@ 0x24
 8006372:	6a3a      	ldr	r2, [r7, #32]
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800637a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	61fb      	str	r3, [r7, #28]
 8006380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006382:	689b      	ldr	r3, [r3, #8]
 8006384:	61bb      	str	r3, [r7, #24]
 8006386:	e00b      	b.n	80063a0 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	b2da      	uxtb	r2, r3
 800638c:	69fb      	ldr	r3, [r7, #28]
 800638e:	1c59      	adds	r1, r3, #1
 8006390:	61f9      	str	r1, [r7, #28]
 8006392:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006396:	b2d2      	uxtb	r2, r2
 8006398:	701a      	strb	r2, [r3, #0]
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	09db      	lsrs	r3, r3, #7
 800639e:	61bb      	str	r3, [r7, #24]
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80063a4:	d8f0      	bhi.n	8006388 <SEGGER_SYSVIEW_SendModule+0xa0>
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	1c5a      	adds	r2, r3, #1
 80063aa:	61fa      	str	r2, [r7, #28]
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	701a      	strb	r2, [r3, #0]
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2280      	movs	r2, #128	@ 0x80
 80063bc:	4619      	mov	r1, r3
 80063be:	68f8      	ldr	r0, [r7, #12]
 80063c0:	f7fe ff46 	bl	8005250 <_EncodeStr>
 80063c4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80063c6:	2216      	movs	r2, #22
 80063c8:	68f9      	ldr	r1, [r7, #12]
 80063ca:	6938      	ldr	r0, [r7, #16]
 80063cc:	f7ff f87c 	bl	80054c8 <_SendPacket>
      RECORD_END();
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80063d6:	bf00      	nop
 80063d8:	3730      	adds	r7, #48	@ 0x30
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	2000d008 	.word	0x2000d008
 80063e4:	2000d010 	.word	0x2000d010

080063e8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80063ee:	4b0c      	ldr	r3, [pc, #48]	@ (8006420 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00f      	beq.n	8006416 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80063f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006420 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d002      	beq.n	800640a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1f2      	bne.n	80063fc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006416:	bf00      	nop
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	2000d008 	.word	0x2000d008

08006424 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800642a:	f3ef 8311 	mrs	r3, BASEPRI
 800642e:	f04f 0120 	mov.w	r1, #32
 8006432:	f381 8811 	msr	BASEPRI, r1
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	4817      	ldr	r0, [pc, #92]	@ (8006498 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800643a:	f7fe ff56 	bl	80052ea <_PreparePacket>
 800643e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	617b      	str	r3, [r7, #20]
 8006448:	4b14      	ldr	r3, [pc, #80]	@ (800649c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	613b      	str	r3, [r7, #16]
 800644e:	e00b      	b.n	8006468 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006450:	693b      	ldr	r3, [r7, #16]
 8006452:	b2da      	uxtb	r2, r3
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	1c59      	adds	r1, r3, #1
 8006458:	6179      	str	r1, [r7, #20]
 800645a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800645e:	b2d2      	uxtb	r2, r2
 8006460:	701a      	strb	r2, [r3, #0]
 8006462:	693b      	ldr	r3, [r7, #16]
 8006464:	09db      	lsrs	r3, r3, #7
 8006466:	613b      	str	r3, [r7, #16]
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	2b7f      	cmp	r3, #127	@ 0x7f
 800646c:	d8f0      	bhi.n	8006450 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	617a      	str	r2, [r7, #20]
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	b2d2      	uxtb	r2, r2
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800647e:	221b      	movs	r2, #27
 8006480:	6879      	ldr	r1, [r7, #4]
 8006482:	68b8      	ldr	r0, [r7, #8]
 8006484:	f7ff f820 	bl	80054c8 <_SendPacket>
  RECORD_END();
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f383 8811 	msr	BASEPRI, r3
}
 800648e:	bf00      	nop
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	2000d010 	.word	0x2000d010
 800649c:	2000d00c 	.word	0x2000d00c

080064a0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08a      	sub	sp, #40	@ 0x28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064a8:	f3ef 8311 	mrs	r3, BASEPRI
 80064ac:	f04f 0120 	mov.w	r1, #32
 80064b0:	f381 8811 	msr	BASEPRI, r1
 80064b4:	617b      	str	r3, [r7, #20]
 80064b6:	4827      	ldr	r0, [pc, #156]	@ (8006554 <SEGGER_SYSVIEW_Warn+0xb4>)
 80064b8:	f7fe ff17 	bl	80052ea <_PreparePacket>
 80064bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064be:	2280      	movs	r2, #128	@ 0x80
 80064c0:	6879      	ldr	r1, [r7, #4]
 80064c2:	6938      	ldr	r0, [r7, #16]
 80064c4:	f7fe fec4 	bl	8005250 <_EncodeStr>
 80064c8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80064ce:	2301      	movs	r3, #1
 80064d0:	623b      	str	r3, [r7, #32]
 80064d2:	e00b      	b.n	80064ec <SEGGER_SYSVIEW_Warn+0x4c>
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	b2da      	uxtb	r2, r3
 80064d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064da:	1c59      	adds	r1, r3, #1
 80064dc:	6279      	str	r1, [r7, #36]	@ 0x24
 80064de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064e2:	b2d2      	uxtb	r2, r2
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	09db      	lsrs	r3, r3, #7
 80064ea:	623b      	str	r3, [r7, #32]
 80064ec:	6a3b      	ldr	r3, [r7, #32]
 80064ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80064f0:	d8f0      	bhi.n	80064d4 <SEGGER_SYSVIEW_Warn+0x34>
 80064f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	627a      	str	r2, [r7, #36]	@ 0x24
 80064f8:	6a3a      	ldr	r2, [r7, #32]
 80064fa:	b2d2      	uxtb	r2, r2
 80064fc:	701a      	strb	r2, [r3, #0]
 80064fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006500:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	61fb      	str	r3, [r7, #28]
 8006506:	2300      	movs	r3, #0
 8006508:	61bb      	str	r3, [r7, #24]
 800650a:	e00b      	b.n	8006524 <SEGGER_SYSVIEW_Warn+0x84>
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	b2da      	uxtb	r2, r3
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	1c59      	adds	r1, r3, #1
 8006514:	61f9      	str	r1, [r7, #28]
 8006516:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800651a:	b2d2      	uxtb	r2, r2
 800651c:	701a      	strb	r2, [r3, #0]
 800651e:	69bb      	ldr	r3, [r7, #24]
 8006520:	09db      	lsrs	r3, r3, #7
 8006522:	61bb      	str	r3, [r7, #24]
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	2b7f      	cmp	r3, #127	@ 0x7f
 8006528:	d8f0      	bhi.n	800650c <SEGGER_SYSVIEW_Warn+0x6c>
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	1c5a      	adds	r2, r3, #1
 800652e:	61fa      	str	r2, [r7, #28]
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	b2d2      	uxtb	r2, r2
 8006534:	701a      	strb	r2, [r3, #0]
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800653a:	221a      	movs	r2, #26
 800653c:	68f9      	ldr	r1, [r7, #12]
 800653e:	6938      	ldr	r0, [r7, #16]
 8006540:	f7fe ffc2 	bl	80054c8 <_SendPacket>
  RECORD_END();
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	f383 8811 	msr	BASEPRI, r3
}
 800654a:	bf00      	nop
 800654c:	3728      	adds	r7, #40	@ 0x28
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	2000d010 	.word	0x2000d010

08006558 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 8006566:	683a      	ldr	r2, [r7, #0]
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	2000      	movs	r0, #0
 800656c:	f7fe fd56 	bl	800501c <SEGGER_RTT_Write>
  return len;
 8006570:	683b      	ldr	r3, [r7, #0]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3710      	adds	r7, #16
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
	...

0800657c <std>:
 800657c:	2300      	movs	r3, #0
 800657e:	b510      	push	{r4, lr}
 8006580:	4604      	mov	r4, r0
 8006582:	e9c0 3300 	strd	r3, r3, [r0]
 8006586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800658a:	6083      	str	r3, [r0, #8]
 800658c:	8181      	strh	r1, [r0, #12]
 800658e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006590:	81c2      	strh	r2, [r0, #14]
 8006592:	6183      	str	r3, [r0, #24]
 8006594:	4619      	mov	r1, r3
 8006596:	2208      	movs	r2, #8
 8006598:	305c      	adds	r0, #92	@ 0x5c
 800659a:	f000 f9f7 	bl	800698c <memset>
 800659e:	4b0d      	ldr	r3, [pc, #52]	@ (80065d4 <std+0x58>)
 80065a0:	6263      	str	r3, [r4, #36]	@ 0x24
 80065a2:	4b0d      	ldr	r3, [pc, #52]	@ (80065d8 <std+0x5c>)
 80065a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80065a6:	4b0d      	ldr	r3, [pc, #52]	@ (80065dc <std+0x60>)
 80065a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80065aa:	4b0d      	ldr	r3, [pc, #52]	@ (80065e0 <std+0x64>)
 80065ac:	6323      	str	r3, [r4, #48]	@ 0x30
 80065ae:	4b0d      	ldr	r3, [pc, #52]	@ (80065e4 <std+0x68>)
 80065b0:	6224      	str	r4, [r4, #32]
 80065b2:	429c      	cmp	r4, r3
 80065b4:	d006      	beq.n	80065c4 <std+0x48>
 80065b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80065ba:	4294      	cmp	r4, r2
 80065bc:	d002      	beq.n	80065c4 <std+0x48>
 80065be:	33d0      	adds	r3, #208	@ 0xd0
 80065c0:	429c      	cmp	r4, r3
 80065c2:	d105      	bne.n	80065d0 <std+0x54>
 80065c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80065c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065cc:	f000 ba3e 	b.w	8006a4c <__retarget_lock_init_recursive>
 80065d0:	bd10      	pop	{r4, pc}
 80065d2:	bf00      	nop
 80065d4:	080067bd 	.word	0x080067bd
 80065d8:	080067df 	.word	0x080067df
 80065dc:	08006817 	.word	0x08006817
 80065e0:	0800683b 	.word	0x0800683b
 80065e4:	2000d0f4 	.word	0x2000d0f4

080065e8 <stdio_exit_handler>:
 80065e8:	4a02      	ldr	r2, [pc, #8]	@ (80065f4 <stdio_exit_handler+0xc>)
 80065ea:	4903      	ldr	r1, [pc, #12]	@ (80065f8 <stdio_exit_handler+0x10>)
 80065ec:	4803      	ldr	r0, [pc, #12]	@ (80065fc <stdio_exit_handler+0x14>)
 80065ee:	f000 b869 	b.w	80066c4 <_fwalk_sglue>
 80065f2:	bf00      	nop
 80065f4:	2000000c 	.word	0x2000000c
 80065f8:	08006d69 	.word	0x08006d69
 80065fc:	2000001c 	.word	0x2000001c

08006600 <cleanup_stdio>:
 8006600:	6841      	ldr	r1, [r0, #4]
 8006602:	4b0c      	ldr	r3, [pc, #48]	@ (8006634 <cleanup_stdio+0x34>)
 8006604:	4299      	cmp	r1, r3
 8006606:	b510      	push	{r4, lr}
 8006608:	4604      	mov	r4, r0
 800660a:	d001      	beq.n	8006610 <cleanup_stdio+0x10>
 800660c:	f000 fbac 	bl	8006d68 <_fflush_r>
 8006610:	68a1      	ldr	r1, [r4, #8]
 8006612:	4b09      	ldr	r3, [pc, #36]	@ (8006638 <cleanup_stdio+0x38>)
 8006614:	4299      	cmp	r1, r3
 8006616:	d002      	beq.n	800661e <cleanup_stdio+0x1e>
 8006618:	4620      	mov	r0, r4
 800661a:	f000 fba5 	bl	8006d68 <_fflush_r>
 800661e:	68e1      	ldr	r1, [r4, #12]
 8006620:	4b06      	ldr	r3, [pc, #24]	@ (800663c <cleanup_stdio+0x3c>)
 8006622:	4299      	cmp	r1, r3
 8006624:	d004      	beq.n	8006630 <cleanup_stdio+0x30>
 8006626:	4620      	mov	r0, r4
 8006628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800662c:	f000 bb9c 	b.w	8006d68 <_fflush_r>
 8006630:	bd10      	pop	{r4, pc}
 8006632:	bf00      	nop
 8006634:	2000d0f4 	.word	0x2000d0f4
 8006638:	2000d15c 	.word	0x2000d15c
 800663c:	2000d1c4 	.word	0x2000d1c4

08006640 <global_stdio_init.part.0>:
 8006640:	b510      	push	{r4, lr}
 8006642:	4b0b      	ldr	r3, [pc, #44]	@ (8006670 <global_stdio_init.part.0+0x30>)
 8006644:	4c0b      	ldr	r4, [pc, #44]	@ (8006674 <global_stdio_init.part.0+0x34>)
 8006646:	4a0c      	ldr	r2, [pc, #48]	@ (8006678 <global_stdio_init.part.0+0x38>)
 8006648:	601a      	str	r2, [r3, #0]
 800664a:	4620      	mov	r0, r4
 800664c:	2200      	movs	r2, #0
 800664e:	2104      	movs	r1, #4
 8006650:	f7ff ff94 	bl	800657c <std>
 8006654:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006658:	2201      	movs	r2, #1
 800665a:	2109      	movs	r1, #9
 800665c:	f7ff ff8e 	bl	800657c <std>
 8006660:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006664:	2202      	movs	r2, #2
 8006666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800666a:	2112      	movs	r1, #18
 800666c:	f7ff bf86 	b.w	800657c <std>
 8006670:	2000d22c 	.word	0x2000d22c
 8006674:	2000d0f4 	.word	0x2000d0f4
 8006678:	080065e9 	.word	0x080065e9

0800667c <__sfp_lock_acquire>:
 800667c:	4801      	ldr	r0, [pc, #4]	@ (8006684 <__sfp_lock_acquire+0x8>)
 800667e:	f000 b9e6 	b.w	8006a4e <__retarget_lock_acquire_recursive>
 8006682:	bf00      	nop
 8006684:	2000d235 	.word	0x2000d235

08006688 <__sfp_lock_release>:
 8006688:	4801      	ldr	r0, [pc, #4]	@ (8006690 <__sfp_lock_release+0x8>)
 800668a:	f000 b9e1 	b.w	8006a50 <__retarget_lock_release_recursive>
 800668e:	bf00      	nop
 8006690:	2000d235 	.word	0x2000d235

08006694 <__sinit>:
 8006694:	b510      	push	{r4, lr}
 8006696:	4604      	mov	r4, r0
 8006698:	f7ff fff0 	bl	800667c <__sfp_lock_acquire>
 800669c:	6a23      	ldr	r3, [r4, #32]
 800669e:	b11b      	cbz	r3, 80066a8 <__sinit+0x14>
 80066a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066a4:	f7ff bff0 	b.w	8006688 <__sfp_lock_release>
 80066a8:	4b04      	ldr	r3, [pc, #16]	@ (80066bc <__sinit+0x28>)
 80066aa:	6223      	str	r3, [r4, #32]
 80066ac:	4b04      	ldr	r3, [pc, #16]	@ (80066c0 <__sinit+0x2c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d1f5      	bne.n	80066a0 <__sinit+0xc>
 80066b4:	f7ff ffc4 	bl	8006640 <global_stdio_init.part.0>
 80066b8:	e7f2      	b.n	80066a0 <__sinit+0xc>
 80066ba:	bf00      	nop
 80066bc:	08006601 	.word	0x08006601
 80066c0:	2000d22c 	.word	0x2000d22c

080066c4 <_fwalk_sglue>:
 80066c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066c8:	4607      	mov	r7, r0
 80066ca:	4688      	mov	r8, r1
 80066cc:	4614      	mov	r4, r2
 80066ce:	2600      	movs	r6, #0
 80066d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80066d4:	f1b9 0901 	subs.w	r9, r9, #1
 80066d8:	d505      	bpl.n	80066e6 <_fwalk_sglue+0x22>
 80066da:	6824      	ldr	r4, [r4, #0]
 80066dc:	2c00      	cmp	r4, #0
 80066de:	d1f7      	bne.n	80066d0 <_fwalk_sglue+0xc>
 80066e0:	4630      	mov	r0, r6
 80066e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066e6:	89ab      	ldrh	r3, [r5, #12]
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d907      	bls.n	80066fc <_fwalk_sglue+0x38>
 80066ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066f0:	3301      	adds	r3, #1
 80066f2:	d003      	beq.n	80066fc <_fwalk_sglue+0x38>
 80066f4:	4629      	mov	r1, r5
 80066f6:	4638      	mov	r0, r7
 80066f8:	47c0      	blx	r8
 80066fa:	4306      	orrs	r6, r0
 80066fc:	3568      	adds	r5, #104	@ 0x68
 80066fe:	e7e9      	b.n	80066d4 <_fwalk_sglue+0x10>

08006700 <_puts_r>:
 8006700:	6a03      	ldr	r3, [r0, #32]
 8006702:	b570      	push	{r4, r5, r6, lr}
 8006704:	6884      	ldr	r4, [r0, #8]
 8006706:	4605      	mov	r5, r0
 8006708:	460e      	mov	r6, r1
 800670a:	b90b      	cbnz	r3, 8006710 <_puts_r+0x10>
 800670c:	f7ff ffc2 	bl	8006694 <__sinit>
 8006710:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006712:	07db      	lsls	r3, r3, #31
 8006714:	d405      	bmi.n	8006722 <_puts_r+0x22>
 8006716:	89a3      	ldrh	r3, [r4, #12]
 8006718:	0598      	lsls	r0, r3, #22
 800671a:	d402      	bmi.n	8006722 <_puts_r+0x22>
 800671c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800671e:	f000 f996 	bl	8006a4e <__retarget_lock_acquire_recursive>
 8006722:	89a3      	ldrh	r3, [r4, #12]
 8006724:	0719      	lsls	r1, r3, #28
 8006726:	d502      	bpl.n	800672e <_puts_r+0x2e>
 8006728:	6923      	ldr	r3, [r4, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d135      	bne.n	800679a <_puts_r+0x9a>
 800672e:	4621      	mov	r1, r4
 8006730:	4628      	mov	r0, r5
 8006732:	f000 f8c5 	bl	80068c0 <__swsetup_r>
 8006736:	b380      	cbz	r0, 800679a <_puts_r+0x9a>
 8006738:	f04f 35ff 	mov.w	r5, #4294967295
 800673c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800673e:	07da      	lsls	r2, r3, #31
 8006740:	d405      	bmi.n	800674e <_puts_r+0x4e>
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	059b      	lsls	r3, r3, #22
 8006746:	d402      	bmi.n	800674e <_puts_r+0x4e>
 8006748:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800674a:	f000 f981 	bl	8006a50 <__retarget_lock_release_recursive>
 800674e:	4628      	mov	r0, r5
 8006750:	bd70      	pop	{r4, r5, r6, pc}
 8006752:	2b00      	cmp	r3, #0
 8006754:	da04      	bge.n	8006760 <_puts_r+0x60>
 8006756:	69a2      	ldr	r2, [r4, #24]
 8006758:	429a      	cmp	r2, r3
 800675a:	dc17      	bgt.n	800678c <_puts_r+0x8c>
 800675c:	290a      	cmp	r1, #10
 800675e:	d015      	beq.n	800678c <_puts_r+0x8c>
 8006760:	6823      	ldr	r3, [r4, #0]
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	6022      	str	r2, [r4, #0]
 8006766:	7019      	strb	r1, [r3, #0]
 8006768:	68a3      	ldr	r3, [r4, #8]
 800676a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800676e:	3b01      	subs	r3, #1
 8006770:	60a3      	str	r3, [r4, #8]
 8006772:	2900      	cmp	r1, #0
 8006774:	d1ed      	bne.n	8006752 <_puts_r+0x52>
 8006776:	2b00      	cmp	r3, #0
 8006778:	da11      	bge.n	800679e <_puts_r+0x9e>
 800677a:	4622      	mov	r2, r4
 800677c:	210a      	movs	r1, #10
 800677e:	4628      	mov	r0, r5
 8006780:	f000 f85f 	bl	8006842 <__swbuf_r>
 8006784:	3001      	adds	r0, #1
 8006786:	d0d7      	beq.n	8006738 <_puts_r+0x38>
 8006788:	250a      	movs	r5, #10
 800678a:	e7d7      	b.n	800673c <_puts_r+0x3c>
 800678c:	4622      	mov	r2, r4
 800678e:	4628      	mov	r0, r5
 8006790:	f000 f857 	bl	8006842 <__swbuf_r>
 8006794:	3001      	adds	r0, #1
 8006796:	d1e7      	bne.n	8006768 <_puts_r+0x68>
 8006798:	e7ce      	b.n	8006738 <_puts_r+0x38>
 800679a:	3e01      	subs	r6, #1
 800679c:	e7e4      	b.n	8006768 <_puts_r+0x68>
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	1c5a      	adds	r2, r3, #1
 80067a2:	6022      	str	r2, [r4, #0]
 80067a4:	220a      	movs	r2, #10
 80067a6:	701a      	strb	r2, [r3, #0]
 80067a8:	e7ee      	b.n	8006788 <_puts_r+0x88>
	...

080067ac <puts>:
 80067ac:	4b02      	ldr	r3, [pc, #8]	@ (80067b8 <puts+0xc>)
 80067ae:	4601      	mov	r1, r0
 80067b0:	6818      	ldr	r0, [r3, #0]
 80067b2:	f7ff bfa5 	b.w	8006700 <_puts_r>
 80067b6:	bf00      	nop
 80067b8:	20000018 	.word	0x20000018

080067bc <__sread>:
 80067bc:	b510      	push	{r4, lr}
 80067be:	460c      	mov	r4, r1
 80067c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067c4:	f000 f90c 	bl	80069e0 <_read_r>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	bfab      	itete	ge
 80067cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80067ce:	89a3      	ldrhlt	r3, [r4, #12]
 80067d0:	181b      	addge	r3, r3, r0
 80067d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80067d6:	bfac      	ite	ge
 80067d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80067da:	81a3      	strhlt	r3, [r4, #12]
 80067dc:	bd10      	pop	{r4, pc}

080067de <__swrite>:
 80067de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067e2:	461f      	mov	r7, r3
 80067e4:	898b      	ldrh	r3, [r1, #12]
 80067e6:	05db      	lsls	r3, r3, #23
 80067e8:	4605      	mov	r5, r0
 80067ea:	460c      	mov	r4, r1
 80067ec:	4616      	mov	r6, r2
 80067ee:	d505      	bpl.n	80067fc <__swrite+0x1e>
 80067f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067f4:	2302      	movs	r3, #2
 80067f6:	2200      	movs	r2, #0
 80067f8:	f000 f8e0 	bl	80069bc <_lseek_r>
 80067fc:	89a3      	ldrh	r3, [r4, #12]
 80067fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006802:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006806:	81a3      	strh	r3, [r4, #12]
 8006808:	4632      	mov	r2, r6
 800680a:	463b      	mov	r3, r7
 800680c:	4628      	mov	r0, r5
 800680e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006812:	f7ff bea1 	b.w	8006558 <_write_r>

08006816 <__sseek>:
 8006816:	b510      	push	{r4, lr}
 8006818:	460c      	mov	r4, r1
 800681a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800681e:	f000 f8cd 	bl	80069bc <_lseek_r>
 8006822:	1c43      	adds	r3, r0, #1
 8006824:	89a3      	ldrh	r3, [r4, #12]
 8006826:	bf15      	itete	ne
 8006828:	6560      	strne	r0, [r4, #84]	@ 0x54
 800682a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800682e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006832:	81a3      	strheq	r3, [r4, #12]
 8006834:	bf18      	it	ne
 8006836:	81a3      	strhne	r3, [r4, #12]
 8006838:	bd10      	pop	{r4, pc}

0800683a <__sclose>:
 800683a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800683e:	f000 b8ad 	b.w	800699c <_close_r>

08006842 <__swbuf_r>:
 8006842:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006844:	460e      	mov	r6, r1
 8006846:	4614      	mov	r4, r2
 8006848:	4605      	mov	r5, r0
 800684a:	b118      	cbz	r0, 8006854 <__swbuf_r+0x12>
 800684c:	6a03      	ldr	r3, [r0, #32]
 800684e:	b90b      	cbnz	r3, 8006854 <__swbuf_r+0x12>
 8006850:	f7ff ff20 	bl	8006694 <__sinit>
 8006854:	69a3      	ldr	r3, [r4, #24]
 8006856:	60a3      	str	r3, [r4, #8]
 8006858:	89a3      	ldrh	r3, [r4, #12]
 800685a:	071a      	lsls	r2, r3, #28
 800685c:	d501      	bpl.n	8006862 <__swbuf_r+0x20>
 800685e:	6923      	ldr	r3, [r4, #16]
 8006860:	b943      	cbnz	r3, 8006874 <__swbuf_r+0x32>
 8006862:	4621      	mov	r1, r4
 8006864:	4628      	mov	r0, r5
 8006866:	f000 f82b 	bl	80068c0 <__swsetup_r>
 800686a:	b118      	cbz	r0, 8006874 <__swbuf_r+0x32>
 800686c:	f04f 37ff 	mov.w	r7, #4294967295
 8006870:	4638      	mov	r0, r7
 8006872:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	6922      	ldr	r2, [r4, #16]
 8006878:	1a98      	subs	r0, r3, r2
 800687a:	6963      	ldr	r3, [r4, #20]
 800687c:	b2f6      	uxtb	r6, r6
 800687e:	4283      	cmp	r3, r0
 8006880:	4637      	mov	r7, r6
 8006882:	dc05      	bgt.n	8006890 <__swbuf_r+0x4e>
 8006884:	4621      	mov	r1, r4
 8006886:	4628      	mov	r0, r5
 8006888:	f000 fa6e 	bl	8006d68 <_fflush_r>
 800688c:	2800      	cmp	r0, #0
 800688e:	d1ed      	bne.n	800686c <__swbuf_r+0x2a>
 8006890:	68a3      	ldr	r3, [r4, #8]
 8006892:	3b01      	subs	r3, #1
 8006894:	60a3      	str	r3, [r4, #8]
 8006896:	6823      	ldr	r3, [r4, #0]
 8006898:	1c5a      	adds	r2, r3, #1
 800689a:	6022      	str	r2, [r4, #0]
 800689c:	701e      	strb	r6, [r3, #0]
 800689e:	6962      	ldr	r2, [r4, #20]
 80068a0:	1c43      	adds	r3, r0, #1
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d004      	beq.n	80068b0 <__swbuf_r+0x6e>
 80068a6:	89a3      	ldrh	r3, [r4, #12]
 80068a8:	07db      	lsls	r3, r3, #31
 80068aa:	d5e1      	bpl.n	8006870 <__swbuf_r+0x2e>
 80068ac:	2e0a      	cmp	r6, #10
 80068ae:	d1df      	bne.n	8006870 <__swbuf_r+0x2e>
 80068b0:	4621      	mov	r1, r4
 80068b2:	4628      	mov	r0, r5
 80068b4:	f000 fa58 	bl	8006d68 <_fflush_r>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	d0d9      	beq.n	8006870 <__swbuf_r+0x2e>
 80068bc:	e7d6      	b.n	800686c <__swbuf_r+0x2a>
	...

080068c0 <__swsetup_r>:
 80068c0:	b538      	push	{r3, r4, r5, lr}
 80068c2:	4b29      	ldr	r3, [pc, #164]	@ (8006968 <__swsetup_r+0xa8>)
 80068c4:	4605      	mov	r5, r0
 80068c6:	6818      	ldr	r0, [r3, #0]
 80068c8:	460c      	mov	r4, r1
 80068ca:	b118      	cbz	r0, 80068d4 <__swsetup_r+0x14>
 80068cc:	6a03      	ldr	r3, [r0, #32]
 80068ce:	b90b      	cbnz	r3, 80068d4 <__swsetup_r+0x14>
 80068d0:	f7ff fee0 	bl	8006694 <__sinit>
 80068d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068d8:	0719      	lsls	r1, r3, #28
 80068da:	d422      	bmi.n	8006922 <__swsetup_r+0x62>
 80068dc:	06da      	lsls	r2, r3, #27
 80068de:	d407      	bmi.n	80068f0 <__swsetup_r+0x30>
 80068e0:	2209      	movs	r2, #9
 80068e2:	602a      	str	r2, [r5, #0]
 80068e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80068e8:	81a3      	strh	r3, [r4, #12]
 80068ea:	f04f 30ff 	mov.w	r0, #4294967295
 80068ee:	e033      	b.n	8006958 <__swsetup_r+0x98>
 80068f0:	0758      	lsls	r0, r3, #29
 80068f2:	d512      	bpl.n	800691a <__swsetup_r+0x5a>
 80068f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068f6:	b141      	cbz	r1, 800690a <__swsetup_r+0x4a>
 80068f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068fc:	4299      	cmp	r1, r3
 80068fe:	d002      	beq.n	8006906 <__swsetup_r+0x46>
 8006900:	4628      	mov	r0, r5
 8006902:	f000 f8b5 	bl	8006a70 <_free_r>
 8006906:	2300      	movs	r3, #0
 8006908:	6363      	str	r3, [r4, #52]	@ 0x34
 800690a:	89a3      	ldrh	r3, [r4, #12]
 800690c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006910:	81a3      	strh	r3, [r4, #12]
 8006912:	2300      	movs	r3, #0
 8006914:	6063      	str	r3, [r4, #4]
 8006916:	6923      	ldr	r3, [r4, #16]
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	89a3      	ldrh	r3, [r4, #12]
 800691c:	f043 0308 	orr.w	r3, r3, #8
 8006920:	81a3      	strh	r3, [r4, #12]
 8006922:	6923      	ldr	r3, [r4, #16]
 8006924:	b94b      	cbnz	r3, 800693a <__swsetup_r+0x7a>
 8006926:	89a3      	ldrh	r3, [r4, #12]
 8006928:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800692c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006930:	d003      	beq.n	800693a <__swsetup_r+0x7a>
 8006932:	4621      	mov	r1, r4
 8006934:	4628      	mov	r0, r5
 8006936:	f000 fa65 	bl	8006e04 <__smakebuf_r>
 800693a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800693e:	f013 0201 	ands.w	r2, r3, #1
 8006942:	d00a      	beq.n	800695a <__swsetup_r+0x9a>
 8006944:	2200      	movs	r2, #0
 8006946:	60a2      	str	r2, [r4, #8]
 8006948:	6962      	ldr	r2, [r4, #20]
 800694a:	4252      	negs	r2, r2
 800694c:	61a2      	str	r2, [r4, #24]
 800694e:	6922      	ldr	r2, [r4, #16]
 8006950:	b942      	cbnz	r2, 8006964 <__swsetup_r+0xa4>
 8006952:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006956:	d1c5      	bne.n	80068e4 <__swsetup_r+0x24>
 8006958:	bd38      	pop	{r3, r4, r5, pc}
 800695a:	0799      	lsls	r1, r3, #30
 800695c:	bf58      	it	pl
 800695e:	6962      	ldrpl	r2, [r4, #20]
 8006960:	60a2      	str	r2, [r4, #8]
 8006962:	e7f4      	b.n	800694e <__swsetup_r+0x8e>
 8006964:	2000      	movs	r0, #0
 8006966:	e7f7      	b.n	8006958 <__swsetup_r+0x98>
 8006968:	20000018 	.word	0x20000018

0800696c <memcmp>:
 800696c:	b510      	push	{r4, lr}
 800696e:	3901      	subs	r1, #1
 8006970:	4402      	add	r2, r0
 8006972:	4290      	cmp	r0, r2
 8006974:	d101      	bne.n	800697a <memcmp+0xe>
 8006976:	2000      	movs	r0, #0
 8006978:	e005      	b.n	8006986 <memcmp+0x1a>
 800697a:	7803      	ldrb	r3, [r0, #0]
 800697c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006980:	42a3      	cmp	r3, r4
 8006982:	d001      	beq.n	8006988 <memcmp+0x1c>
 8006984:	1b18      	subs	r0, r3, r4
 8006986:	bd10      	pop	{r4, pc}
 8006988:	3001      	adds	r0, #1
 800698a:	e7f2      	b.n	8006972 <memcmp+0x6>

0800698c <memset>:
 800698c:	4402      	add	r2, r0
 800698e:	4603      	mov	r3, r0
 8006990:	4293      	cmp	r3, r2
 8006992:	d100      	bne.n	8006996 <memset+0xa>
 8006994:	4770      	bx	lr
 8006996:	f803 1b01 	strb.w	r1, [r3], #1
 800699a:	e7f9      	b.n	8006990 <memset+0x4>

0800699c <_close_r>:
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	4d06      	ldr	r5, [pc, #24]	@ (80069b8 <_close_r+0x1c>)
 80069a0:	2300      	movs	r3, #0
 80069a2:	4604      	mov	r4, r0
 80069a4:	4608      	mov	r0, r1
 80069a6:	602b      	str	r3, [r5, #0]
 80069a8:	f7fa f8e1 	bl	8000b6e <_close>
 80069ac:	1c43      	adds	r3, r0, #1
 80069ae:	d102      	bne.n	80069b6 <_close_r+0x1a>
 80069b0:	682b      	ldr	r3, [r5, #0]
 80069b2:	b103      	cbz	r3, 80069b6 <_close_r+0x1a>
 80069b4:	6023      	str	r3, [r4, #0]
 80069b6:	bd38      	pop	{r3, r4, r5, pc}
 80069b8:	2000d230 	.word	0x2000d230

080069bc <_lseek_r>:
 80069bc:	b538      	push	{r3, r4, r5, lr}
 80069be:	4d07      	ldr	r5, [pc, #28]	@ (80069dc <_lseek_r+0x20>)
 80069c0:	4604      	mov	r4, r0
 80069c2:	4608      	mov	r0, r1
 80069c4:	4611      	mov	r1, r2
 80069c6:	2200      	movs	r2, #0
 80069c8:	602a      	str	r2, [r5, #0]
 80069ca:	461a      	mov	r2, r3
 80069cc:	f7fa f8f6 	bl	8000bbc <_lseek>
 80069d0:	1c43      	adds	r3, r0, #1
 80069d2:	d102      	bne.n	80069da <_lseek_r+0x1e>
 80069d4:	682b      	ldr	r3, [r5, #0]
 80069d6:	b103      	cbz	r3, 80069da <_lseek_r+0x1e>
 80069d8:	6023      	str	r3, [r4, #0]
 80069da:	bd38      	pop	{r3, r4, r5, pc}
 80069dc:	2000d230 	.word	0x2000d230

080069e0 <_read_r>:
 80069e0:	b538      	push	{r3, r4, r5, lr}
 80069e2:	4d07      	ldr	r5, [pc, #28]	@ (8006a00 <_read_r+0x20>)
 80069e4:	4604      	mov	r4, r0
 80069e6:	4608      	mov	r0, r1
 80069e8:	4611      	mov	r1, r2
 80069ea:	2200      	movs	r2, #0
 80069ec:	602a      	str	r2, [r5, #0]
 80069ee:	461a      	mov	r2, r3
 80069f0:	f7fa f8a0 	bl	8000b34 <_read>
 80069f4:	1c43      	adds	r3, r0, #1
 80069f6:	d102      	bne.n	80069fe <_read_r+0x1e>
 80069f8:	682b      	ldr	r3, [r5, #0]
 80069fa:	b103      	cbz	r3, 80069fe <_read_r+0x1e>
 80069fc:	6023      	str	r3, [r4, #0]
 80069fe:	bd38      	pop	{r3, r4, r5, pc}
 8006a00:	2000d230 	.word	0x2000d230

08006a04 <__libc_init_array>:
 8006a04:	b570      	push	{r4, r5, r6, lr}
 8006a06:	4d0d      	ldr	r5, [pc, #52]	@ (8006a3c <__libc_init_array+0x38>)
 8006a08:	4c0d      	ldr	r4, [pc, #52]	@ (8006a40 <__libc_init_array+0x3c>)
 8006a0a:	1b64      	subs	r4, r4, r5
 8006a0c:	10a4      	asrs	r4, r4, #2
 8006a0e:	2600      	movs	r6, #0
 8006a10:	42a6      	cmp	r6, r4
 8006a12:	d109      	bne.n	8006a28 <__libc_init_array+0x24>
 8006a14:	4d0b      	ldr	r5, [pc, #44]	@ (8006a44 <__libc_init_array+0x40>)
 8006a16:	4c0c      	ldr	r4, [pc, #48]	@ (8006a48 <__libc_init_array+0x44>)
 8006a18:	f000 fa70 	bl	8006efc <_init>
 8006a1c:	1b64      	subs	r4, r4, r5
 8006a1e:	10a4      	asrs	r4, r4, #2
 8006a20:	2600      	movs	r6, #0
 8006a22:	42a6      	cmp	r6, r4
 8006a24:	d105      	bne.n	8006a32 <__libc_init_array+0x2e>
 8006a26:	bd70      	pop	{r4, r5, r6, pc}
 8006a28:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a2c:	4798      	blx	r3
 8006a2e:	3601      	adds	r6, #1
 8006a30:	e7ee      	b.n	8006a10 <__libc_init_array+0xc>
 8006a32:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a36:	4798      	blx	r3
 8006a38:	3601      	adds	r6, #1
 8006a3a:	e7f2      	b.n	8006a22 <__libc_init_array+0x1e>
 8006a3c:	08007160 	.word	0x08007160
 8006a40:	08007160 	.word	0x08007160
 8006a44:	08007160 	.word	0x08007160
 8006a48:	08007164 	.word	0x08007164

08006a4c <__retarget_lock_init_recursive>:
 8006a4c:	4770      	bx	lr

08006a4e <__retarget_lock_acquire_recursive>:
 8006a4e:	4770      	bx	lr

08006a50 <__retarget_lock_release_recursive>:
 8006a50:	4770      	bx	lr

08006a52 <memcpy>:
 8006a52:	440a      	add	r2, r1
 8006a54:	4291      	cmp	r1, r2
 8006a56:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a5a:	d100      	bne.n	8006a5e <memcpy+0xc>
 8006a5c:	4770      	bx	lr
 8006a5e:	b510      	push	{r4, lr}
 8006a60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a68:	4291      	cmp	r1, r2
 8006a6a:	d1f9      	bne.n	8006a60 <memcpy+0xe>
 8006a6c:	bd10      	pop	{r4, pc}
	...

08006a70 <_free_r>:
 8006a70:	b538      	push	{r3, r4, r5, lr}
 8006a72:	4605      	mov	r5, r0
 8006a74:	2900      	cmp	r1, #0
 8006a76:	d041      	beq.n	8006afc <_free_r+0x8c>
 8006a78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a7c:	1f0c      	subs	r4, r1, #4
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	bfb8      	it	lt
 8006a82:	18e4      	addlt	r4, r4, r3
 8006a84:	f000 f8e0 	bl	8006c48 <__malloc_lock>
 8006a88:	4a1d      	ldr	r2, [pc, #116]	@ (8006b00 <_free_r+0x90>)
 8006a8a:	6813      	ldr	r3, [r2, #0]
 8006a8c:	b933      	cbnz	r3, 8006a9c <_free_r+0x2c>
 8006a8e:	6063      	str	r3, [r4, #4]
 8006a90:	6014      	str	r4, [r2, #0]
 8006a92:	4628      	mov	r0, r5
 8006a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a98:	f000 b8dc 	b.w	8006c54 <__malloc_unlock>
 8006a9c:	42a3      	cmp	r3, r4
 8006a9e:	d908      	bls.n	8006ab2 <_free_r+0x42>
 8006aa0:	6820      	ldr	r0, [r4, #0]
 8006aa2:	1821      	adds	r1, r4, r0
 8006aa4:	428b      	cmp	r3, r1
 8006aa6:	bf01      	itttt	eq
 8006aa8:	6819      	ldreq	r1, [r3, #0]
 8006aaa:	685b      	ldreq	r3, [r3, #4]
 8006aac:	1809      	addeq	r1, r1, r0
 8006aae:	6021      	streq	r1, [r4, #0]
 8006ab0:	e7ed      	b.n	8006a8e <_free_r+0x1e>
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	685b      	ldr	r3, [r3, #4]
 8006ab6:	b10b      	cbz	r3, 8006abc <_free_r+0x4c>
 8006ab8:	42a3      	cmp	r3, r4
 8006aba:	d9fa      	bls.n	8006ab2 <_free_r+0x42>
 8006abc:	6811      	ldr	r1, [r2, #0]
 8006abe:	1850      	adds	r0, r2, r1
 8006ac0:	42a0      	cmp	r0, r4
 8006ac2:	d10b      	bne.n	8006adc <_free_r+0x6c>
 8006ac4:	6820      	ldr	r0, [r4, #0]
 8006ac6:	4401      	add	r1, r0
 8006ac8:	1850      	adds	r0, r2, r1
 8006aca:	4283      	cmp	r3, r0
 8006acc:	6011      	str	r1, [r2, #0]
 8006ace:	d1e0      	bne.n	8006a92 <_free_r+0x22>
 8006ad0:	6818      	ldr	r0, [r3, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	6053      	str	r3, [r2, #4]
 8006ad6:	4408      	add	r0, r1
 8006ad8:	6010      	str	r0, [r2, #0]
 8006ada:	e7da      	b.n	8006a92 <_free_r+0x22>
 8006adc:	d902      	bls.n	8006ae4 <_free_r+0x74>
 8006ade:	230c      	movs	r3, #12
 8006ae0:	602b      	str	r3, [r5, #0]
 8006ae2:	e7d6      	b.n	8006a92 <_free_r+0x22>
 8006ae4:	6820      	ldr	r0, [r4, #0]
 8006ae6:	1821      	adds	r1, r4, r0
 8006ae8:	428b      	cmp	r3, r1
 8006aea:	bf04      	itt	eq
 8006aec:	6819      	ldreq	r1, [r3, #0]
 8006aee:	685b      	ldreq	r3, [r3, #4]
 8006af0:	6063      	str	r3, [r4, #4]
 8006af2:	bf04      	itt	eq
 8006af4:	1809      	addeq	r1, r1, r0
 8006af6:	6021      	streq	r1, [r4, #0]
 8006af8:	6054      	str	r4, [r2, #4]
 8006afa:	e7ca      	b.n	8006a92 <_free_r+0x22>
 8006afc:	bd38      	pop	{r3, r4, r5, pc}
 8006afe:	bf00      	nop
 8006b00:	2000d23c 	.word	0x2000d23c

08006b04 <sbrk_aligned>:
 8006b04:	b570      	push	{r4, r5, r6, lr}
 8006b06:	4e0f      	ldr	r6, [pc, #60]	@ (8006b44 <sbrk_aligned+0x40>)
 8006b08:	460c      	mov	r4, r1
 8006b0a:	6831      	ldr	r1, [r6, #0]
 8006b0c:	4605      	mov	r5, r0
 8006b0e:	b911      	cbnz	r1, 8006b16 <sbrk_aligned+0x12>
 8006b10:	f000 f9d6 	bl	8006ec0 <_sbrk_r>
 8006b14:	6030      	str	r0, [r6, #0]
 8006b16:	4621      	mov	r1, r4
 8006b18:	4628      	mov	r0, r5
 8006b1a:	f000 f9d1 	bl	8006ec0 <_sbrk_r>
 8006b1e:	1c43      	adds	r3, r0, #1
 8006b20:	d103      	bne.n	8006b2a <sbrk_aligned+0x26>
 8006b22:	f04f 34ff 	mov.w	r4, #4294967295
 8006b26:	4620      	mov	r0, r4
 8006b28:	bd70      	pop	{r4, r5, r6, pc}
 8006b2a:	1cc4      	adds	r4, r0, #3
 8006b2c:	f024 0403 	bic.w	r4, r4, #3
 8006b30:	42a0      	cmp	r0, r4
 8006b32:	d0f8      	beq.n	8006b26 <sbrk_aligned+0x22>
 8006b34:	1a21      	subs	r1, r4, r0
 8006b36:	4628      	mov	r0, r5
 8006b38:	f000 f9c2 	bl	8006ec0 <_sbrk_r>
 8006b3c:	3001      	adds	r0, #1
 8006b3e:	d1f2      	bne.n	8006b26 <sbrk_aligned+0x22>
 8006b40:	e7ef      	b.n	8006b22 <sbrk_aligned+0x1e>
 8006b42:	bf00      	nop
 8006b44:	2000d238 	.word	0x2000d238

08006b48 <_malloc_r>:
 8006b48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b4c:	1ccd      	adds	r5, r1, #3
 8006b4e:	f025 0503 	bic.w	r5, r5, #3
 8006b52:	3508      	adds	r5, #8
 8006b54:	2d0c      	cmp	r5, #12
 8006b56:	bf38      	it	cc
 8006b58:	250c      	movcc	r5, #12
 8006b5a:	2d00      	cmp	r5, #0
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	db01      	blt.n	8006b64 <_malloc_r+0x1c>
 8006b60:	42a9      	cmp	r1, r5
 8006b62:	d904      	bls.n	8006b6e <_malloc_r+0x26>
 8006b64:	230c      	movs	r3, #12
 8006b66:	6033      	str	r3, [r6, #0]
 8006b68:	2000      	movs	r0, #0
 8006b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b6e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006c44 <_malloc_r+0xfc>
 8006b72:	f000 f869 	bl	8006c48 <__malloc_lock>
 8006b76:	f8d8 3000 	ldr.w	r3, [r8]
 8006b7a:	461c      	mov	r4, r3
 8006b7c:	bb44      	cbnz	r4, 8006bd0 <_malloc_r+0x88>
 8006b7e:	4629      	mov	r1, r5
 8006b80:	4630      	mov	r0, r6
 8006b82:	f7ff ffbf 	bl	8006b04 <sbrk_aligned>
 8006b86:	1c43      	adds	r3, r0, #1
 8006b88:	4604      	mov	r4, r0
 8006b8a:	d158      	bne.n	8006c3e <_malloc_r+0xf6>
 8006b8c:	f8d8 4000 	ldr.w	r4, [r8]
 8006b90:	4627      	mov	r7, r4
 8006b92:	2f00      	cmp	r7, #0
 8006b94:	d143      	bne.n	8006c1e <_malloc_r+0xd6>
 8006b96:	2c00      	cmp	r4, #0
 8006b98:	d04b      	beq.n	8006c32 <_malloc_r+0xea>
 8006b9a:	6823      	ldr	r3, [r4, #0]
 8006b9c:	4639      	mov	r1, r7
 8006b9e:	4630      	mov	r0, r6
 8006ba0:	eb04 0903 	add.w	r9, r4, r3
 8006ba4:	f000 f98c 	bl	8006ec0 <_sbrk_r>
 8006ba8:	4581      	cmp	r9, r0
 8006baa:	d142      	bne.n	8006c32 <_malloc_r+0xea>
 8006bac:	6821      	ldr	r1, [r4, #0]
 8006bae:	1a6d      	subs	r5, r5, r1
 8006bb0:	4629      	mov	r1, r5
 8006bb2:	4630      	mov	r0, r6
 8006bb4:	f7ff ffa6 	bl	8006b04 <sbrk_aligned>
 8006bb8:	3001      	adds	r0, #1
 8006bba:	d03a      	beq.n	8006c32 <_malloc_r+0xea>
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	442b      	add	r3, r5
 8006bc0:	6023      	str	r3, [r4, #0]
 8006bc2:	f8d8 3000 	ldr.w	r3, [r8]
 8006bc6:	685a      	ldr	r2, [r3, #4]
 8006bc8:	bb62      	cbnz	r2, 8006c24 <_malloc_r+0xdc>
 8006bca:	f8c8 7000 	str.w	r7, [r8]
 8006bce:	e00f      	b.n	8006bf0 <_malloc_r+0xa8>
 8006bd0:	6822      	ldr	r2, [r4, #0]
 8006bd2:	1b52      	subs	r2, r2, r5
 8006bd4:	d420      	bmi.n	8006c18 <_malloc_r+0xd0>
 8006bd6:	2a0b      	cmp	r2, #11
 8006bd8:	d917      	bls.n	8006c0a <_malloc_r+0xc2>
 8006bda:	1961      	adds	r1, r4, r5
 8006bdc:	42a3      	cmp	r3, r4
 8006bde:	6025      	str	r5, [r4, #0]
 8006be0:	bf18      	it	ne
 8006be2:	6059      	strne	r1, [r3, #4]
 8006be4:	6863      	ldr	r3, [r4, #4]
 8006be6:	bf08      	it	eq
 8006be8:	f8c8 1000 	streq.w	r1, [r8]
 8006bec:	5162      	str	r2, [r4, r5]
 8006bee:	604b      	str	r3, [r1, #4]
 8006bf0:	4630      	mov	r0, r6
 8006bf2:	f000 f82f 	bl	8006c54 <__malloc_unlock>
 8006bf6:	f104 000b 	add.w	r0, r4, #11
 8006bfa:	1d23      	adds	r3, r4, #4
 8006bfc:	f020 0007 	bic.w	r0, r0, #7
 8006c00:	1ac2      	subs	r2, r0, r3
 8006c02:	bf1c      	itt	ne
 8006c04:	1a1b      	subne	r3, r3, r0
 8006c06:	50a3      	strne	r3, [r4, r2]
 8006c08:	e7af      	b.n	8006b6a <_malloc_r+0x22>
 8006c0a:	6862      	ldr	r2, [r4, #4]
 8006c0c:	42a3      	cmp	r3, r4
 8006c0e:	bf0c      	ite	eq
 8006c10:	f8c8 2000 	streq.w	r2, [r8]
 8006c14:	605a      	strne	r2, [r3, #4]
 8006c16:	e7eb      	b.n	8006bf0 <_malloc_r+0xa8>
 8006c18:	4623      	mov	r3, r4
 8006c1a:	6864      	ldr	r4, [r4, #4]
 8006c1c:	e7ae      	b.n	8006b7c <_malloc_r+0x34>
 8006c1e:	463c      	mov	r4, r7
 8006c20:	687f      	ldr	r7, [r7, #4]
 8006c22:	e7b6      	b.n	8006b92 <_malloc_r+0x4a>
 8006c24:	461a      	mov	r2, r3
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	42a3      	cmp	r3, r4
 8006c2a:	d1fb      	bne.n	8006c24 <_malloc_r+0xdc>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	6053      	str	r3, [r2, #4]
 8006c30:	e7de      	b.n	8006bf0 <_malloc_r+0xa8>
 8006c32:	230c      	movs	r3, #12
 8006c34:	6033      	str	r3, [r6, #0]
 8006c36:	4630      	mov	r0, r6
 8006c38:	f000 f80c 	bl	8006c54 <__malloc_unlock>
 8006c3c:	e794      	b.n	8006b68 <_malloc_r+0x20>
 8006c3e:	6005      	str	r5, [r0, #0]
 8006c40:	e7d6      	b.n	8006bf0 <_malloc_r+0xa8>
 8006c42:	bf00      	nop
 8006c44:	2000d23c 	.word	0x2000d23c

08006c48 <__malloc_lock>:
 8006c48:	4801      	ldr	r0, [pc, #4]	@ (8006c50 <__malloc_lock+0x8>)
 8006c4a:	f7ff bf00 	b.w	8006a4e <__retarget_lock_acquire_recursive>
 8006c4e:	bf00      	nop
 8006c50:	2000d234 	.word	0x2000d234

08006c54 <__malloc_unlock>:
 8006c54:	4801      	ldr	r0, [pc, #4]	@ (8006c5c <__malloc_unlock+0x8>)
 8006c56:	f7ff befb 	b.w	8006a50 <__retarget_lock_release_recursive>
 8006c5a:	bf00      	nop
 8006c5c:	2000d234 	.word	0x2000d234

08006c60 <__sflush_r>:
 8006c60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c68:	0716      	lsls	r6, r2, #28
 8006c6a:	4605      	mov	r5, r0
 8006c6c:	460c      	mov	r4, r1
 8006c6e:	d454      	bmi.n	8006d1a <__sflush_r+0xba>
 8006c70:	684b      	ldr	r3, [r1, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	dc02      	bgt.n	8006c7c <__sflush_r+0x1c>
 8006c76:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	dd48      	ble.n	8006d0e <__sflush_r+0xae>
 8006c7c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c7e:	2e00      	cmp	r6, #0
 8006c80:	d045      	beq.n	8006d0e <__sflush_r+0xae>
 8006c82:	2300      	movs	r3, #0
 8006c84:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006c88:	682f      	ldr	r7, [r5, #0]
 8006c8a:	6a21      	ldr	r1, [r4, #32]
 8006c8c:	602b      	str	r3, [r5, #0]
 8006c8e:	d030      	beq.n	8006cf2 <__sflush_r+0x92>
 8006c90:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006c92:	89a3      	ldrh	r3, [r4, #12]
 8006c94:	0759      	lsls	r1, r3, #29
 8006c96:	d505      	bpl.n	8006ca4 <__sflush_r+0x44>
 8006c98:	6863      	ldr	r3, [r4, #4]
 8006c9a:	1ad2      	subs	r2, r2, r3
 8006c9c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c9e:	b10b      	cbz	r3, 8006ca4 <__sflush_r+0x44>
 8006ca0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006ca2:	1ad2      	subs	r2, r2, r3
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006ca8:	6a21      	ldr	r1, [r4, #32]
 8006caa:	4628      	mov	r0, r5
 8006cac:	47b0      	blx	r6
 8006cae:	1c43      	adds	r3, r0, #1
 8006cb0:	89a3      	ldrh	r3, [r4, #12]
 8006cb2:	d106      	bne.n	8006cc2 <__sflush_r+0x62>
 8006cb4:	6829      	ldr	r1, [r5, #0]
 8006cb6:	291d      	cmp	r1, #29
 8006cb8:	d82b      	bhi.n	8006d12 <__sflush_r+0xb2>
 8006cba:	4a2a      	ldr	r2, [pc, #168]	@ (8006d64 <__sflush_r+0x104>)
 8006cbc:	40ca      	lsrs	r2, r1
 8006cbe:	07d6      	lsls	r6, r2, #31
 8006cc0:	d527      	bpl.n	8006d12 <__sflush_r+0xb2>
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	6062      	str	r2, [r4, #4]
 8006cc6:	04d9      	lsls	r1, r3, #19
 8006cc8:	6922      	ldr	r2, [r4, #16]
 8006cca:	6022      	str	r2, [r4, #0]
 8006ccc:	d504      	bpl.n	8006cd8 <__sflush_r+0x78>
 8006cce:	1c42      	adds	r2, r0, #1
 8006cd0:	d101      	bne.n	8006cd6 <__sflush_r+0x76>
 8006cd2:	682b      	ldr	r3, [r5, #0]
 8006cd4:	b903      	cbnz	r3, 8006cd8 <__sflush_r+0x78>
 8006cd6:	6560      	str	r0, [r4, #84]	@ 0x54
 8006cd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006cda:	602f      	str	r7, [r5, #0]
 8006cdc:	b1b9      	cbz	r1, 8006d0e <__sflush_r+0xae>
 8006cde:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ce2:	4299      	cmp	r1, r3
 8006ce4:	d002      	beq.n	8006cec <__sflush_r+0x8c>
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	f7ff fec2 	bl	8006a70 <_free_r>
 8006cec:	2300      	movs	r3, #0
 8006cee:	6363      	str	r3, [r4, #52]	@ 0x34
 8006cf0:	e00d      	b.n	8006d0e <__sflush_r+0xae>
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	47b0      	blx	r6
 8006cf8:	4602      	mov	r2, r0
 8006cfa:	1c50      	adds	r0, r2, #1
 8006cfc:	d1c9      	bne.n	8006c92 <__sflush_r+0x32>
 8006cfe:	682b      	ldr	r3, [r5, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d0c6      	beq.n	8006c92 <__sflush_r+0x32>
 8006d04:	2b1d      	cmp	r3, #29
 8006d06:	d001      	beq.n	8006d0c <__sflush_r+0xac>
 8006d08:	2b16      	cmp	r3, #22
 8006d0a:	d11e      	bne.n	8006d4a <__sflush_r+0xea>
 8006d0c:	602f      	str	r7, [r5, #0]
 8006d0e:	2000      	movs	r0, #0
 8006d10:	e022      	b.n	8006d58 <__sflush_r+0xf8>
 8006d12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d16:	b21b      	sxth	r3, r3
 8006d18:	e01b      	b.n	8006d52 <__sflush_r+0xf2>
 8006d1a:	690f      	ldr	r7, [r1, #16]
 8006d1c:	2f00      	cmp	r7, #0
 8006d1e:	d0f6      	beq.n	8006d0e <__sflush_r+0xae>
 8006d20:	0793      	lsls	r3, r2, #30
 8006d22:	680e      	ldr	r6, [r1, #0]
 8006d24:	bf08      	it	eq
 8006d26:	694b      	ldreq	r3, [r1, #20]
 8006d28:	600f      	str	r7, [r1, #0]
 8006d2a:	bf18      	it	ne
 8006d2c:	2300      	movne	r3, #0
 8006d2e:	eba6 0807 	sub.w	r8, r6, r7
 8006d32:	608b      	str	r3, [r1, #8]
 8006d34:	f1b8 0f00 	cmp.w	r8, #0
 8006d38:	dde9      	ble.n	8006d0e <__sflush_r+0xae>
 8006d3a:	6a21      	ldr	r1, [r4, #32]
 8006d3c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006d3e:	4643      	mov	r3, r8
 8006d40:	463a      	mov	r2, r7
 8006d42:	4628      	mov	r0, r5
 8006d44:	47b0      	blx	r6
 8006d46:	2800      	cmp	r0, #0
 8006d48:	dc08      	bgt.n	8006d5c <__sflush_r+0xfc>
 8006d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d52:	81a3      	strh	r3, [r4, #12]
 8006d54:	f04f 30ff 	mov.w	r0, #4294967295
 8006d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d5c:	4407      	add	r7, r0
 8006d5e:	eba8 0800 	sub.w	r8, r8, r0
 8006d62:	e7e7      	b.n	8006d34 <__sflush_r+0xd4>
 8006d64:	20400001 	.word	0x20400001

08006d68 <_fflush_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	690b      	ldr	r3, [r1, #16]
 8006d6c:	4605      	mov	r5, r0
 8006d6e:	460c      	mov	r4, r1
 8006d70:	b913      	cbnz	r3, 8006d78 <_fflush_r+0x10>
 8006d72:	2500      	movs	r5, #0
 8006d74:	4628      	mov	r0, r5
 8006d76:	bd38      	pop	{r3, r4, r5, pc}
 8006d78:	b118      	cbz	r0, 8006d82 <_fflush_r+0x1a>
 8006d7a:	6a03      	ldr	r3, [r0, #32]
 8006d7c:	b90b      	cbnz	r3, 8006d82 <_fflush_r+0x1a>
 8006d7e:	f7ff fc89 	bl	8006694 <__sinit>
 8006d82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d0f3      	beq.n	8006d72 <_fflush_r+0xa>
 8006d8a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006d8c:	07d0      	lsls	r0, r2, #31
 8006d8e:	d404      	bmi.n	8006d9a <_fflush_r+0x32>
 8006d90:	0599      	lsls	r1, r3, #22
 8006d92:	d402      	bmi.n	8006d9a <_fflush_r+0x32>
 8006d94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d96:	f7ff fe5a 	bl	8006a4e <__retarget_lock_acquire_recursive>
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	f7ff ff5f 	bl	8006c60 <__sflush_r>
 8006da2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006da4:	07da      	lsls	r2, r3, #31
 8006da6:	4605      	mov	r5, r0
 8006da8:	d4e4      	bmi.n	8006d74 <_fflush_r+0xc>
 8006daa:	89a3      	ldrh	r3, [r4, #12]
 8006dac:	059b      	lsls	r3, r3, #22
 8006dae:	d4e1      	bmi.n	8006d74 <_fflush_r+0xc>
 8006db0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006db2:	f7ff fe4d 	bl	8006a50 <__retarget_lock_release_recursive>
 8006db6:	e7dd      	b.n	8006d74 <_fflush_r+0xc>

08006db8 <__swhatbuf_r>:
 8006db8:	b570      	push	{r4, r5, r6, lr}
 8006dba:	460c      	mov	r4, r1
 8006dbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc0:	2900      	cmp	r1, #0
 8006dc2:	b096      	sub	sp, #88	@ 0x58
 8006dc4:	4615      	mov	r5, r2
 8006dc6:	461e      	mov	r6, r3
 8006dc8:	da0d      	bge.n	8006de6 <__swhatbuf_r+0x2e>
 8006dca:	89a3      	ldrh	r3, [r4, #12]
 8006dcc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006dd0:	f04f 0100 	mov.w	r1, #0
 8006dd4:	bf14      	ite	ne
 8006dd6:	2340      	movne	r3, #64	@ 0x40
 8006dd8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006ddc:	2000      	movs	r0, #0
 8006dde:	6031      	str	r1, [r6, #0]
 8006de0:	602b      	str	r3, [r5, #0]
 8006de2:	b016      	add	sp, #88	@ 0x58
 8006de4:	bd70      	pop	{r4, r5, r6, pc}
 8006de6:	466a      	mov	r2, sp
 8006de8:	f000 f848 	bl	8006e7c <_fstat_r>
 8006dec:	2800      	cmp	r0, #0
 8006dee:	dbec      	blt.n	8006dca <__swhatbuf_r+0x12>
 8006df0:	9901      	ldr	r1, [sp, #4]
 8006df2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006df6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006dfa:	4259      	negs	r1, r3
 8006dfc:	4159      	adcs	r1, r3
 8006dfe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006e02:	e7eb      	b.n	8006ddc <__swhatbuf_r+0x24>

08006e04 <__smakebuf_r>:
 8006e04:	898b      	ldrh	r3, [r1, #12]
 8006e06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e08:	079d      	lsls	r5, r3, #30
 8006e0a:	4606      	mov	r6, r0
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	d507      	bpl.n	8006e20 <__smakebuf_r+0x1c>
 8006e10:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006e14:	6023      	str	r3, [r4, #0]
 8006e16:	6123      	str	r3, [r4, #16]
 8006e18:	2301      	movs	r3, #1
 8006e1a:	6163      	str	r3, [r4, #20]
 8006e1c:	b003      	add	sp, #12
 8006e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006e20:	ab01      	add	r3, sp, #4
 8006e22:	466a      	mov	r2, sp
 8006e24:	f7ff ffc8 	bl	8006db8 <__swhatbuf_r>
 8006e28:	9f00      	ldr	r7, [sp, #0]
 8006e2a:	4605      	mov	r5, r0
 8006e2c:	4639      	mov	r1, r7
 8006e2e:	4630      	mov	r0, r6
 8006e30:	f7ff fe8a 	bl	8006b48 <_malloc_r>
 8006e34:	b948      	cbnz	r0, 8006e4a <__smakebuf_r+0x46>
 8006e36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e3a:	059a      	lsls	r2, r3, #22
 8006e3c:	d4ee      	bmi.n	8006e1c <__smakebuf_r+0x18>
 8006e3e:	f023 0303 	bic.w	r3, r3, #3
 8006e42:	f043 0302 	orr.w	r3, r3, #2
 8006e46:	81a3      	strh	r3, [r4, #12]
 8006e48:	e7e2      	b.n	8006e10 <__smakebuf_r+0xc>
 8006e4a:	89a3      	ldrh	r3, [r4, #12]
 8006e4c:	6020      	str	r0, [r4, #0]
 8006e4e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e52:	81a3      	strh	r3, [r4, #12]
 8006e54:	9b01      	ldr	r3, [sp, #4]
 8006e56:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006e5a:	b15b      	cbz	r3, 8006e74 <__smakebuf_r+0x70>
 8006e5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e60:	4630      	mov	r0, r6
 8006e62:	f000 f81d 	bl	8006ea0 <_isatty_r>
 8006e66:	b128      	cbz	r0, 8006e74 <__smakebuf_r+0x70>
 8006e68:	89a3      	ldrh	r3, [r4, #12]
 8006e6a:	f023 0303 	bic.w	r3, r3, #3
 8006e6e:	f043 0301 	orr.w	r3, r3, #1
 8006e72:	81a3      	strh	r3, [r4, #12]
 8006e74:	89a3      	ldrh	r3, [r4, #12]
 8006e76:	431d      	orrs	r5, r3
 8006e78:	81a5      	strh	r5, [r4, #12]
 8006e7a:	e7cf      	b.n	8006e1c <__smakebuf_r+0x18>

08006e7c <_fstat_r>:
 8006e7c:	b538      	push	{r3, r4, r5, lr}
 8006e7e:	4d07      	ldr	r5, [pc, #28]	@ (8006e9c <_fstat_r+0x20>)
 8006e80:	2300      	movs	r3, #0
 8006e82:	4604      	mov	r4, r0
 8006e84:	4608      	mov	r0, r1
 8006e86:	4611      	mov	r1, r2
 8006e88:	602b      	str	r3, [r5, #0]
 8006e8a:	f7f9 fe7c 	bl	8000b86 <_fstat>
 8006e8e:	1c43      	adds	r3, r0, #1
 8006e90:	d102      	bne.n	8006e98 <_fstat_r+0x1c>
 8006e92:	682b      	ldr	r3, [r5, #0]
 8006e94:	b103      	cbz	r3, 8006e98 <_fstat_r+0x1c>
 8006e96:	6023      	str	r3, [r4, #0]
 8006e98:	bd38      	pop	{r3, r4, r5, pc}
 8006e9a:	bf00      	nop
 8006e9c:	2000d230 	.word	0x2000d230

08006ea0 <_isatty_r>:
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	4d06      	ldr	r5, [pc, #24]	@ (8006ebc <_isatty_r+0x1c>)
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	4608      	mov	r0, r1
 8006eaa:	602b      	str	r3, [r5, #0]
 8006eac:	f7f9 fe7b 	bl	8000ba6 <_isatty>
 8006eb0:	1c43      	adds	r3, r0, #1
 8006eb2:	d102      	bne.n	8006eba <_isatty_r+0x1a>
 8006eb4:	682b      	ldr	r3, [r5, #0]
 8006eb6:	b103      	cbz	r3, 8006eba <_isatty_r+0x1a>
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	bd38      	pop	{r3, r4, r5, pc}
 8006ebc:	2000d230 	.word	0x2000d230

08006ec0 <_sbrk_r>:
 8006ec0:	b538      	push	{r3, r4, r5, lr}
 8006ec2:	4d06      	ldr	r5, [pc, #24]	@ (8006edc <_sbrk_r+0x1c>)
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	4604      	mov	r4, r0
 8006ec8:	4608      	mov	r0, r1
 8006eca:	602b      	str	r3, [r5, #0]
 8006ecc:	f000 f808 	bl	8006ee0 <_sbrk>
 8006ed0:	1c43      	adds	r3, r0, #1
 8006ed2:	d102      	bne.n	8006eda <_sbrk_r+0x1a>
 8006ed4:	682b      	ldr	r3, [r5, #0]
 8006ed6:	b103      	cbz	r3, 8006eda <_sbrk_r+0x1a>
 8006ed8:	6023      	str	r3, [r4, #0]
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	2000d230 	.word	0x2000d230

08006ee0 <_sbrk>:
 8006ee0:	4a04      	ldr	r2, [pc, #16]	@ (8006ef4 <_sbrk+0x14>)
 8006ee2:	6811      	ldr	r1, [r2, #0]
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	b909      	cbnz	r1, 8006eec <_sbrk+0xc>
 8006ee8:	4903      	ldr	r1, [pc, #12]	@ (8006ef8 <_sbrk+0x18>)
 8006eea:	6011      	str	r1, [r2, #0]
 8006eec:	6810      	ldr	r0, [r2, #0]
 8006eee:	4403      	add	r3, r0
 8006ef0:	6013      	str	r3, [r2, #0]
 8006ef2:	4770      	bx	lr
 8006ef4:	2000d240 	.word	0x2000d240
 8006ef8:	2000d248 	.word	0x2000d248

08006efc <_init>:
 8006efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006efe:	bf00      	nop
 8006f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f02:	bc08      	pop	{r3}
 8006f04:	469e      	mov	lr, r3
 8006f06:	4770      	bx	lr

08006f08 <_fini>:
 8006f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f0a:	bf00      	nop
 8006f0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f0e:	bc08      	pop	{r3}
 8006f10:	469e      	mov	lr, r3
 8006f12:	4770      	bx	lr
